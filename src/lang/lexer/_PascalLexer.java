/* The following code was generated by JFlex 1.4.1 on 12/19/12 2:09 AM */

package com.siberika.idea.pascal.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import com.siberika.idea.pascal.lang.psi.PasTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/19/12 2:09 AM from the specification file
 * <tt>pascal.flex</tt>
 */
class _PascalLexer implements FlexLexer, PasTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int XSTRING = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\2\2\0\1\22\22\0\1\21\2\0\1\66\1\16"+
    "\1\0\1\67\1\10\1\3\1\5\1\4\1\53\1\55\1\13\1\20"+
    "\1\1\12\11\1\63\1\54\1\61\1\60\1\62\1\0\1\65\4\17"+
    "\1\12\1\17\24\14\1\56\1\0\1\57\1\64\1\14\1\0\1\23"+
    "\1\44\1\35\1\24\1\40\1\41\1\47\1\33\1\30\1\52\1\50"+
    "\1\34\1\25\1\15\1\26\1\36\1\14\1\27\1\32\1\37\1\45"+
    "\1\31\1\51\1\43\1\42\1\46\1\6\1\0\1\7\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\11\1\14\1\15\23\12"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\1"+
    "\3\7\1\0\1\11\3\12\2\11\2\12\1\35\1\12"+
    "\1\36\3\12\1\37\1\40\1\12\1\41\4\12\1\42"+
    "\1\12\1\43\1\44\13\12\1\45\21\12\1\46\1\47"+
    "\1\50\1\51\1\7\1\0\1\11\1\12\1\52\1\53"+
    "\1\54\1\12\1\55\2\12\1\56\2\12\1\57\2\12"+
    "\1\60\12\12\1\61\1\62\1\63\2\12\1\64\7\12"+
    "\1\65\4\12\1\66\4\12\1\67\3\12\1\70\32\12"+
    "\1\71\2\12\1\72\6\12\1\73\1\12\1\74\1\75"+
    "\1\76\4\12\1\77\2\12\1\100\1\12\1\101\1\102"+
    "\1\103\2\12\1\104\6\12\1\105\12\12\1\106\1\12"+
    "\1\107\1\110\7\12\1\111\2\12\1\112\1\113\1\114"+
    "\2\12\1\115\3\12\1\116\2\12\1\117\1\120\2\12"+
    "\1\121\2\12\1\33\2\12\1\122\4\12\1\123\17\12"+
    "\1\124\3\12\1\125\1\12\1\126\1\12\1\127\2\12"+
    "\1\130\2\12\1\131\10\12\1\132\2\12\1\133\6\12"+
    "\1\134\1\135\2\12\1\136\1\137\3\12\1\140\10\12"+
    "\1\141\3\12\1\142\6\12\1\143\1\12\1\144\4\12"+
    "\1\145\1\146\1\147\161\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\160\0\340\0\160\0\160"+
    "\0\u0118\0\160\0\u0150\0\u0188\0\160\0\u01c0\0\u01f8\0\u0230"+
    "\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\160\0\160\0\160\0\160\0\160"+
    "\0\160\0\u0690\0\u06c8\0\u0700\0\160\0\160\0\160\0\160"+
    "\0\160\0\u0738\0\u0770\0\u07a8\0\u07e0\0\160\0\u0818\0\u0850"+
    "\0\u0888\0\u08c0\0\u08f8\0\u01f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0888\0\u0888\0\u0b28"+
    "\0\u0888\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0888"+
    "\0\u0888\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00"+
    "\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0888\0\u0f18\0\u0f50\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\160\0\160"+
    "\0\160\0\160\0\u12d0\0\u0930\0\u1308\0\u1340\0\u1340\0\u1340"+
    "\0\u1340\0\u1378\0\u1340\0\u13b0\0\u13e8\0\u1340\0\u1420\0\u1458"+
    "\0\u1340\0\u1490\0\u14c8\0\u1340\0\u1500\0\u1538\0\u1570\0\u15a8"+
    "\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1340\0\u1340"+
    "\0\u1340\0\u1730\0\u1768\0\u1340\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\u1340\0\u1928\0\u1960\0\u1998\0\u19d0"+
    "\0\u1340\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1340\0\u1ae8\0\u1b20"+
    "\0\u1b58\0\u1340\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68"+
    "\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028"+
    "\0\u2060\0\u2098\0\u20d0\0\u2108\0\u1d18\0\u2140\0\u2178\0\u1d18"+
    "\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u1d18\0\u2300"+
    "\0\u1d18\0\u1d18\0\u1d18\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u1d18"+
    "\0\u2418\0\u2450\0\u1d18\0\u2488\0\u1d18\0\u1d18\0\u1d18\0\u24c0"+
    "\0\u24f8\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648"+
    "\0\u24f8\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u2808\0\u2840\0\u2878\0\u24f8\0\u28b0\0\u28e8\0\u24f8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u24f8\0\u2aa8"+
    "\0\u2ae0\0\u24f8\0\u24f8\0\u24f8\0\u2b18\0\u2b50\0\u2b18\0\u2b88"+
    "\0\u2bc0\0\u2bf8\0\u2b18\0\u2c30\0\u2c68\0\u2b18\0\u2b18\0\u2ca0"+
    "\0\u2cd8\0\u2b18\0\u2d10\0\u2d48\0\u2b18\0\u2d80\0\u2db8\0\u2b18"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2b18\0\u2ed0\0\u2f08\0\u2f40"+
    "\0\u2f78\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100"+
    "\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u2fb0\0\u3218\0\u3250\0\u3288"+
    "\0\u2fb0\0\u32c0\0\u2fb0\0\u32f8\0\u2fb0\0\u3330\0\u3368\0\u3368"+
    "\0\u33a0\0\u33d8\0\u3368\0\u3410\0\u3448\0\u3480\0\u34b8\0\u34f0"+
    "\0\u3528\0\u3560\0\u3598\0\u3368\0\u35d0\0\u3608\0\u3368\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3640\0\u3640\0\u3790"+
    "\0\u37c8\0\u3640\0\u3640\0\u3800\0\u3838\0\u3870\0\u3838\0\u38a8"+
    "\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u39f8"+
    "\0\u3a68\0\u3aa0\0\u3ad8\0\u39f8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8"+
    "\0\u3bf0\0\u3c28\0\u3b48\0\u3c60\0\u3c60\0\u3c98\0\u3cd0\0\u3d08"+
    "\0\u3d40\0\u3d40\0\u3d40\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0"+
    "\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0"+
    "\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360"+
    "\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u44e8\0\u4520"+
    "\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0"+
    "\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868\0\u48a0"+
    "\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28\0\u4a60"+
    "\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8\0\u4c20"+
    "\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8\0\u4de0"+
    "\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0"+
    "\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128\0\u5160"+
    "\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0\0\u52e8\0\u5320"+
    "\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0"+
    "\0\u5518\0\u5550\0\u5588\0\u55c0\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\14\1\16\1\17\1\14"+
    "\1\20\1\5\1\3\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\14\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\14\1\37\1\40\1\41\1\14\1\42"+
    "\1\14\1\43\1\14\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\2\61\1\3\5\61\1\62\11\61\1\63\45\61\71\0"+
    "\1\64\72\0\1\65\13\0\1\47\47\0\7\11\1\66"+
    "\60\11\11\0\1\13\1\67\5\0\1\70\17\0\1\67"+
    "\40\0\2\71\1\0\2\71\1\0\1\71\3\0\30\71"+
    "\26\0\2\71\1\0\2\71\1\0\1\71\3\0\3\71"+
    "\1\72\1\71\1\73\22\71\26\0\2\74\4\0\1\74"+
    "\3\0\2\74\10\0\1\74\2\0\2\74\2\0\1\74"+
    "\30\0\1\50\3\0\1\75\67\0\2\71\1\0\1\71"+
    "\1\76\1\0\1\71\3\0\4\71\1\77\2\71\1\100"+
    "\11\71\1\101\6\71\26\0\2\71\1\0\2\71\1\0"+
    "\1\71\3\0\3\71\1\102\1\71\1\103\7\71\1\104"+
    "\12\71\26\0\2\71\1\0\2\71\1\0\1\71\3\0"+
    "\3\71\1\105\24\71\26\0\2\71\1\0\1\71\1\106"+
    "\1\0\1\71\3\0\4\71\1\107\6\71\1\110\2\71"+
    "\1\111\2\71\1\112\1\113\5\71\26\0\2\71\1\0"+
    "\2\71\1\0\1\71\3\0\1\114\14\71\1\115\12\71"+
    "\26\0\2\71\1\0\1\71\1\116\1\0\1\71\3\0"+
    "\2\71\1\117\4\71\1\120\6\71\1\121\11\71\26\0"+
    "\2\71\1\0\2\71\1\0\1\71\3\0\1\122\27\71"+
    "\26\0\2\71\1\0\2\71\1\0\1\71\3\0\10\71"+
    "\1\123\3\71\1\124\1\125\12\71\26\0\2\71\1\0"+
    "\2\71\1\0\1\71\3\0\1\126\4\71\1\127\22\71"+
    "\26\0\2\71\1\0\2\71\1\0\1\71\3\0\1\130"+
    "\2\71\1\131\5\71\1\132\16\71\26\0\2\71\1\0"+
    "\2\71\1\0\1\71\3\0\1\133\3\71\1\134\23\71"+
    "\26\0\2\71\1\0\2\71\1\0\1\71\3\0\3\71"+
    "\1\135\1\136\3\71\1\137\6\71\1\140\10\71\26\0"+
    "\2\71\1\0\1\71\1\141\1\0\1\71\3\0\11\71"+
    "\1\142\6\71\1\143\7\71\26\0\2\71\1\0\2\71"+
    "\1\0\1\71\3\0\1\144\2\71\1\145\1\71\1\146"+
    "\14\71\1\147\5\71\26\0\2\71\1\0\2\71\1\0"+
    "\1\71\3\0\3\71\1\150\24\71\26\0\2\71\1\0"+
    "\2\71\1\0\1\71\3\0\15\71\1\151\12\71\26\0"+
    "\2\71\1\0\1\71\1\152\1\0\1\71\3\0\7\71"+
    "\1\153\20\71\26\0\2\71\1\0\2\71\1\0\1\71"+
    "\3\0\3\71\1\154\24\71\26\0\2\71\1\0\2\71"+
    "\1\0\1\71\3\0\5\71\1\155\2\71\1\156\17\71"+
    "\75\0\1\157\1\0\1\160\65\0\1\161\67\0\1\162"+
    "\17\0\1\61\61\0\1\3\65\0\2\64\1\0\65\64"+
    "\4\65\1\163\63\65\11\0\1\75\1\0\1\164\37\0"+
    "\1\164\25\0\1\165\67\0\2\166\1\0\2\166\1\0"+
    "\1\166\3\0\30\166\26\0\2\166\1\0\2\166\1\0"+
    "\1\166\3\0\14\166\1\167\13\166\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\11\166\1\170\16\166\26\0"+
    "\1\75\67\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\1\166\1\171\26\166\26\0\2\166\1\0\2\166\1\0"+
    "\1\166\3\0\4\166\1\172\23\166\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\2\166\1\173\25\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\7\166\1\174"+
    "\20\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\26\166\1\175\1\166\26\0\2\166\1\0\2\166\1\0"+
    "\1\166\3\0\6\166\1\176\1\177\20\166\26\0\2\166"+
    "\1\0\2\166\1\0\1\166\3\0\7\166\1\200\20\166"+
    "\26\0\2\166\1\0\2\166\1\0\1\166\3\0\1\166"+
    "\1\201\26\166\26\0\2\166\1\0\2\166\1\0\1\166"+
    "\3\0\15\166\1\202\12\166\26\0\2\166\1\0\2\166"+
    "\1\0\1\166\3\0\27\166\1\203\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\14\166\1\204\13\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\5\166\1\205"+
    "\22\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\5\166\1\206\1\166\1\207\2\166\1\210\1\211\14\166"+
    "\26\0\2\166\1\0\2\166\1\0\1\166\3\0\5\166"+
    "\1\212\2\166\1\213\1\214\2\166\1\215\13\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\13\166\1\216"+
    "\14\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\4\166\1\217\23\166\26\0\2\166\1\0\2\166\1\0"+
    "\1\166\3\0\4\166\1\220\4\166\1\221\16\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\4\166\1\222"+
    "\23\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\11\166\1\223\2\166\1\224\13\166\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\21\166\1\225\6\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\21\166\1\226"+
    "\6\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\7\166\1\227\20\166\26\0\2\166\1\0\1\166\1\230"+
    "\1\0\1\166\3\0\30\166\26\0\2\166\1\0\2\166"+
    "\1\0\1\166\3\0\1\231\27\166\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\12\166\1\232\15\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\3\166\1\233"+
    "\24\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\17\166\1\234\2\166\1\235\5\166\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\4\166\1\236\10\166\1\237"+
    "\12\166\26\0\2\166\1\0\2\166\1\0\1\166\3\0"+
    "\13\166\1\240\14\166\26\0\2\166\1\0\2\166\1\0"+
    "\1\166\3\0\1\166\1\241\26\166\26\0\2\166\1\0"+
    "\2\166\1\0\1\166\3\0\7\166\1\242\20\166\26\0"+
    "\2\166\1\0\2\166\1\0\1\166\3\0\12\166\1\243"+
    "\1\244\14\166\26\0\2\166\1\0\2\166\1\0\1\166"+
    "\3\0\11\166\1\245\16\166\26\0\2\166\1\0\2\166"+
    "\1\0\1\166\3\0\4\166\1\246\23\166\26\0\2\166"+
    "\1\0\1\166\1\247\1\0\1\166\3\0\11\166\1\250"+
    "\16\166\26\0\2\166\1\0\1\166\1\251\1\0\1\166"+
    "\3\0\30\166\26\0\2\166\1\0\2\166\1\0\1\166"+
    "\3\0\4\166\1\252\23\166\26\0\2\166\1\0\2\166"+
    "\1\0\1\166\3\0\24\166\1\253\3\166\26\0\2\166"+
    "\1\0\2\166\1\0\1\166\3\0\5\166\1\254\6\166"+
    "\1\255\13\166\26\0\2\166\1\0\2\166\1\0\1\166"+
    "\3\0\15\166\1\256\12\166\26\0\2\166\1\0\2\166"+
    "\1\0\1\166\3\0\14\166\1\257\13\166\26\0\2\166"+
    "\1\0\2\166\1\0\1\166\3\0\14\166\1\260\13\166"+
    "\26\0\2\166\1\0\2\166\1\0\1\166\3\0\5\166"+
    "\1\261\22\166\15\0\4\65\1\163\1\66\62\65\11\0"+
    "\1\165\1\67\25\0\1\67\40\0\2\262\1\0\2\262"+
    "\1\0\1\262\3\0\30\262\26\0\2\262\1\0\2\262"+
    "\1\0\1\262\3\0\1\263\27\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\3\262\1\264\24\262\26\0"+
    "\2\262\1\0\1\262\1\265\1\0\1\262\3\0\30\262"+
    "\26\0\2\262\1\0\2\262\1\0\1\262\3\0\13\262"+
    "\1\266\14\262\26\0\2\262\1\0\2\262\1\0\1\262"+
    "\3\0\14\262\1\267\13\262\26\0\2\262\1\0\2\262"+
    "\1\0\1\262\3\0\4\262\1\270\23\262\26\0\2\262"+
    "\1\0\2\262\1\0\1\262\3\0\15\262\1\271\12\262"+
    "\26\0\2\262\1\0\2\262\1\0\1\262\3\0\7\262"+
    "\1\272\20\262\26\0\2\262\1\0\1\262\1\273\1\0"+
    "\1\262\3\0\30\262\26\0\2\262\1\0\2\262\1\0"+
    "\1\262\3\0\3\262\1\274\24\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\3\262\1\275\24\262\26\0"+
    "\2\262\1\0\2\262\1\0\1\262\3\0\15\262\1\276"+
    "\12\262\26\0\2\262\1\0\2\262\1\0\1\262\3\0"+
    "\14\262\1\277\13\262\26\0\2\262\1\0\2\262\1\0"+
    "\1\262\3\0\15\262\1\300\12\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\5\262\1\301\22\262\26\0"+
    "\2\262\1\0\2\262\1\0\1\262\3\0\15\262\1\302"+
    "\12\262\26\0\2\262\1\0\2\262\1\0\1\262\3\0"+
    "\11\262\1\303\16\262\26\0\2\262\1\0\2\262\1\0"+
    "\1\262\3\0\5\262\1\304\22\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\16\262\1\305\11\262\26\0"+
    "\2\262\1\0\2\262\1\0\1\262\3\0\15\262\1\306"+
    "\12\262\26\0\2\262\1\0\2\262\1\0\1\262\3\0"+
    "\4\262\1\307\23\262\26\0\2\262\1\0\2\262\1\0"+
    "\1\262\3\0\15\262\1\310\12\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\7\262\1\311\20\262\26\0"+
    "\2\262\1\0\2\262\1\0\1\262\3\0\7\262\1\312"+
    "\20\262\26\0\2\262\1\0\2\262\1\0\1\262\3\0"+
    "\25\262\1\313\2\262\26\0\2\262\1\0\2\262\1\0"+
    "\1\262\3\0\12\262\1\314\1\315\10\262\1\316\3\262"+
    "\26\0\2\262\1\0\2\262\1\0\1\262\3\0\15\262"+
    "\1\317\12\262\26\0\2\262\1\0\2\262\1\0\1\262"+
    "\3\0\15\262\1\320\12\262\26\0\2\262\1\0\1\262"+
    "\1\321\1\0\1\262\3\0\30\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\15\262\1\322\12\262\26\0"+
    "\2\262\1\0\2\262\1\0\1\262\3\0\15\262\1\323"+
    "\12\262\26\0\2\262\1\0\2\262\1\0\1\262\3\0"+
    "\15\262\1\324\12\262\26\0\2\262\1\0\2\262\1\0"+
    "\1\262\3\0\3\262\1\325\24\262\26\0\2\262\1\0"+
    "\2\262\1\0\1\262\3\0\7\262\1\326\20\262\26\0"+
    "\2\262\1\0\2\262\1\0\1\262\3\0\1\327\27\262"+
    "\26\0\2\262\1\0\2\262\1\0\1\262\3\0\15\262"+
    "\1\330\12\262\26\0\2\262\1\0\2\262\1\0\1\262"+
    "\3\0\12\262\1\331\15\262\26\0\2\262\1\0\2\262"+
    "\1\0\1\262\3\0\5\262\1\332\22\262\26\0\2\262"+
    "\1\0\2\262\1\0\1\262\3\0\14\262\1\333\13\262"+
    "\26\0\2\262\1\0\2\262\1\0\1\262\3\0\5\262"+
    "\1\334\22\262\26\0\2\262\1\0\2\262\1\0\1\262"+
    "\3\0\7\262\1\335\20\262\26\0\2\262\1\0\2\262"+
    "\1\0\1\262\3\0\3\262\1\336\24\262\26\0\2\262"+
    "\1\0\2\262\1\0\1\262\3\0\10\262\1\337\17\262"+
    "\26\0\2\262\1\0\2\262\1\0\1\262\3\0\11\262"+
    "\1\340\16\262\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\30\341\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\17\341\1\342\10\341\26\0\2\341\1\0\2\341"+
    "\1\0\1\341\3\0\11\341\1\343\16\341\26\0\2\341"+
    "\1\0\2\341\1\0\1\341\3\0\14\341\1\344\13\341"+
    "\26\0\2\341\1\0\2\341\1\0\1\341\3\0\5\341"+
    "\1\345\22\341\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\4\341\1\346\23\341\26\0\2\341\1\0\2\341"+
    "\1\0\1\341\3\0\1\347\27\341\26\0\2\341\1\0"+
    "\2\341\1\0\1\341\3\0\12\341\1\350\15\341\26\0"+
    "\2\341\1\0\2\341\1\0\1\341\3\0\15\341\1\351"+
    "\12\341\26\0\2\341\1\0\2\341\1\0\1\341\3\0"+
    "\14\341\1\352\13\341\26\0\2\341\1\0\2\341\1\0"+
    "\1\341\3\0\22\341\1\353\5\341\26\0\2\341\1\0"+
    "\2\341\1\0\1\341\3\0\4\341\1\354\23\341\26\0"+
    "\2\341\1\0\2\341\1\0\1\341\3\0\1\355\27\341"+
    "\26\0\2\341\1\0\2\341\1\0\1\341\3\0\5\341"+
    "\1\356\22\341\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\4\341\1\357\23\341\26\0\2\341\1\0\1\341"+
    "\1\360\1\0\1\341\3\0\30\341\26\0\2\341\1\0"+
    "\2\341\1\0\1\341\3\0\4\341\1\361\23\341\26\0"+
    "\2\341\1\0\2\341\1\0\1\341\3\0\15\341\1\362"+
    "\12\341\26\0\2\341\1\0\1\341\1\363\1\0\1\341"+
    "\3\0\30\341\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\11\341\1\364\16\341\26\0\2\341\1\0\2\341"+
    "\1\0\1\341\3\0\1\365\27\341\26\0\2\341\1\0"+
    "\2\341\1\0\1\341\3\0\14\341\1\366\13\341\26\0"+
    "\2\341\1\0\2\341\1\0\1\341\3\0\7\341\1\367"+
    "\20\341\26\0\2\341\1\0\2\341\1\0\1\341\3\0"+
    "\15\341\1\370\12\341\26\0\2\341\1\0\2\341\1\0"+
    "\1\341\3\0\15\341\1\371\12\341\26\0\2\341\1\0"+
    "\2\341\1\0\1\341\3\0\15\341\1\372\12\341\26\0"+
    "\2\341\1\0\2\341\1\0\1\341\3\0\4\341\1\373"+
    "\23\341\26\0\2\341\1\0\2\341\1\0\1\341\3\0"+
    "\1\374\27\341\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\13\341\1\375\14\341\26\0\2\341\1\0\2\341"+
    "\1\0\1\341\3\0\4\341\1\376\23\341\26\0\2\341"+
    "\1\0\2\341\1\0\1\341\3\0\15\341\1\377\12\341"+
    "\26\0\2\341\1\0\2\341\1\0\1\341\3\0\11\341"+
    "\1\u0100\16\341\26\0\2\341\1\0\2\341\1\0\1\341"+
    "\3\0\14\341\1\u0101\13\341\26\0\2\341\1\0\1\341"+
    "\1\u0102\1\0\1\341\3\0\30\341\26\0\2\341\1\0"+
    "\2\341\1\0\1\341\3\0\11\341\1\u0103\16\341\26\0"+
    "\2\341\1\0\2\341\1\0\1\341\3\0\15\341\1\u0104"+
    "\12\341\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0"+
    "\30\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0"+
    "\22\u0105\1\u0106\5\u0105\26\0\2\u0105\1\0\2\u0105\1\0"+
    "\1\u0105\3\0\3\u0105\1\u0107\24\u0105\26\0\2\u0105\1\0"+
    "\1\u0105\1\u0108\1\0\1\u0105\3\0\30\u0105\26\0\2\u0105"+
    "\1\0\2\u0105\1\0\1\u0105\3\0\22\u0105\1\u0109\5\u0105"+
    "\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0\14\u0105"+
    "\1\u010a\13\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105"+
    "\3\0\14\u0105\1\u010b\13\u0105\26\0\2\u0105\1\0\2\u0105"+
    "\1\0\1\u0105\3\0\4\u0105\1\u010c\23\u0105\26\0\2\u0105"+
    "\1\0\2\u0105\1\0\1\u0105\3\0\4\u0105\1\u010d\23\u0105"+
    "\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0\1\u0105"+
    "\1\u010e\26\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105"+
    "\3\0\14\u0105\1\u010f\13\u0105\26\0\2\u0105\1\0\2\u0105"+
    "\1\0\1\u0105\3\0\1\u0110\27\u0105\26\0\2\u0105\1\0"+
    "\2\u0105\1\0\1\u0105\3\0\5\u0105\1\u0111\22\u0105\26\0"+
    "\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0\15\u0105\1\u0112"+
    "\12\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0"+
    "\16\u0105\1\u0113\11\u0105\26\0\2\u0105\1\0\2\u0105\1\0"+
    "\1\u0105\3\0\2\u0105\1\u0114\25\u0105\26\0\2\u0105\1\0"+
    "\2\u0105\1\0\1\u0105\3\0\24\u0105\1\u0115\3\u0105\26\0"+
    "\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0\4\u0105\1\u0116"+
    "\23\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0"+
    "\4\u0105\1\u0117\23\u0105\26\0\2\u0105\1\0\2\u0105\1\0"+
    "\1\u0105\3\0\1\u0105\1\u0118\26\u0105\26\0\2\u0105\1\0"+
    "\2\u0105\1\0\1\u0105\3\0\1\u0105\1\u0119\26\u0105\26\0"+
    "\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0\4\u0105\1\u011a"+
    "\23\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0"+
    "\1\u011b\27\u0105\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105"+
    "\3\0\1\u0105\1\u011c\26\u0105\26\0\2\u0105\1\0\2\u0105"+
    "\1\0\1\u0105\3\0\14\u0105\1\u011d\13\u0105\26\0\2\u0105"+
    "\1\0\2\u0105\1\0\1\u0105\3\0\14\u0105\1\u011e\13\u0105"+
    "\26\0\2\u0105\1\0\2\u0105\1\0\1\u0105\3\0\5\u0105"+
    "\1\u011f\3\u0105\1\u0120\16\u0105\26\0\2\u0105\1\0\2\u0105"+
    "\1\0\1\u0105\3\0\5\u0105\1\u0121\22\u0105\26\0\2\u0122"+
    "\1\0\2\u0122\1\0\1\u0122\3\0\30\u0122\26\0\2\u0122"+
    "\1\0\2\u0122\1\0\1\u0122\3\0\14\u0122\1\u0123\13\u0122"+
    "\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0\14\u0122"+
    "\1\u0124\13\u0122\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122"+
    "\3\0\12\u0122\1\u0125\15\u0122\26\0\2\u0122\1\0\2\u0122"+
    "\1\0\1\u0122\3\0\3\u0122\1\u0126\24\u0122\26\0\2\u0122"+
    "\1\0\2\u0122\1\0\1\u0122\3\0\3\u0122\1\u0127\24\u0122"+
    "\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0\12\u0122"+
    "\1\u0128\15\u0122\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122"+
    "\3\0\11\u0122\1\u0129\16\u0122\26\0\2\u0122\1\0\2\u0122"+
    "\1\0\1\u0122\3\0\14\u0122\1\u012a\13\u0122\26\0\2\u0122"+
    "\1\0\2\u0122\1\0\1\u0122\3\0\1\u012b\27\u0122\26\0"+
    "\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0\15\u0122\1\u012c"+
    "\12\u0122\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0"+
    "\17\u0122\1\u012d\10\u0122\26\0\2\u0122\1\0\2\u0122\1\0"+
    "\1\u0122\3\0\22\u0122\1\u012e\5\u0122\26\0\2\u0122\1\0"+
    "\2\u0122\1\0\1\u0122\3\0\22\u0122\1\u012f\5\u0122\26\0"+
    "\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0\14\u0122\1\u0130"+
    "\13\u0122\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0"+
    "\2\u0122\1\u0131\25\u0122\26\0\2\u0122\1\0\2\u0122\1\0"+
    "\1\u0122\3\0\6\u0122\1\u0132\21\u0122\26\0\2\u0122\1\0"+
    "\2\u0122\1\0\1\u0122\3\0\7\u0122\1\u0133\20\u0122\26\0"+
    "\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0\23\u0122\1\u0134"+
    "\4\u0122\26\0\2\u0122\1\0\2\u0122\1\0\1\u0122\3\0"+
    "\17\u0122\1\u0135\10\u0122\26\0\2\u0122\1\0\2\u0122\1\0"+
    "\1\u0122\3\0\3\u0122\1\u0136\24\u0122\26\0\2\u0137\1\0"+
    "\2\u0137\1\0\1\u0137\3\0\30\u0137\26\0\2\u0137\1\0"+
    "\2\u0137\1\0\1\u0137\3\0\15\u0137\1\u0138\12\u0137\26\0"+
    "\2\u0137\1\0\2\u0137\1\0\1\u0137\3\0\15\u0137\1\u0139"+
    "\12\u0137\26\0\2\u0137\1\0\2\u0137\1\0\1\u0137\3\0"+
    "\14\u0137\1\u013a\13\u0137\26\0\2\u0137\1\0\2\u0137\1\0"+
    "\1\u0137\3\0\4\u0137\1\u013b\23\u0137\26\0\2\u0137\1\0"+
    "\2\u0137\1\0\1\u0137\3\0\1\u0137\1\u013c\26\u0137\26\0"+
    "\2\u0137\1\0\2\u0137\1\0\1\u0137\3\0\15\u0137\1\u013d"+
    "\12\u0137\26\0\2\u0137\1\0\2\u0137\1\0\1\u0137\3\0"+
    "\5\u0137\1\u013e\22\u0137\26\0\2\u0137\1\0\2\u0137\1\0"+
    "\1\u0137\3\0\15\u0137\1\u013f\12\u0137\26\0\2\u0137\1\0"+
    "\2\u0137\1\0\1\u0137\3\0\12\u0137\1\u0140\15\u0137\26\0"+
    "\2\u0137\1\0\1\u0137\1\u0141\1\0\1\u0137\3\0\30\u0137"+
    "\26\0\2\u0137\1\0\2\u0137\1\0\1\u0137\3\0\12\u0137"+
    "\1\u0142\15\u0137\26\0\2\u0137\1\0\2\u0137\1\0\1\u0137"+
    "\3\0\4\u0137\1\u0143\23\u0137\26\0\2\u0137\1\0\2\u0137"+
    "\1\0\1\u0137\3\0\17\u0137\1\u0144\10\u0137\26\0\2\u0137"+
    "\1\0\2\u0137\1\0\1\u0137\3\0\1\u0145\27\u0137\26\0"+
    "\2\u0137\1\0\2\u0137\1\0\1\u0137\3\0\1\u0146\27\u0137"+
    "\26\0\2\u0137\1\0\1\u0137\1\u0147\1\0\1\u0137\3\0"+
    "\30\u0137\26\0\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0"+
    "\30\u0148\26\0\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0"+
    "\4\u0148\1\u0149\23\u0148\26\0\2\u0148\1\0\2\u0148\1\0"+
    "\1\u0148\3\0\3\u0148\1\u014a\24\u0148\26\0\2\u0148\1\0"+
    "\2\u0148\1\0\1\u0148\3\0\22\u0148\1\u014b\5\u0148\26\0"+
    "\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0\7\u0148\1\u014c"+
    "\20\u0148\26\0\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0"+
    "\23\u0148\1\u014d\4\u0148\26\0\2\u0148\1\0\2\u0148\1\0"+
    "\1\u0148\3\0\1\u0148\1\u014e\26\u0148\26\0\2\u0148\1\0"+
    "\2\u0148\1\0\1\u0148\3\0\15\u0148\1\u014f\12\u0148\26\0"+
    "\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0\14\u0148\1\u0150"+
    "\13\u0148\26\0\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0"+
    "\14\u0148\1\u0151\13\u0148\26\0\2\u0148\1\0\2\u0148\1\0"+
    "\1\u0148\3\0\15\u0148\1\u0152\12\u0148\26\0\2\u0148\1\0"+
    "\2\u0148\1\0\1\u0148\3\0\4\u0148\1\u0153\23\u0148\26\0"+
    "\2\u0148\1\0\2\u0148\1\0\1\u0148\3\0\14\u0148\1\u0154"+
    "\13\u0148\26\0\2\u0155\1\0\2\u0155\1\0\1\u0155\3\0"+
    "\30\u0155\26\0\2\u0155\1\0\2\u0155\1\0\1\u0155\3\0"+
    "\16\u0155\1\u0156\11\u0155\26\0\2\u0155\1\0\2\u0155\1\0"+
    "\1\u0155\3\0\4\u0155\1\u0157\23\u0155\26\0\2\u0155\1\0"+
    "\2\u0155\1\0\1\u0155\3\0\12\u0155\1\u0158\15\u0155\26\0"+
    "\2\u0155\1\0\2\u0155\1\0\1\u0155\3\0\14\u0155\1\u0159"+
    "\13\u0155\26\0\2\u0155\1\0\2\u0155\1\0\1\u0155\3\0"+
    "\1\u015a\27\u0155\26\0\2\u0155\1\0\2\u0155\1\0\1\u0155"+
    "\3\0\1\u015b\27\u0155\26\0\2\u0155\1\0\2\u0155\1\0"+
    "\1\u0155\3\0\3\u0155\1\u015c\24\u0155\26\0\2\u0155\1\0"+
    "\2\u0155\1\0\1\u0155\3\0\5\u0155\1\u015d\22\u0155\26\0"+
    "\2\u015e\1\0\2\u015e\1\0\1\u015e\3\0\30\u015e\26\0"+
    "\2\u015e\1\0\2\u015e\1\0\1\u015e\3\0\1\u015f\27\u015e"+
    "\26\0\2\u015e\1\0\2\u015e\1\0\1\u015e\3\0\15\u015e"+
    "\1\u0160\12\u015e\26\0\2\u015e\1\0\2\u015e\1\0\1\u015e"+
    "\3\0\4\u015e\1\u0161\23\u015e\26\0\2\u015e\1\0\2\u015e"+
    "\1\0\1\u015e\3\0\14\u015e\1\u0162\13\u015e\26\0\2\u015e"+
    "\1\0\2\u015e\1\0\1\u015e\3\0\14\u015e\1\u0163\13\u015e"+
    "\26\0\2\u015e\1\0\2\u015e\1\0\1\u015e\3\0\4\u015e"+
    "\1\u0164\23\u015e\26\0\2\u015e\1\0\2\u015e\1\0\1\u015e"+
    "\3\0\3\u015e\1\u0165\24\u015e\26\0\2\u0166\1\0\2\u0166"+
    "\1\0\1\u0166\3\0\30\u0166\26\0\2\u0166\1\0\2\u0166"+
    "\1\0\1\u0166\3\0\12\u0166\1\u0167\15\u0166\26\0\2\u0166"+
    "\1\0\2\u0166\1\0\1\u0166\3\0\5\u0166\1\u0168\22\u0166"+
    "\26\0\2\u0166\1\0\2\u0166\1\0\1\u0166\3\0\5\u0166"+
    "\1\u0169\22\u0166\26\0\2\u0166\1\0\2\u0166\1\0\1\u0166"+
    "\3\0\5\u0166\1\u016a\22\u0166\26\0\2\u0166\1\0\1\u0166"+
    "\1\u016b\1\0\1\u0166\3\0\30\u0166\26\0\2\u016c\1\0"+
    "\2\u016c\1\0\1\u016c\3\0\30\u016c\26\0\2\u016c\1\0"+
    "\2\u016c\1\0\1\u016c\3\0\15\u016c\1\u016d\12\u016c\26\0"+
    "\2\u016c\1\0\1\u016c\1\u016e\1\0\1\u016c\3\0\30\u016c"+
    "\26\0\2\u016c\1\0\2\u016c\1\0\1\u016c\3\0\3\u016c"+
    "\1\u016f\24\u016c\26\0\2\u016c\1\0\2\u016c\1\0\1\u016c"+
    "\3\0\3\u016c\1\u0170\24\u016c\26\0\2\u0171\1\0\2\u0171"+
    "\1\0\1\u0171\3\0\30\u0171\26\0\2\u0171\1\0\2\u0171"+
    "\1\0\1\u0171\3\0\24\u0171\1\u0172\3\u0171\26\0\2\u0171"+
    "\1\0\1\u0171\1\u0173\1\0\1\u0171\3\0\30\u0171\26\0"+
    "\2\u0171\1\0\1\u0171\1\u0174\1\0\1\u0171\3\0\30\u0171"+
    "\26\0\2\u0175\1\0\2\u0175\1\0\1\u0175\3\0\30\u0175"+
    "\26\0\2\u0176\1\0\2\u0176\1\0\1\u0176\3\0\30\u0176"+
    "\26\0\2\u0177\1\0\2\u0177\1\0\1\u0177\3\0\30\u0177"+
    "\26\0\2\u0178\1\0\2\u0178\1\0\1\u0178\3\0\30\u0178"+
    "\26\0\2\u0179\1\0\2\u0179\1\0\1\u0179\3\0\30\u0179"+
    "\26\0\2\u017a\1\0\2\u017a\1\0\1\u017a\3\0\30\u017a"+
    "\26\0\2\u017b\1\0\2\u017b\1\0\1\u017b\3\0\30\u017b"+
    "\26\0\2\u017c\1\0\2\u017c\1\0\1\u017c\3\0\30\u017c"+
    "\26\0\2\u017d\1\0\2\u017d\1\0\1\u017d\3\0\30\u017d"+
    "\26\0\2\u017e\1\0\2\u017e\1\0\1\u017e\3\0\30\u017e"+
    "\26\0\2\u017f\1\0\2\u017f\1\0\1\u017f\3\0\30\u017f"+
    "\26\0\2\u0180\1\0\2\u0180\1\0\1\u0180\3\0\30\u0180"+
    "\26\0\2\u0181\1\0\2\u0181\1\0\1\u0181\3\0\30\u0181"+
    "\26\0\2\u0182\1\0\2\u0182\1\0\1\u0182\3\0\30\u0182"+
    "\26\0\2\u0183\1\0\2\u0183\1\0\1\u0183\3\0\30\u0183"+
    "\26\0\2\u0184\1\0\2\u0184\1\0\1\u0184\3\0\30\u0184"+
    "\26\0\2\u0185\1\0\2\u0185\1\0\1\u0185\3\0\30\u0185"+
    "\26\0\2\u0186\1\0\2\u0186\1\0\1\u0186\3\0\30\u0186"+
    "\26\0\2\u0187\1\0\2\u0187\1\0\1\u0187\3\0\30\u0187"+
    "\26\0\2\u0188\1\0\2\u0188\1\0\1\u0188\3\0\30\u0188"+
    "\26\0\2\u0189\1\0\2\u0189\1\0\1\u0189\3\0\30\u0189"+
    "\26\0\2\u018a\1\0\2\u018a\1\0\1\u018a\3\0\30\u018a"+
    "\26\0\2\u018b\1\0\2\u018b\1\0\1\u018b\3\0\30\u018b"+
    "\26\0\2\u018c\1\0\2\u018c\1\0\1\u018c\3\0\30\u018c"+
    "\26\0\2\u018d\1\0\2\u018d\1\0\1\u018d\3\0\30\u018d"+
    "\26\0\2\u018e\1\0\2\u018e\1\0\1\u018e\3\0\30\u018e"+
    "\26\0\2\u018f\1\0\2\u018f\1\0\1\u018f\3\0\30\u018f"+
    "\26\0\2\u0190\1\0\2\u0190\1\0\1\u0190\3\0\30\u0190"+
    "\26\0\2\u0191\1\0\2\u0191\1\0\1\u0191\3\0\30\u0191"+
    "\26\0\2\u0192\1\0\2\u0192\1\0\1\u0192\3\0\30\u0192"+
    "\26\0\2\u0193\1\0\2\u0193\1\0\1\u0193\3\0\30\u0193"+
    "\26\0\2\u0194\1\0\2\u0194\1\0\1\u0194\3\0\30\u0194"+
    "\26\0\2\u0195\1\0\2\u0195\1\0\1\u0195\3\0\30\u0195"+
    "\26\0\2\u0196\1\0\2\u0196\1\0\1\u0196\3\0\30\u0196"+
    "\26\0\2\u0197\1\0\2\u0197\1\0\1\u0197\3\0\30\u0197"+
    "\26\0\2\u0198\1\0\2\u0198\1\0\1\u0198\3\0\30\u0198"+
    "\26\0\2\u0199\1\0\2\u0199\1\0\1\u0199\3\0\30\u0199"+
    "\26\0\2\u019a\1\0\2\u019a\1\0\1\u019a\3\0\30\u019a"+
    "\26\0\2\u019b\1\0\2\u019b\1\0\1\u019b\3\0\30\u019b"+
    "\26\0\2\u019c\1\0\2\u019c\1\0\1\u019c\3\0\30\u019c"+
    "\26\0\2\u019d\1\0\2\u019d\1\0\1\u019d\3\0\30\u019d"+
    "\26\0\2\u019e\1\0\2\u019e\1\0\1\u019e\3\0\30\u019e"+
    "\26\0\2\u019f\1\0\2\u019f\1\0\1\u019f\3\0\30\u019f"+
    "\26\0\2\u01a0\1\0\2\u01a0\1\0\1\u01a0\3\0\30\u01a0"+
    "\26\0\2\u01a1\1\0\2\u01a1\1\0\1\u01a1\3\0\30\u01a1"+
    "\26\0\2\u01a2\1\0\2\u01a2\1\0\1\u01a2\3\0\30\u01a2"+
    "\26\0\2\u01a3\1\0\2\u01a3\1\0\1\u01a3\3\0\30\u01a3"+
    "\26\0\2\u01a4\1\0\2\u01a4\1\0\1\u01a4\3\0\30\u01a4"+
    "\26\0\2\u01a5\1\0\2\u01a5\1\0\1\u01a5\3\0\30\u01a5"+
    "\26\0\2\u01a6\1\0\2\u01a6\1\0\1\u01a6\3\0\30\u01a6"+
    "\26\0\2\u01a7\1\0\2\u01a7\1\0\1\u01a7\3\0\30\u01a7"+
    "\26\0\2\u01a8\1\0\2\u01a8\1\0\1\u01a8\3\0\30\u01a8"+
    "\26\0\2\u01a9\1\0\2\u01a9\1\0\1\u01a9\3\0\30\u01a9"+
    "\26\0\2\u01aa\1\0\2\u01aa\1\0\1\u01aa\3\0\30\u01aa"+
    "\26\0\2\u01ab\1\0\2\u01ab\1\0\1\u01ab\3\0\30\u01ab"+
    "\26\0\2\u01ac\1\0\2\u01ac\1\0\1\u01ac\3\0\30\u01ac"+
    "\26\0\2\u01ad\1\0\2\u01ad\1\0\1\u01ad\3\0\30\u01ad"+
    "\26\0\2\u01ae\1\0\2\u01ae\1\0\1\u01ae\3\0\30\u01ae"+
    "\26\0\2\u01af\1\0\2\u01af\1\0\1\u01af\3\0\30\u01af"+
    "\26\0\2\u01b0\1\0\2\u01b0\1\0\1\u01b0\3\0\30\u01b0"+
    "\26\0\2\u01b1\1\0\2\u01b1\1\0\1\u01b1\3\0\30\u01b1"+
    "\26\0\2\u01b2\1\0\2\u01b2\1\0\1\u01b2\3\0\30\u01b2"+
    "\26\0\2\u01b3\1\0\2\u01b3\1\0\1\u01b3\3\0\30\u01b3"+
    "\26\0\2\u01b4\1\0\2\u01b4\1\0\1\u01b4\3\0\30\u01b4"+
    "\26\0\2\u01b5\1\0\2\u01b5\1\0\1\u01b5\3\0\30\u01b5"+
    "\26\0\2\u01b6\1\0\2\u01b6\1\0\1\u01b6\3\0\30\u01b6"+
    "\26\0\2\u01b7\1\0\2\u01b7\1\0\1\u01b7\3\0\30\u01b7"+
    "\26\0\2\u01b8\1\0\2\u01b8\1\0\1\u01b8\3\0\30\u01b8"+
    "\26\0\2\u01b9\1\0\2\u01b9\1\0\1\u01b9\3\0\30\u01b9"+
    "\26\0\2\u01ba\1\0\2\u01ba\1\0\1\u01ba\3\0\30\u01ba"+
    "\26\0\2\u01bb\1\0\2\u01bb\1\0\1\u01bb\3\0\30\u01bb"+
    "\26\0\2\u01bc\1\0\2\u01bc\1\0\1\u01bc\3\0\30\u01bc"+
    "\26\0\2\u01bd\1\0\2\u01bd\1\0\1\u01bd\3\0\30\u01bd"+
    "\26\0\2\u01be\1\0\2\u01be\1\0\1\u01be\3\0\30\u01be"+
    "\26\0\2\u01bf\1\0\2\u01bf\1\0\1\u01bf\3\0\30\u01bf"+
    "\26\0\2\u01c0\1\0\2\u01c0\1\0\1\u01c0\3\0\30\u01c0"+
    "\26\0\2\u01c1\1\0\2\u01c1\1\0\1\u01c1\3\0\30\u01c1"+
    "\26\0\2\u01c2\1\0\2\u01c2\1\0\1\u01c2\3\0\30\u01c2"+
    "\26\0\2\u01c3\1\0\2\u01c3\1\0\1\u01c3\3\0\30\u01c3"+
    "\26\0\2\u01c4\1\0\2\u01c4\1\0\1\u01c4\3\0\30\u01c4"+
    "\26\0\2\u01c5\1\0\2\u01c5\1\0\1\u01c5\3\0\30\u01c5"+
    "\26\0\2\u01c6\1\0\2\u01c6\1\0\1\u01c6\3\0\30\u01c6"+
    "\26\0\2\u01c7\1\0\2\u01c7\1\0\1\u01c7\3\0\30\u01c7"+
    "\26\0\2\u01c8\1\0\2\u01c8\1\0\1\u01c8\3\0\30\u01c8"+
    "\26\0\2\u01c9\1\0\2\u01c9\1\0\1\u01c9\3\0\30\u01c9"+
    "\26\0\2\u01ca\1\0\2\u01ca\1\0\1\u01ca\3\0\30\u01ca"+
    "\26\0\2\u01cb\1\0\2\u01cb\1\0\1\u01cb\3\0\30\u01cb"+
    "\26\0\2\u01cc\1\0\2\u01cc\1\0\1\u01cc\3\0\30\u01cc"+
    "\26\0\2\u01cd\1\0\2\u01cd\1\0\1\u01cd\3\0\30\u01cd"+
    "\26\0\2\u01ce\1\0\2\u01ce\1\0\1\u01ce\3\0\30\u01ce"+
    "\26\0\2\u01cf\1\0\2\u01cf\1\0\1\u01cf\3\0\30\u01cf"+
    "\26\0\2\u01d0\1\0\2\u01d0\1\0\1\u01d0\3\0\30\u01d0"+
    "\26\0\2\u01d1\1\0\2\u01d1\1\0\1\u01d1\3\0\30\u01d1"+
    "\26\0\2\u01d2\1\0\2\u01d2\1\0\1\u01d2\3\0\30\u01d2"+
    "\26\0\2\u01d3\1\0\2\u01d3\1\0\1\u01d3\3\0\30\u01d3"+
    "\26\0\2\u01d4\1\0\2\u01d4\1\0\1\u01d4\3\0\30\u01d4"+
    "\26\0\2\u01d5\1\0\2\u01d5\1\0\1\u01d5\3\0\30\u01d5"+
    "\26\0\2\u01d6\1\0\2\u01d6\1\0\1\u01d6\3\0\30\u01d6"+
    "\26\0\2\u01d7\1\0\2\u01d7\1\0\1\u01d7\3\0\30\u01d7"+
    "\26\0\2\u01d8\1\0\2\u01d8\1\0\1\u01d8\3\0\30\u01d8"+
    "\26\0\2\u01d9\1\0\2\u01d9\1\0\1\u01d9\3\0\30\u01d9"+
    "\26\0\2\u01da\1\0\2\u01da\1\0\1\u01da\3\0\30\u01da"+
    "\26\0\2\u01db\1\0\2\u01db\1\0\1\u01db\3\0\30\u01db"+
    "\26\0\2\u01dc\1\0\2\u01dc\1\0\1\u01dc\3\0\30\u01dc"+
    "\26\0\2\u01dd\1\0\2\u01dd\1\0\1\u01dd\3\0\30\u01dd"+
    "\26\0\2\u01de\1\0\2\u01de\1\0\1\u01de\3\0\30\u01de"+
    "\26\0\2\u01df\1\0\2\u01df\1\0\1\u01df\3\0\30\u01df"+
    "\26\0\2\u01e0\1\0\2\u01e0\1\0\1\u01e0\3\0\30\u01e0"+
    "\26\0\2\u01e1\1\0\2\u01e1\1\0\1\u01e1\3\0\30\u01e1"+
    "\26\0\2\u01e2\1\0\2\u01e2\1\0\1\u01e2\3\0\30\u01e2"+
    "\26\0\2\u01e3\1\0\2\u01e3\1\0\1\u01e3\3\0\30\u01e3"+
    "\26\0\2\u01e4\1\0\2\u01e4\1\0\1\u01e4\3\0\30\u01e4"+
    "\26\0\2\u01e5\1\0\2\u01e5\1\0\1\u01e5\3\0\30\u01e5"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\2\11\1\1\1\11"+
    "\2\1\1\11\26\1\6\11\3\1\5\11\4\1\1\11"+
    "\1\0\67\1\4\11\1\1\1\0\u0170\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[485];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    ExtendedSyntaxStrCommentHandler longCommentOrStringHandler = new ExtendedSyntaxStrCommentHandler();


  _PascalLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PascalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return TO;
          }
        case 104: break;
        case 10: 
          { return NAME;
          }
        case 105: break;
        case 53: 
          { return TRY;
          }
        case 106: break;
        case 100: 
          { return DISPINTERFACE;
          }
        case 107: break;
        case 4: 
          { return LPAREN;
          }
        case 108: break;
        case 40: 
          { return GE;
          }
        case 109: break;
        case 57: 
          { return SELF;
          }
        case 110: break;
        case 98: 
          { return CONSTRUCTOR;
          }
        case 111: break;
        case 44: 
          { return AND;
          }
        case 112: break;
        case 68: 
          { return ARRAY;
          }
        case 113: break;
        case 76: 
          { return WHILE;
          }
        case 114: break;
        case 103: 
          { return IMPLEMENTATION;
          }
        case 115: break;
        case 102: 
          { return INITIALIZATION;
          }
        case 116: break;
        case 97: 
          { return REINTRODUCE;
          }
        case 117: break;
        case 95: 
          { return THREADVAR;
          }
        case 118: break;
        case 71: 
          { return CONST;
          }
        case 119: break;
        case 59: 
          { return TRUE;
          }
        case 120: break;
        case 81: 
          { return INLINE;
          }
        case 121: break;
        case 9: 
          { return NUMBER;
          }
        case 122: break;
        case 25: 
          { return CHARNUM;
          }
        case 123: break;
        case 22: 
          { return COLON;
          }
        case 124: break;
        case 65: 
          { return USES;
          }
        case 125: break;
        case 19: 
          { return EQ;
          }
        case 126: break;
        case 80: 
          { return REPEAT;
          }
        case 127: break;
        case 54: 
          { return END;
          }
        case 128: break;
        case 12: 
          { return HEXNUM;
          }
        case 129: break;
        case 26: 
          { return KEYWORDESCAPE;
          }
        case 130: break;
        case 3: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 131: break;
        case 84: 
          { return LIBRARY;
          }
        case 132: break;
        case 92: 
          { return INHERITED;
          }
        case 133: break;
        case 8: 
          { yybegin(XSTRING); return STRING;
          }
        case 134: break;
        case 52: 
          { return SET;
          }
        case 135: break;
        case 43: 
          { return NIL;
          }
        case 136: break;
        case 86: 
          { return EXPORTS;
          }
        case 137: break;
        case 16: 
          { return COMMA;
          }
        case 138: break;
        case 5: 
          { return MULT;
          }
        case 139: break;
        case 31: 
          { return ON;
          }
        case 140: break;
        case 47: 
          { return MOD;
          }
        case 141: break;
        case 56: 
          { return XOR;
          }
        case 142: break;
        case 2: 
          { return DIV;
          }
        case 143: break;
        case 69: 
          { return RAISE;
          }
        case 144: break;
        case 78: 
          { return OBJECT;
          }
        case 145: break;
        case 77: 
          { return DOWNTO;
          }
        case 146: break;
        case 83: 
          { return EXCEPT;
          }
        case 147: break;
        case 46: 
          { return IDIV;
          }
        case 148: break;
        case 14: 
          { return PLUS;
          }
        case 149: break;
        case 51: 
          { return SHL;
          }
        case 150: break;
        case 61: 
          { return TYPE;
          }
        case 151: break;
        case 45: 
          { return ASM;
          }
        case 152: break;
        case 50: 
          { return SHR;
          }
        case 153: break;
        case 28: 
          { yybegin(YYINITIAL); return STRING;
          }
        case 154: break;
        case 20: 
          { return LT;
          }
        case 155: break;
        case 72: 
          { return CLASS;
          }
        case 156: break;
        case 85: 
          { return PROGRAM;
          }
        case 157: break;
        case 13: 
          { return DOT;
          }
        case 158: break;
        case 30: 
          { return DO;
          }
        case 159: break;
        case 34: 
          { return IN;
          }
        case 160: break;
        case 15: 
          { return SEMI;
          }
        case 161: break;
        case 7: 
          { return COMMENT;
          }
        case 162: break;
        case 70: 
          { return LABEL;
          }
        case 163: break;
        case 73: 
          { return FALSE;
          }
        case 164: break;
        case 101: 
          { return RESOURCESTRING;
          }
        case 165: break;
        case 21: 
          { return GT;
          }
        case 166: break;
        case 18: 
          { return RBRACK;
          }
        case 167: break;
        case 48: 
          { return OUT;
          }
        case 168: break;
        case 96: 
          { return DESTRUCTOR;
          }
        case 169: break;
        case 33: 
          { return OF;
          }
        case 170: break;
        case 88: 
          { return ABSOLUTE;
          }
        case 171: break;
        case 32: 
          { return OR;
          }
        case 172: break;
        case 35: 
          { return IS;
          }
        case 173: break;
        case 41: 
          { return ASSIGN;
          }
        case 174: break;
        case 24: 
          { return ADDR;
          }
        case 175: break;
        case 64: 
          { return UNIT;
          }
        case 176: break;
        case 17: 
          { return LBRACK;
          }
        case 177: break;
        case 49: 
          { return VAR;
          }
        case 178: break;
        case 94: 
          { return PROCEDURE;
          }
        case 179: break;
        case 93: 
          { return INTERFACE;
          }
        case 180: break;
        case 91: 
          { return FUNCTION;
          }
        case 181: break;
        case 63: 
          { return FILE;
          }
        case 182: break;
        case 99: 
          { return FINALIZATION;
          }
        case 183: break;
        case 42: 
          { return NOT;
          }
        case 184: break;
        case 89: 
          { return OPERATOR;
          }
        case 185: break;
        case 62: 
          { return ELSE;
          }
        case 186: break;
        case 27: 
          { return STRING;
          }
        case 187: break;
        case 36: 
          { return IF;
          }
        case 188: break;
        case 39: 
          { return NE;
          }
        case 189: break;
        case 67: 
          { return WITH;
          }
        case 190: break;
        case 87: 
          { return FINALLY;
          }
        case 191: break;
        case 60: 
          { return THEN;
          }
        case 192: break;
        case 66: 
          { return GOTO;
          }
        case 193: break;
        case 75: 
          { return UNTIL;
          }
        case 194: break;
        case 11: 
          { return MINUS;
          }
        case 195: break;
        case 38: 
          { return LE;
          }
        case 196: break;
        case 55: 
          { return FOR;
          }
        case 197: break;
        case 58: 
          { return CASE;
          }
        case 198: break;
        case 6: 
          { return RPAREN;
          }
        case 199: break;
        case 74: 
          { return BEGIN;
          }
        case 200: break;
        case 79: 
          { return RECORD;
          }
        case 201: break;
        case 23: 
          { return DEREF;
          }
        case 202: break;
        case 1: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 203: break;
        case 29: 
          { return AS;
          }
        case 204: break;
        case 90: 
          { return PROPERTY;
          }
        case 205: break;
        case 82: 
          { return PACKED;
          }
        case 206: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
