/* The following code was generated by JFlex 1.4.1 on 12/8/12 12:27 AM */

package com.siberika.idea.pascal.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/8/12 12:27 AM from the specification file
 * <tt>pascal.flex</tt>
 */
class _PascalLexer implements FlexLexer, PascalTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\12\25\0\1\15\3\0\1\6\2\0\1\11\1\47"+
    "\1\50\1\42\1\43\1\46\1\3\1\10\1\44\12\1\1\56\1\45"+
    "\1\54\1\53\1\55\2\0\4\7\1\2\1\7\24\4\1\51\1\0"+
    "\1\52\1\57\1\4\1\0\1\16\1\22\1\26\1\17\1\23\1\33"+
    "\1\24\1\37\1\25\2\4\1\32\1\35\1\5\1\27\1\36\1\4"+
    "\1\20\1\30\1\31\1\34\1\40\1\41\1\4\1\21\1\4\1\13"+
    "\1\0\1\14\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\1\20\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\3\2\2\0\1\25\2\3\1\26\4\3"+
    "\1\27\1\3\1\30\1\31\14\3\1\32\1\33\1\34"+
    "\1\35\1\0\1\2\1\36\1\37\3\3\1\40\7\3"+
    "\1\41\3\3\1\42\1\3\1\43\4\3\1\44\1\3"+
    "\1\45\1\46\1\47\3\3\1\50\4\3\1\51\1\3"+
    "\1\52\1\53\1\3\1\54\1\3\1\55\2\3\1\56"+
    "\1\57\4\3\1\60\1\3\1\61\1\3\1\62\1\3"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\60\0\300\0\360\0\u0120"+
    "\0\60\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\60\0\60\0\60\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\u0480\0\u04b0\0\u04e0\0\60"+
    "\0\u0510\0\u0540\0\300\0\360\0\u0570\0\u0150\0\60\0\u05a0"+
    "\0\u05d0\0\220\0\u0600\0\u0630\0\u0660\0\u0690\0\220\0\u06c0"+
    "\0\220\0\220\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\60\0\60"+
    "\0\60\0\60\0\360\0\u0930\0\60\0\220\0\u0960\0\u0990"+
    "\0\u09c0\0\220\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\220\0\u0b40\0\u0b70\0\u0ba0\0\220\0\u0bd0\0\220"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\220\0\u0cc0\0\220\0\220"+
    "\0\220\0\u0cf0\0\u0d20\0\u0d50\0\220\0\u0d80\0\u0db0\0\u0de0"+
    "\0\u0e10\0\220\0\u0e40\0\220\0\220\0\u0e70\0\220\0\u0ea0"+
    "\0\220\0\u0ed0\0\u0f00\0\220\0\220\0\u0f30\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\220\0\u0ff0\0\220\0\u1020\0\220\0\u1050\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\4\1\6\1\4\1\7"+
    "\1\10\1\11\1\12\1\2\1\11\1\13\1\14\1\15"+
    "\1\4\1\16\1\17\1\4\1\20\1\21\1\22\1\4"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\4\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\61\0"+
    "\1\3\1\51\5\0\1\52\12\0\1\51\35\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\24\4\17\0\2\53"+
    "\4\0\1\53\6\0\2\53\2\0\2\53\2\0\1\53"+
    "\4\0\1\53\25\0\1\54\56\0\12\55\1\0\45\55"+
    "\14\56\1\57\43\56\1\0\2\4\1\0\1\4\1\60"+
    "\1\0\1\4\6\0\2\4\1\61\21\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\11\4\1\62\12\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\5\4"+
    "\1\63\16\4\17\0\2\4\1\0\2\4\1\0\1\4"+
    "\6\0\5\4\1\64\16\4\17\0\2\4\1\0\1\4"+
    "\1\65\1\0\1\4\6\0\14\4\1\66\7\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\15\4\1\67"+
    "\6\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\11\4\1\70\12\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\2\4\1\71\12\4\1\72\6\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\2\4\1\73"+
    "\1\74\15\4\1\75\2\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\7\4\1\76\14\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\1\77\10\4\1\100"+
    "\4\4\1\101\5\4\17\0\2\4\1\0\1\4\1\102"+
    "\1\0\1\4\6\0\24\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\11\4\1\103\12\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\2\4\1\104\21\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\1\105"+
    "\23\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\21\4\1\106\2\4\71\0\1\107\1\0\1\110\55\0"+
    "\1\111\57\0\1\112\5\0\1\54\1\0\1\113\37\0"+
    "\1\113\15\0\1\114\67\0\1\115\47\0\2\4\1\0"+
    "\2\4\1\0\1\4\6\0\1\4\1\116\22\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\2\4\1\117"+
    "\21\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\10\4\1\120\13\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\6\4\1\121\15\4\17\0\2\4\1\0"+
    "\2\4\1\0\1\4\6\0\1\4\1\122\22\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\12\4\1\123"+
    "\11\4\17\0\2\4\1\0\1\4\1\124\1\0\1\4"+
    "\6\0\24\4\17\0\2\4\1\0\2\4\1\0\1\4"+
    "\6\0\16\4\1\125\5\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\20\4\1\126\3\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\5\4\1\127\16\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\4\4"+
    "\1\130\17\4\17\0\2\4\1\0\2\4\1\0\1\4"+
    "\6\0\14\4\1\131\7\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\132\21\4\17\0\2\4"+
    "\1\0\1\4\1\133\1\0\1\4\6\0\24\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\7\4\1\134"+
    "\3\4\1\135\10\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\1\4\1\136\22\4\17\0\2\4\1\0"+
    "\2\4\1\0\1\4\6\0\11\4\1\137\12\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\2\4\1\140"+
    "\21\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\7\4\1\141\14\4\17\0\1\114\1\51\20\0\1\51"+
    "\35\0\2\4\1\0\2\4\1\0\1\4\6\0\1\142"+
    "\23\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\11\4\1\143\12\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\7\4\1\144\14\4\17\0\2\4\1\0"+
    "\2\4\1\0\1\4\6\0\5\4\1\145\16\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\12\4\1\146"+
    "\11\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\5\4\1\147\16\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\5\4\1\150\16\4\17\0\2\4\1\0"+
    "\1\4\1\151\1\0\1\4\6\0\24\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\2\4\1\152\21\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\12\4"+
    "\1\153\11\4\17\0\2\4\1\0\2\4\1\0\1\4"+
    "\6\0\10\4\1\154\13\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\13\4\1\155\10\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\7\4\1\156\14\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\6\4"+
    "\1\157\1\4\1\160\13\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\14\4\1\161\7\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\3\4\1\162\20\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\2\4"+
    "\1\163\21\4\17\0\2\4\1\0\1\4\1\164\1\0"+
    "\1\4\6\0\24\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\13\4\1\165\10\4\17\0\2\4\1\0"+
    "\2\4\1\0\1\4\6\0\1\166\23\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\5\4\1\167\16\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\13\4"+
    "\1\170\10\4\17\0\2\4\1\0\2\4\1\0\1\4"+
    "\6\0\14\4\1\171\7\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\172\21\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\5\4\1\173\16\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\5\4"+
    "\1\174\16\4\17\0\2\4\1\0\2\4\1\0\1\4"+
    "\6\0\1\4\1\175\22\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\176\21\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\7\4\1\177\14\4"+
    "\17\0\2\4\1\0\2\4\1\0\1\4\6\0\1\200"+
    "\23\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\1\4\1\201\22\4\17\0\2\4\1\0\2\4\1\0"+
    "\1\4\6\0\3\4\1\202\20\4\17\0\2\4\1\0"+
    "\2\4\1\0\1\4\6\0\11\4\1\203\12\4\17\0"+
    "\2\4\1\0\2\4\1\0\1\4\6\0\17\4\1\204"+
    "\4\4\17\0\2\4\1\0\2\4\1\0\1\4\6\0"+
    "\16\4\1\205\5\4\17\0\2\4\1\0\1\4\1\206"+
    "\1\0\1\4\6\0\24\4\17\0\2\4\1\0\2\4"+
    "\1\0\1\4\6\0\2\4\1\207\21\4\17\0\2\4"+
    "\1\0\2\4\1\0\1\4\6\0\5\4\1\210\16\4"+
    "\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4224];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\21\1\12\11"+
    "\3\1\1\11\1\0\3\1\2\0\1\11\27\1\4\11"+
    "\1\0\1\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    ExtendedSyntaxStrCommentHandler longCommentOrStringHandler = new ExtendedSyntaxStrCommentHandler();


  _PascalLexer(java.io.Reader in) {
      this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PascalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23: 
          { return IF;
          }
        case 52: break;
        case 50: 
          { return FUNCTION;
          }
        case 53: break;
        case 35: 
          { return VAR;
          }
        case 54: break;
        case 17: 
          { return LT;
          }
        case 55: break;
        case 41: 
          { return ARRAY;
          }
        case 56: break;
        case 32: 
          { return END;
          }
        case 57: break;
        case 7: 
          { return MULT;
          }
        case 58: break;
        case 49: 
          { return PROGRAM;
          }
        case 59: break;
        case 47: 
          { return RECORD;
          }
        case 60: break;
        case 14: 
          { return LBRACK;
          }
        case 61: break;
        case 15: 
          { return RBRACK;
          }
        case 62: break;
        case 48: 
          { return LIBRARY;
          }
        case 63: break;
        case 2: 
          { return NUMBER;
          }
        case 64: break;
        case 34: 
          { return MOD;
          }
        case 65: break;
        case 38: 
          { return TYPE;
          }
        case 66: break;
        case 44: 
          { return FALSE;
          }
        case 67: break;
        case 25: 
          { return OF;
          }
        case 68: break;
        case 42: 
          { return BEGIN;
          }
        case 69: break;
        case 6: 
          { /* Ignore whitespace. */
          }
        case 70: break;
        case 11: 
          { return COMMA;
          }
        case 71: break;
        case 5: 
          { return DOT;
          }
        case 72: break;
        case 24: 
          { return OR;
          }
        case 73: break;
        case 10: 
          { return SEMI;
          }
        case 74: break;
        case 9: 
          { return DIV;
          }
        case 75: break;
        case 40: 
          { return UNIT;
          }
        case 76: break;
        case 21: 
          { return SHORTCOMMENT;
          }
        case 77: break;
        case 3: 
          { return NAME;
          }
        case 78: break;
        case 19: 
          { return COLON;
          }
        case 79: break;
        case 31: 
          { return AND;
          }
        case 80: break;
        case 51: 
          { return PROCEDURE;
          }
        case 81: break;
        case 29: 
          { return ASSIGN;
          }
        case 82: break;
        case 28: 
          { return GE;
          }
        case 83: break;
        case 1: 
          { return WRONG;
          }
        case 84: break;
        case 45: 
          { return UNTIL;
          }
        case 85: break;
        case 39: 
          { return THEN;
          }
        case 86: break;
        case 22: 
          { return DO;
          }
        case 87: break;
        case 18: 
          { return GT;
          }
        case 88: break;
        case 36: 
          { return ELSE;
          }
        case 89: break;
        case 46: 
          { return WHILE;
          }
        case 90: break;
        case 27: 
          { return NE;
          }
        case 91: break;
        case 4: 
          { return MINUS;
          }
        case 92: break;
        case 30: 
          { return STRING;
          }
        case 93: break;
        case 37: 
          { return TRUE;
          }
        case 94: break;
        case 33: 
          { return FOR;
          }
        case 95: break;
        case 12: 
          { return LPAREN;
          }
        case 96: break;
        case 43: 
          { return CONST;
          }
        case 97: break;
        case 13: 
          { return RPAREN;
          }
        case 98: break;
        case 16: 
          { return EQ;
          }
        case 99: break;
        case 8: 
          { return PLUS;
          }
        case 100: break;
        case 20: 
          { return DEREF;
          }
        case 101: break;
        case 26: 
          { return LE;
          }
        case 102: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
