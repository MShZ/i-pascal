/* The following code was generated by JFlex 1.4.1 on 2/11/13 2:06 AM */

package com.siberika.idea.pascal.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.siberika.idea.pascal.lang.psi.PasTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/11/13 2:06 AM from the specification file
 * <tt>pascal.flex</tt>
 */
class _PascalLexer implements FlexLexer, PasTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int XSTRING = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\12\1\1\1\2\1\0\1\1\1\2\16\12\4\0\1\1\2\0"+
    "\1\64\1\20\1\0\1\65\1\13\1\4\1\6\1\5\1\51\1\53"+
    "\1\16\1\17\1\3\12\14\1\61\1\52\1\57\1\56\1\60\1\0"+
    "\1\63\1\23\1\22\1\36\1\25\1\15\1\21\1\45\1\34\1\31"+
    "\1\50\1\46\1\35\1\26\1\24\1\27\1\37\1\11\1\30\1\33"+
    "\1\40\1\43\1\32\1\47\1\42\1\41\1\44\1\54\1\0\1\55"+
    "\1\62\1\11\1\0\1\23\1\22\1\36\1\25\1\15\1\21\1\45"+
    "\1\34\1\31\1\50\1\46\1\35\1\26\1\24\1\27\1\37\1\11"+
    "\1\30\1\33\1\40\1\43\1\32\1\47\1\42\1\41\1\44\1\7"+
    "\1\0\1\10\1\0\41\12\2\0\4\11\4\0\1\11\2\0\1\12"+
    "\7\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11\1\0\u013f\11"+
    "\31\0\162\11\4\0\14\11\16\0\5\11\11\0\1\11\21\0\130\12"+
    "\5\0\23\12\12\0\1\11\13\0\1\11\1\0\3\11\1\0\1\11"+
    "\1\0\24\11\1\0\54\11\1\0\46\11\1\0\5\11\4\0\202\11"+
    "\1\0\4\12\3\0\105\11\1\0\46\11\2\0\2\11\6\0\20\11"+
    "\41\0\46\11\2\0\1\11\7\0\47\11\11\0\21\12\1\0\27\12"+
    "\1\0\3\12\1\0\1\12\1\0\2\12\1\0\1\12\13\0\33\11"+
    "\5\0\3\11\15\0\4\12\14\0\6\12\13\0\32\11\5\0\13\11"+
    "\16\12\7\0\12\12\4\0\2\11\1\12\143\11\1\0\1\11\10\12"+
    "\1\0\6\12\2\11\2\12\1\0\4\12\2\11\12\12\3\11\2\0"+
    "\1\11\17\0\1\12\1\11\1\12\36\11\33\12\2\0\3\11\60\0"+
    "\46\11\13\12\1\11\u014f\0\3\12\66\11\2\0\1\12\1\11\20\12"+
    "\2\0\1\11\4\12\3\0\12\11\2\12\2\0\12\12\21\0\3\12"+
    "\1\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11"+
    "\3\0\4\11\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12"+
    "\11\0\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\4\11"+
    "\15\0\3\12\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11"+
    "\1\0\2\11\1\0\2\11\1\0\2\11\2\0\1\12\1\0\5\12"+
    "\4\0\2\12\2\0\3\12\13\0\4\11\1\0\1\11\7\0\14\12"+
    "\3\11\14\0\3\12\1\0\11\11\1\0\3\11\1\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\1\12\1\11\10\12\1\0"+
    "\3\12\1\0\3\12\2\0\1\11\17\0\2\11\2\12\2\0\12\12"+
    "\1\0\1\11\17\0\3\12\1\0\10\11\2\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\5\11\2\0\1\12\1\11\6\12"+
    "\3\0\2\12\2\0\3\12\10\0\2\12\4\0\2\11\1\0\3\11"+
    "\4\0\12\12\1\0\1\11\20\0\1\12\1\11\1\0\6\11\3\0"+
    "\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0"+
    "\2\11\3\0\3\11\3\0\10\11\1\0\3\11\4\0\5\12\3\0"+
    "\3\12\1\0\4\12\11\0\1\12\17\0\11\12\11\0\1\11\7\0"+
    "\3\12\1\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0"+
    "\5\11\4\0\7\12\1\0\3\12\1\0\4\12\7\0\2\12\11\0"+
    "\2\11\4\0\12\12\22\0\2\12\1\0\10\11\1\0\3\11\1\0"+
    "\27\11\1\0\12\11\1\0\5\11\2\0\1\12\1\11\7\12\1\0"+
    "\3\12\1\0\4\12\7\0\2\12\7\0\1\11\1\0\2\11\4\0"+
    "\12\12\22\0\2\12\1\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\20\11\4\0\6\12\2\0\3\12\1\0\4\12\11\0\1\12\10\0"+
    "\2\11\4\0\12\12\22\0\2\12\1\0\22\11\3\0\30\11\1\0"+
    "\11\11\1\0\1\11\2\0\7\11\3\0\1\12\4\0\6\12\1\0"+
    "\1\12\1\0\10\12\22\0\2\12\15\0\60\11\1\12\2\11\7\12"+
    "\4\0\10\11\10\12\1\0\12\12\47\0\2\11\1\0\1\11\2\0"+
    "\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0"+
    "\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11\1\12"+
    "\2\11\6\12\1\0\2\12\1\11\2\0\5\11\1\0\1\11\1\0"+
    "\6\12\2\0\12\12\2\0\2\11\42\0\1\11\27\0\2\12\6\0"+
    "\12\12\13\0\1\12\1\0\1\12\1\0\1\12\4\0\2\12\10\11"+
    "\1\0\42\11\6\0\24\12\1\0\2\12\4\11\4\0\10\12\1\0"+
    "\44\12\11\0\1\12\71\0\42\11\1\0\5\11\1\0\2\11\1\0"+
    "\7\12\3\0\4\12\6\0\12\12\6\0\6\11\4\12\106\0\46\11"+
    "\12\0\51\11\7\0\132\11\5\0\104\11\5\0\122\11\6\0\7\11"+
    "\1\0\77\11\1\0\1\11\1\0\4\11\2\0\7\11\1\0\1\11"+
    "\1\0\4\11\2\0\47\11\1\0\1\11\1\0\4\11\2\0\37\11"+
    "\1\0\1\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\7\11\1\0\7\11\1\0\27\11\1\0\37\11\1\0\1\11"+
    "\1\0\4\11\2\0\7\11\1\0\47\11\1\0\23\11\16\0\11\12"+
    "\56\0\125\11\14\0\u026c\11\2\0\10\11\12\0\32\11\5\0\113\11"+
    "\3\0\3\11\17\0\15\11\1\0\4\11\3\12\13\0\22\11\3\12"+
    "\13\0\22\11\2\12\14\0\15\11\1\0\3\11\1\0\2\12\14\0"+
    "\64\11\40\12\3\0\1\11\3\0\2\11\1\12\2\0\12\12\41\0"+
    "\3\12\2\0\12\12\6\0\130\11\10\0\51\11\1\12\126\0\35\11"+
    "\3\0\14\12\4\0\14\12\12\0\12\12\36\11\2\0\5\11\u038b\0"+
    "\154\11\224\0\234\11\4\0\132\11\6\0\26\11\2\0\6\11\2\0"+
    "\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0"+
    "\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11\5\0"+
    "\3\11\1\0\7\11\17\0\4\12\32\0\5\12\20\0\2\11\23\0"+
    "\1\11\13\0\4\12\6\0\6\12\1\0\1\11\15\0\1\11\40\0"+
    "\22\11\36\0\15\12\4\0\1\12\3\0\6\12\27\0\1\11\4\0"+
    "\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\4\11\1\0\3\11\1\0\7\11\3\0"+
    "\3\11\5\0\5\11\26\0\44\11\u0e81\0\3\11\31\0\11\11\6\12"+
    "\1\0\5\11\2\0\5\11\4\0\126\11\2\0\2\12\2\0\3\11"+
    "\1\0\137\11\5\0\50\11\4\0\136\11\21\0\30\11\70\0\20\11"+
    "\u0200\0\u19b6\11\112\0\u51a6\11\132\0\u048d\11\u0773\0\u2ba4\11\u215c\0\u012e\11"+
    "\2\0\73\11\225\0\7\11\14\0\5\11\5\0\1\11\1\12\12\11"+
    "\1\0\15\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11"+
    "\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0\66\11\50\0\15\11"+
    "\3\0\20\12\20\0\4\12\17\0\2\11\30\0\3\11\31\0\1\11"+
    "\6\0\5\11\1\0\207\11\2\0\1\12\4\0\1\11\13\0\12\12"+
    "\7\0\32\11\4\0\1\11\1\0\32\11\12\0\132\11\3\0\6\11"+
    "\2\0\6\11\2\0\6\11\2\0\3\11\3\0\2\11\3\0\2\11"+
    "\22\0\3\12\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\10\1\12\1\13\1\14\24\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\3\7\1\10\1\0"+
    "\1\32\1\0\1\33\3\10\1\34\1\35\1\36\11\10"+
    "\1\37\5\10\1\40\4\10\1\41\1\10\1\42\1\43"+
    "\5\10\1\44\1\45\1\10\1\46\22\10\1\47\12\10"+
    "\1\50\1\51\1\52\1\53\1\7\1\10\1\34\1\54"+
    "\5\10\1\0\1\36\1\10\1\55\6\10\1\56\1\10"+
    "\1\57\2\10\1\60\1\61\1\62\4\10\1\63\3\10"+
    "\1\64\3\10\1\65\16\10\1\66\3\10\1\67\1\10"+
    "\1\70\1\71\21\10\1\72\4\10\1\73\10\10\1\74"+
    "\1\75\4\10\1\34\1\0\1\36\3\10\1\76\23\10"+
    "\1\77\16\10\1\100\7\10\1\101\16\10\1\102\1\103"+
    "\1\10\1\104\1\105\1\10\1\106\1\107\1\10\1\110"+
    "\6\10\1\36\1\111\1\10\1\112\1\10\1\113\1\114"+
    "\2\10\1\115\23\10\1\116\1\117\15\10\1\120\1\10"+
    "\1\121\1\122\1\10\1\123\13\10\1\124\1\125\1\126"+
    "\1\10\1\127\1\10\1\130\1\10\1\36\13\10\1\131"+
    "\1\10\1\132\2\10\1\133\6\10\1\134\1\135\3\10"+
    "\1\136\3\10\1\137\1\10\1\140\1\10\1\141\1\142"+
    "\1\143\3\10\1\144\1\145\10\10\1\146\3\10\1\147"+
    "\1\10\1\36\1\150\1\10\1\151\5\10\1\152\3\10"+
    "\1\153\1\154\13\10\1\155\1\10\1\156\1\157\2\10"+
    "\1\160\3\10\1\161\1\162\5\10\1\163\1\36\1\10"+
    "\1\164\1\165\1\166\5\10\1\167\1\170\1\171\3\10"+
    "\1\172\4\10\1\173\1\10\1\174\1\10\1\175\1\10"+
    "\1\176\4\10\1\36\1\10\1\177\1\200\3\10\1\201"+
    "\3\10\1\202\1\203\2\10\1\204\1\205\1\206\1\207"+
    "\2\10\1\36\1\10\1\210\1\211\5\10\1\212\3\10"+
    "\1\36\2\10\1\213\3\10\1\214\1\10\1\215\1\36"+
    "\1\216\5\10\1\36\1\217\4\10\1\36\1\220\1\221"+
    "\1\222\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36\1\10\1\36\1\10\1\36\1\10"+
    "\1\36\1\10\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[799];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\66\0\154\0\242\0\66\0\66"+
    "\0\330\0\u010e\0\u0144\0\u017a\0\u01b0\0\66\0\u01e6\0\u021c"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\u068a\0\u06c0\0\u06f6\0\66\0\66\0\66"+
    "\0\66\0\u072c\0\u0762\0\66\0\u0798\0\u0144\0\u07ce\0\u0804"+
    "\0\66\0\u083a\0\u0870\0\u08a6\0\u08dc\0\66\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0d4a\0\u0798\0\u0d80\0\u0798\0\u0798\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0798\0\u0ec4\0\u0efa\0\u0798"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u0798\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\66\0\66\0\66"+
    "\0\66\0\u1518\0\u154e\0\66\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u17d6\0\u180c\0\u1842\0\u1878\0\u154e\0\u18ae\0\u154e\0\u18e4"+
    "\0\u191a\0\u154e\0\u154e\0\u154e\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u154e\0\u1a28\0\u1a5e\0\u1a94\0\u154e\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u154e\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u154e"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u154e\0\u1f02\0\u154e\0\u154e\0\u1f38"+
    "\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8"+
    "\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298"+
    "\0\u154e\0\u22ce\0\u2304\0\u233a\0\u2370\0\u154e\0\u23a6\0\u23dc"+
    "\0\u2412\0\u2448\0\u247e\0\u24b4\0\u24ea\0\u2520\0\u2520\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u2520\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2520\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee"+
    "\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2520\0\u2e32\0\u2e68"+
    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2520\0\u2fac\0\u2fe2"+
    "\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192"+
    "\0\u31c8\0\u31fe\0\u3234\0\u326a\0\u2520\0\u2520\0\u32a0\0\u2520"+
    "\0\u2520\0\u32d6\0\u2520\0\u2520\0\u330c\0\u2520\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u3378\0\u34bc\0\u34f2"+
    "\0\u3528\0\u3378\0\u3378\0\u355e\0\u3594\0\u3378\0\u35ca\0\u3600"+
    "\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0"+
    "\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960"+
    "\0\u3996\0\u3378\0\u3378\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4"+
    "\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54"+
    "\0\u3378\0\u3c8a\0\u3378\0\u3cc0\0\u3cf6\0\u3378\0\u3d2c\0\u3d62"+
    "\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12"+
    "\0\u3f48\0\u3378\0\u3378\0\u3378\0\u3f7e\0\u3f7e\0\u3fb4\0\u3fea"+
    "\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a"+
    "\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u3f7e\0\u42de\0\u3f7e"+
    "\0\u4314\0\u434a\0\u3f7e\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458"+
    "\0\u448e\0\u3f7e\0\u3f7e\0\u44c4\0\u44fa\0\u4530\0\u3f7e\0\u4566"+
    "\0\u459c\0\u45d2\0\u3f7e\0\u4608\0\u3f7e\0\u463e\0\u3f7e\0\u3f7e"+
    "\0\u3f7e\0\u4674\0\u46aa\0\u46e0\0\u3f7e\0\u3f7e\0\u4716\0\u474c"+
    "\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u3f7e\0\u48c6"+
    "\0\u48fc\0\u4932\0\u48fc\0\u4968\0\u499e\0\u48fc\0\u49d4\0\u48fc"+
    "\0\u4a0a\0\u4a40\0\u4a76\0\u4aac\0\u4ae2\0\u48fc\0\u4b18\0\u4b4e"+
    "\0\u4b84\0\u48fc\0\u48fc\0\u4bba\0\u4bf0\0\u4c26\0\u4c5c\0\u4c92"+
    "\0\u4cc8\0\u4cfe\0\u4d34\0\u4d6a\0\u4da0\0\u4dd6\0\u48fc\0\u4e0c"+
    "\0\u48fc\0\u48fc\0\u4e42\0\u4e78\0\u48fc\0\u4eae\0\u4ee4\0\u4f1a"+
    "\0\u48fc\0\u48fc\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u4ff2"+
    "\0\u505e\0\u5094\0\u4ff2\0\u4ff2\0\u4ff2\0\u50ca\0\u5100\0\u5136"+
    "\0\u516c\0\u51a2\0\u4ff2\0\u4ff2\0\u4ff2\0\u51d8\0\u520e\0\u5244"+
    "\0\u4ff2\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u4ff2\0\u5352\0\u4ff2"+
    "\0\u5388\0\u4ff2\0\u53be\0\u4ff2\0\u53f4\0\u542a\0\u5460\0\u5496"+
    "\0\u54cc\0\u5502\0\u5460\0\u5460\0\u5538\0\u556e\0\u55a4\0\u5460"+
    "\0\u55da\0\u5610\0\u5646\0\u5460\0\u5460\0\u567c\0\u56b2\0\u5460"+
    "\0\u5460\0\u5460\0\u5460\0\u56e8\0\u571e\0\u5754\0\u578a\0\u56e8"+
    "\0\u56e8\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u56e8\0\u58ce"+
    "\0\u5904\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5904\0\u5a12\0\u5a48"+
    "\0\u5a7e\0\u5904\0\u5ab4\0\u5ab4\0\u5aea\0\u5ab4\0\u5b20\0\u5b56"+
    "\0\u5b8c\0\u5bc2\0\u5bf8\0\u5c2e\0\u5bf8\0\u5c64\0\u5c9a\0\u5cd0"+
    "\0\u5d06\0\u5d3c\0\u5d06\0\u5d06\0\u5d06\0\u5d72\0\u5da8\0\u5dde"+
    "\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58\0\u5f8e"+
    "\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u609c\0\u60d2\0\u6108\0\u613e"+
    "\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c\0\u6282\0\u62b8\0\u62ee"+
    "\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc\0\u6432\0\u6468\0\u649e"+
    "\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac\0\u65e2\0\u6618\0\u664e"+
    "\0\u6684\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792\0\u67c8\0\u67fe"+
    "\0\u6834\0\u686a\0\u68a0\0\u68d6\0\u690c\0\u6942\0\u6978\0\u69ae"+
    "\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u6abc\0\u6af2\0\u6b28\0\u6b5e"+
    "\0\u6b94\0\u6bca\0\u6c00\0\u6c36\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e"+
    "\0\u6d44\0\u6d7a\0\u6db0\0\u6de6\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe"+
    "\0\u6ef4\0\u6f2a\0\u6f60\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e"+
    "\0\u70a4\0\u70da\0\u7110\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e"+
    "\0\u7254\0\u728a\0\u72c0\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce"+
    "\0\u7404\0\u743a\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e"+
    "\0\u75b4\0\u75ea\0\u7620\0\u7656\0\u768c\0\u76c2\0\u76f8\0\u772e"+
    "\0\u7764\0\u779a\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8\0\u78de"+
    "\0\u7914\0\u794a\0\u7980\0\u79b6\0\u79ec\0\u7a22\0\u7a58\0\u7a8e"+
    "\0\u7ac4\0\u7afa\0\u7b30\0\u7b66\0\u7b9c\0\u7bd2\0\u7c08\0\u7c3e"+
    "\0\u7c74\0\u7caa\0\u7ce0\0\u7d16\0\u7d4c\0\u7d82\0\u7db8\0\u7dee"+
    "\0\u7e24\0\u7e5a\0\u7e90\0\u7ec6\0\u7efc\0\u7f32\0\u7f68\0\u7f9e"+
    "\0\u7fd4\0\u800a\0\u8040\0\u8076\0\u80ac\0\u80e2\0\u8118\0\u814e"+
    "\0\u8184\0\u81ba\0\u81f0\0\u8226\0\u825c\0\u8292\0\u82c8\0\u82fe"+
    "\0\u8334\0\u836a\0\u83a0\0\u83d6\0\u840c\0\u8442\0\u8478\0\u84ae"+
    "\0\u84e4\0\u851a\0\u8550\0\u8586\0\u85bc\0\u85f2\0\u8628\0\u865e"+
    "\0\u8694\0\u86ca\0\u8700\0\u8736\0\u876c\0\u87a2\0\u87d8\0\u880e"+
    "\0\u8844\0\u887a\0\u88b0\0\u88e6\0\u891c\0\u8952\0\u8988\0\u89be"+
    "\0\u89f4\0\u8a2a\0\u8a60\0\u8a96\0\u8acc\0\u8b02\0\u8b38\0\u8b6e"+
    "\0\u8ba4\0\u8bda\0\u8c10\0\u8c46\0\u8c7c\0\66\0\u8cb2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[799];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\12\1\41\1\42\1\12\1\43\1\12\1\44\1\12"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\71\0\1\62\67\0"+
    "\1\63\11\0\1\50\46\0\10\11\1\64\55\11\11\0"+
    "\2\65\1\0\2\65\2\0\31\65\15\0\2\66\1\0"+
    "\10\66\1\67\52\66\14\0\1\14\2\0\1\70\2\0"+
    "\1\71\54\0\2\65\1\0\2\65\2\0\4\65\1\72"+
    "\10\65\1\73\4\65\1\74\6\65\23\0\1\51\5\0"+
    "\1\75\2\0\1\76\57\0\2\65\1\0\2\77\2\0"+
    "\1\65\3\77\1\65\1\77\10\65\1\77\12\65\26\0"+
    "\2\65\1\0\2\65\2\0\3\65\1\100\3\65\1\101"+
    "\1\65\1\102\11\65\1\103\5\65\26\0\2\65\1\0"+
    "\1\65\1\104\2\0\10\65\1\105\20\65\26\0\2\65"+
    "\1\0\2\65\2\0\2\65\1\106\1\65\1\107\3\65"+
    "\1\110\2\65\1\111\7\65\1\112\5\65\26\0\2\65"+
    "\1\0\1\65\1\113\2\0\7\65\1\114\1\65\1\115"+
    "\17\65\26\0\2\65\1\0\1\65\1\116\2\0\7\65"+
    "\1\117\1\65\1\120\7\65\1\121\7\65\26\0\2\65"+
    "\1\0\1\65\1\122\2\0\7\65\1\123\21\65\26\0"+
    "\2\65\1\0\2\65\2\0\1\65\1\124\1\125\1\65"+
    "\1\126\3\65\1\127\1\65\1\130\4\65\1\131\3\65"+
    "\1\132\5\65\26\0\2\65\1\0\1\65\1\133\2\0"+
    "\3\65\1\134\25\65\26\0\2\65\1\0\2\65\2\0"+
    "\1\65\1\135\2\65\1\136\1\65\1\137\4\65\1\140"+
    "\15\65\26\0\2\65\1\0\2\65\2\0\3\65\1\141"+
    "\5\65\1\142\17\65\26\0\2\65\1\0\1\65\1\143"+
    "\2\0\3\65\1\144\10\65\1\145\3\65\1\146\10\65"+
    "\26\0\2\65\1\0\1\65\1\147\2\0\31\65\26\0"+
    "\2\65\1\0\2\65\2\0\3\65\1\150\5\65\1\151"+
    "\17\65\26\0\2\65\1\0\2\65\2\0\3\65\1\152"+
    "\1\65\1\153\1\65\1\154\5\65\1\155\13\65\26\0"+
    "\2\65\1\0\2\65\2\0\3\65\1\156\3\65\1\157"+
    "\1\160\4\65\1\161\5\65\1\162\5\65\26\0\2\65"+
    "\1\0\2\65\2\0\7\65\1\163\1\164\3\65\1\165"+
    "\4\65\1\166\7\65\26\0\2\65\1\0\2\65\2\0"+
    "\7\65\1\167\21\65\26\0\2\65\1\0\2\65\2\0"+
    "\4\65\1\170\6\65\1\171\15\65\26\0\2\65\1\0"+
    "\2\65\2\0\7\65\1\172\21\65\26\0\2\65\1\0"+
    "\2\65\2\0\10\65\1\173\1\174\2\65\1\175\14\65"+
    "\73\0\1\176\1\0\1\177\63\0\1\200\65\0\1\201"+
    "\7\0\2\62\1\0\63\62\5\63\1\202\60\63\11\0"+
    "\2\203\1\0\2\203\2\0\31\203\30\0\1\66\52\0"+
    "\14\204\1\75\2\204\1\0\46\204\11\0\2\203\1\0"+
    "\2\203\2\0\5\203\1\205\23\203\26\0\2\203\1\0"+
    "\2\203\2\0\13\203\1\206\15\203\26\0\2\203\1\0"+
    "\2\203\2\0\11\203\1\207\4\203\1\210\1\211\1\212"+
    "\10\203\31\0\1\75\1\213\61\0\2\203\1\0\2\214"+
    "\2\0\1\203\3\214\1\203\1\214\10\203\1\214\12\203"+
    "\26\0\2\203\1\0\2\203\2\0\15\203\1\215\13\203"+
    "\26\0\2\203\1\0\2\203\2\0\10\203\1\216\20\203"+
    "\26\0\2\203\1\0\2\203\2\0\4\203\1\217\10\203"+
    "\1\220\13\203\26\0\2\203\1\0\2\203\2\0\4\203"+
    "\1\221\24\203\26\0\2\203\1\0\2\203\2\0\25\203"+
    "\1\222\3\203\26\0\2\203\1\0\1\203\1\223\2\0"+
    "\31\203\26\0\2\203\1\0\2\203\2\0\13\203\1\224"+
    "\15\203\26\0\2\203\1\0\2\203\2\0\5\203\1\225"+
    "\23\203\26\0\2\203\1\0\2\203\2\0\10\203\1\226"+
    "\20\203\26\0\2\203\1\0\2\203\2\0\6\203\1\227"+
    "\4\203\1\230\15\203\26\0\2\203\1\0\2\203\2\0"+
    "\20\203\1\231\10\203\26\0\2\203\1\0\2\203\2\0"+
    "\27\203\1\232\1\203\26\0\2\203\1\0\2\203\2\0"+
    "\20\203\1\233\10\203\26\0\2\203\1\0\2\203\2\0"+
    "\15\203\1\234\13\203\26\0\2\203\1\0\2\203\2\0"+
    "\1\203\1\235\11\203\1\236\3\203\1\237\11\203\26\0"+
    "\2\203\1\0\2\203\2\0\27\203\1\240\1\203\26\0"+
    "\2\203\1\0\2\203\2\0\12\203\1\241\1\242\15\203"+
    "\26\0\2\203\1\0\2\203\2\0\4\203\1\243\24\203"+
    "\26\0\2\203\1\0\2\203\2\0\13\203\1\244\15\203"+
    "\26\0\2\203\1\0\2\203\2\0\5\203\1\245\23\203"+
    "\26\0\2\203\1\0\2\203\2\0\30\203\1\246\26\0"+
    "\2\203\1\0\1\203\1\247\2\0\31\203\26\0\2\203"+
    "\1\0\1\203\1\250\2\0\31\203\26\0\2\203\1\0"+
    "\2\203\2\0\20\203\1\251\10\203\26\0\2\203\1\0"+
    "\2\203\2\0\1\203\1\252\1\203\1\253\5\203\1\254"+
    "\1\203\1\255\2\203\1\256\1\257\5\203\1\260\3\203"+
    "\26\0\2\203\1\0\2\203\2\0\11\203\1\261\17\203"+
    "\26\0\2\203\1\0\2\203\2\0\5\203\1\262\3\203"+
    "\1\263\2\203\1\264\1\265\2\203\1\266\10\203\26\0"+
    "\2\203\1\0\2\203\2\0\17\203\1\267\11\203\26\0"+
    "\2\203\1\0\2\203\2\0\10\203\1\270\20\203\26\0"+
    "\2\203\1\0\2\203\2\0\10\203\1\271\20\203\26\0"+
    "\2\203\1\0\2\203\2\0\3\203\1\272\11\203\1\273"+
    "\2\203\1\274\10\203\26\0\2\203\1\0\2\203\2\0"+
    "\1\203\1\275\27\203\26\0\2\203\1\0\2\203\2\0"+
    "\10\203\1\276\4\203\1\277\13\203\26\0\2\203\1\0"+
    "\2\203\2\0\3\203\1\300\1\203\1\301\2\203\1\302"+
    "\20\203\26\0\2\203\1\0\2\203\2\0\15\203\1\303"+
    "\13\203\26\0\2\203\1\0\2\203\2\0\2\203\1\304"+
    "\26\203\26\0\2\203\1\0\2\203\2\0\2\203\1\305"+
    "\26\203\26\0\2\203\1\0\2\203\2\0\13\203\1\306"+
    "\15\203\26\0\2\203\1\0\1\203\1\307\2\0\31\203"+
    "\26\0\2\203\1\0\2\203\2\0\4\203\1\310\24\203"+
    "\26\0\2\203\1\0\2\203\2\0\3\203\1\311\25\203"+
    "\26\0\2\203\1\0\2\203\2\0\13\203\1\312\2\203"+
    "\1\313\12\203\26\0\2\203\1\0\2\203\2\0\11\203"+
    "\1\314\17\203\26\0\2\203\1\0\2\203\2\0\7\203"+
    "\1\315\1\203\1\316\17\203\26\0\2\203\1\0\2\203"+
    "\2\0\3\203\1\317\25\203\26\0\2\203\1\0\2\203"+
    "\2\0\2\203\1\320\26\203\26\0\2\203\1\0\2\203"+
    "\2\0\21\203\1\321\1\203\1\322\5\203\26\0\2\203"+
    "\1\0\1\203\1\323\2\0\10\203\1\324\20\203\26\0"+
    "\2\203\1\0\2\203\2\0\17\203\1\325\11\203\26\0"+
    "\2\203\1\0\2\203\2\0\10\203\1\326\20\203\26\0"+
    "\2\203\1\0\2\203\2\0\11\203\1\327\6\203\1\330"+
    "\10\203\26\0\2\203\1\0\1\203\1\331\2\0\31\203"+
    "\26\0\2\203\1\0\2\203\2\0\20\203\1\332\10\203"+
    "\26\0\2\203\1\0\2\203\2\0\11\203\1\333\17\203"+
    "\26\0\2\203\1\0\2\203\2\0\20\203\1\334\10\203"+
    "\26\0\2\203\1\0\2\203\2\0\11\203\1\335\17\203"+
    "\15\0\5\63\1\202\1\64\57\63\11\0\2\336\1\0"+
    "\2\336\2\0\31\336\26\0\2\336\1\0\1\336\1\337"+
    "\2\0\31\336\26\0\2\336\1\0\2\336\2\0\20\336"+
    "\1\340\10\336\26\0\2\336\1\0\1\336\1\341\2\0"+
    "\31\336\26\0\2\336\1\0\1\336\1\342\2\0\7\336"+
    "\1\343\21\336\26\0\2\336\1\0\1\336\1\344\2\0"+
    "\31\336\31\0\1\345\1\0\1\346\32\0\1\346\25\0"+
    "\2\336\1\0\2\347\2\0\1\336\3\347\1\336\1\347"+
    "\10\336\1\347\12\336\26\0\2\336\1\0\2\336\2\0"+
    "\13\336\1\350\15\336\26\0\2\336\1\0\2\336\2\0"+
    "\27\336\1\351\1\336\26\0\2\336\1\0\2\336\2\0"+
    "\3\336\1\352\25\336\26\0\2\336\1\0\1\336\1\353"+
    "\2\0\31\336\26\0\2\336\1\0\2\336\2\0\16\336"+
    "\1\354\12\336\26\0\2\336\1\0\2\336\2\0\11\336"+
    "\1\355\17\336\26\0\2\336\1\0\2\336\2\0\3\336"+
    "\1\356\25\336\26\0\2\336\1\0\2\336\2\0\7\336"+
    "\1\357\10\336\1\360\10\336\26\0\2\336\1\0\2\336"+
    "\2\0\3\336\1\361\25\336\26\0\2\336\1\0\1\336"+
    "\1\362\2\0\31\336\26\0\2\336\1\0\2\336\2\0"+
    "\7\336\1\363\21\336\26\0\2\336\1\0\2\336\2\0"+
    "\3\336\1\364\25\336\26\0\2\336\1\0\2\336\2\0"+
    "\20\336\1\365\10\336\26\0\2\336\1\0\2\336\2\0"+
    "\10\336\1\366\20\336\26\0\2\336\1\0\2\336\2\0"+
    "\4\336\1\367\24\336\26\0\2\336\1\0\2\336\2\0"+
    "\17\336\1\370\11\336\26\0\2\336\1\0\2\336\2\0"+
    "\3\336\1\371\25\336\26\0\2\336\1\0\2\336\2\0"+
    "\13\336\1\372\15\336\26\0\2\336\1\0\1\336\1\373"+
    "\2\0\31\336\26\0\2\336\1\0\2\336\2\0\10\336"+
    "\1\374\20\336\26\0\2\336\1\0\2\336\2\0\10\336"+
    "\1\375\20\336\26\0\2\336\1\0\1\336\1\376\2\0"+
    "\31\336\26\0\2\336\1\0\2\336\2\0\5\336\1\377"+
    "\23\336\26\0\2\336\1\0\2\336\2\0\4\336\1\u0100"+
    "\24\336\26\0\2\336\1\0\2\336\2\0\7\336\1\u0101"+
    "\21\336\26\0\2\336\1\0\2\336\2\0\7\336\1\u0102"+
    "\21\336\26\0\2\336\1\0\1\336\1\u0103\2\0\31\336"+
    "\26\0\2\336\1\0\2\336\2\0\11\336\1\u0104\17\336"+
    "\26\0\2\336\1\0\2\336\2\0\13\336\1\u0105\15\336"+
    "\26\0\2\336\1\0\1\336\1\u0106\2\0\31\336\26\0"+
    "\2\336\1\0\2\336\2\0\20\336\1\u0107\10\336\26\0"+
    "\2\336\1\0\1\336\1\u0108\2\0\31\336\26\0\2\336"+
    "\1\0\2\336\2\0\11\336\1\u0109\17\336\26\0\2\336"+
    "\1\0\1\336\1\u010a\2\0\31\336\26\0\2\336\1\0"+
    "\2\336\2\0\15\336\1\u010b\13\336\26\0\2\336\1\0"+
    "\2\336\2\0\20\336\1\u010c\10\336\26\0\2\336\1\0"+
    "\2\336\2\0\15\336\1\u010d\13\336\26\0\2\336\1\0"+
    "\2\336\2\0\1\336\1\u010e\27\336\26\0\2\336\1\0"+
    "\1\336\1\u010f\2\0\31\336\26\0\2\336\1\0\2\336"+
    "\2\0\20\336\1\u0110\10\336\26\0\2\336\1\0\2\336"+
    "\2\0\16\336\1\u0111\12\336\26\0\2\336\1\0\2\336"+
    "\2\0\11\336\1\u0112\17\336\26\0\2\336\1\0\2\336"+
    "\2\0\17\336\1\u0113\11\336\26\0\2\336\1\0\1\336"+
    "\1\u0114\2\0\31\336\26\0\2\336\1\0\2\336\2\0"+
    "\10\336\1\u0115\20\336\26\0\2\336\1\0\1\336\1\u0116"+
    "\2\0\31\336\26\0\2\336\1\0\2\336\2\0\16\336"+
    "\1\u0117\12\336\26\0\2\336\1\0\2\336\2\0\13\336"+
    "\1\u0118\4\336\1\u0119\10\336\26\0\2\336\1\0\2\336"+
    "\2\0\13\336\1\u011a\15\336\26\0\2\336\1\0\2\336"+
    "\2\0\16\336\1\u011b\12\336\26\0\2\336\1\0\2\336"+
    "\2\0\26\336\1\u011c\2\336\26\0\2\336\1\0\2\336"+
    "\2\0\4\336\1\u011d\24\336\26\0\2\336\1\0\2\336"+
    "\2\0\16\336\1\u011e\1\u011f\1\u0120\4\336\1\u0121\3\336"+
    "\26\0\2\336\1\0\2\336\2\0\12\336\1\u0122\16\336"+
    "\26\0\2\336\1\0\2\336\2\0\20\336\1\u0123\10\336"+
    "\26\0\2\336\1\0\2\336\2\0\15\336\1\u0124\13\336"+
    "\26\0\2\336\1\0\1\336\1\u0125\2\0\31\336\26\0"+
    "\2\336\1\0\2\336\2\0\4\336\1\u0126\24\336\26\0"+
    "\2\336\1\0\1\336\1\u0127\2\0\31\336\26\0\2\336"+
    "\1\0\1\336\1\u0128\2\0\31\336\26\0\2\336\1\0"+
    "\2\336\2\0\20\336\1\u0129\10\336\26\0\2\336\1\0"+
    "\2\336\2\0\11\336\1\u012a\17\336\26\0\2\336\1\0"+
    "\2\336\2\0\13\336\1\u012b\15\336\26\0\2\336\1\0"+
    "\2\336\2\0\7\336\1\u012c\21\336\26\0\2\336\1\0"+
    "\2\336\2\0\20\336\1\u012d\10\336\26\0\2\336\1\0"+
    "\2\336\2\0\14\336\1\u012e\14\336\26\0\2\336\1\0"+
    "\2\336\2\0\15\336\1\u012f\13\336\26\0\2\u0130\1\0"+
    "\2\u0130\2\0\31\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\17\u0130\1\u0131\11\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\10\u0130\1\u0132\20\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\10\u0130\1\u0133\20\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\10\u0130\1\u0134\20\u0130\31\0\1\345\62\0\2\u0130\1\0"+
    "\2\u0135\2\0\1\u0130\3\u0135\1\u0130\1\u0135\10\u0130\1\u0135"+
    "\12\u0130\26\0\2\u0130\1\0\1\u0130\1\u0136\2\0\31\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\3\u0130\1\u0137\25\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\15\u0130\1\u0138\13\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\20\u0130\1\u0139\10\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\4\u0130\1\u013a\24\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\26\u0130\1\u013b\2\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\15\u0130\1\u013c\13\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u013d\20\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\21\u0130\1\u013e\7\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\6\u0130\1\u013f\22\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\6\u0130\1\u0140\22\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\23\u0130\1\u0141\5\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u0142\20\u0130"+
    "\26\0\2\u0130\1\0\1\u0130\1\u0143\2\0\31\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\20\u0130\1\u0144\10\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\11\u0130\1\u0145\17\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\6\u0130\1\u0146\22\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\3\u0130\1\u0147\25\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\16\u0130\1\u0148\12\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u0149\4\u0130\1\u014a"+
    "\13\u0130\26\0\2\u0130\1\0\2\u0130\2\0\3\u0130\1\u014b"+
    "\25\u0130\26\0\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u014c"+
    "\20\u0130\26\0\2\u0130\1\0\2\u0130\2\0\20\u0130\1\u014d"+
    "\10\u0130\26\0\2\u0130\1\0\2\u0130\2\0\23\u0130\1\u014e"+
    "\5\u0130\26\0\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u014f"+
    "\20\u0130\26\0\2\u0130\1\0\2\u0130\2\0\3\u0130\1\u0150"+
    "\25\u0130\26\0\2\u0130\1\0\2\u0130\2\0\13\u0130\1\u0151"+
    "\15\u0130\26\0\2\u0130\1\0\1\u0130\1\u0152\2\0\31\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\22\u0130\1\u0153\6\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\11\u0130\1\u0154\17\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u0155\20\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\4\u0130\1\u0156\24\u0130"+
    "\26\0\2\u0130\1\0\2\u0130\2\0\10\u0130\1\u0157\20\u0130"+
    "\26\0\2\u0130\1\0\1\u0130\1\u0158\2\0\31\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\23\u0130\1\u0159\5\u0130\26\0"+
    "\2\u0130\1\0\1\u0130\1\u015a\2\0\31\u0130\26\0\2\u0130"+
    "\1\0\2\u0130\2\0\16\u0130\1\u015b\12\u0130\26\0\2\u0130"+
    "\1\0\2\u0130\2\0\11\u0130\1\u015c\17\u0130\26\0\2\u0130"+
    "\1\0\2\u0130\2\0\3\u0130\1\u015d\25\u0130\26\0\2\u0130"+
    "\1\0\2\u0130\2\0\4\u0130\1\u015e\11\u0130\1\u015f\12\u0130"+
    "\26\0\2\u0130\1\0\1\u0130\1\u0160\2\0\31\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\15\u0130\1\u0161\13\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\3\u0130\1\u0162\25\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\15\u0130\1\u0163\13\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\20\u0130\1\u0164\10\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\11\u0130\1\u0165\17\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\13\u0130\1\u0166\15\u0130\26\0"+
    "\2\u0130\1\0\2\u0130\2\0\3\u0130\1\u0167\25\u0130\26\0"+
    "\2\u0130\1\0\1\u0130\1\u0168\2\0\31\u0130\26\0\2\u0130"+
    "\1\0\2\u0130\2\0\20\u0130\1\u0169\10\u0130\26\0\2\u0130"+
    "\1\0\1\u0130\1\u016a\2\0\31\u0130\26\0\2\u0130\1\0"+
    "\1\u0130\1\u016b\2\0\31\u0130\26\0\2\u0130\1\0\1\u0130"+
    "\1\u016c\2\0\31\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\10\u0130\1\u016d\20\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\3\u0130\1\u016e\25\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\1\u0130\1\u016f\27\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\11\u0130\1\u0170\17\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\3\u0130\1\u0171\25\u0130\26\0\2\u0130\1\0\2\u0130\2\0"+
    "\15\u0130\1\u0172\13\u0130\26\0\2\u0130\1\0\1\u0130\1\u0173"+
    "\2\0\31\u0130\26\0\2\u0130\1\0\1\u0130\1\u0174\2\0"+
    "\31\u0130\26\0\2\u0175\1\0\2\u0175\2\0\31\u0175\26\0"+
    "\2\u0175\1\0\2\u0175\2\0\20\u0175\1\u0176\10\u0175\26\0"+
    "\2\u0175\1\0\2\u0175\2\0\11\u0175\1\u0177\17\u0175\26\0"+
    "\2\u0175\1\0\2\u0175\2\0\20\u0175\1\u0178\10\u0175\26\0"+
    "\2\u0175\1\0\2\u0175\2\0\4\u0175\1\u0179\24\u0175\26\0"+
    "\2\u0175\1\0\2\u017a\2\0\1\u0175\3\u017a\1\u0175\1\u017a"+
    "\10\u0175\1\u017a\12\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\10\u0175\1\u017b\20\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\11\u0175\1\u017c\3\u0175\1\u017d\13\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\11\u0175\1\u017e\17\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\23\u0175\1\u017f\5\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\3\u0175\1\u0180\25\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\2\u0175\1\u0181\26\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\3\u0175\1\u0182\25\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\15\u0175\1\u0183\13\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\23\u0175\1\u0184\5\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\16\u0175\1\u0185\12\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\7\u0175\1\u0186\21\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\4\u0175\1\u0187\1\u0188\23\u0175\26\0\2\u0175"+
    "\1\0\2\u0175\2\0\11\u0175\1\u0189\17\u0175\26\0\2\u0175"+
    "\1\0\2\u0175\2\0\25\u0175\1\u018a\3\u0175\26\0\2\u0175"+
    "\1\0\2\u0175\2\0\20\u0175\1\u018b\10\u0175\26\0\2\u0175"+
    "\1\0\2\u0175\2\0\11\u0175\1\u018c\17\u0175\26\0\2\u0175"+
    "\1\0\2\u0175\2\0\7\u0175\1\u018d\21\u0175\26\0\2\u0175"+
    "\1\0\2\u0175\2\0\20\u0175\1\u018e\10\u0175\26\0\2\u0175"+
    "\1\0\1\u0175\1\u018f\2\0\31\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\10\u0175\1\u0190\20\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\10\u0175\1\u0191\20\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\5\u0175\1\u0192\23\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\20\u0175\1\u0193\10\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\20\u0175\1\u0194\10\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\3\u0175\1\u0195\25\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\11\u0175\1\u0196\17\u0175\26\0\2\u0175\1\0"+
    "\1\u0175\1\u0197\2\0\31\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\1\u0175\1\u0198\27\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\6\u0175\1\u0199\22\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\3\u0175\1\u019a\25\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\5\u0175\1\u019b\23\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\3\u0175\1\u019c\25\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\16\u0175\1\u019d\12\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\15\u0175\1\u019e\13\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\25\u0175\1\u019f\3\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\20\u0175\1\u01a0\10\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\10\u0175\1\u01a1\20\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\10\u0175\1\u01a2\20\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\10\u0175\1\u01a3\20\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\4\u0175\1\u01a4\24\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\15\u0175\1\u01a5\13\u0175\26\0\2\u0175\1\0\2\u0175"+
    "\2\0\5\u0175\1\u01a6\23\u0175\26\0\2\u0175\1\0\1\u0175"+
    "\1\u01a7\2\0\31\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\5\u0175\1\u01a8\23\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\10\u0175\1\u01a9\20\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\16\u0175\1\u01aa\12\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\3\u0175\1\u01ab\25\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\20\u0175\1\u01ac\10\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\7\u0175\1\u01ad\21\u0175\26\0\2\u0175\1\0\2\u0175\2\0"+
    "\13\u0175\1\u01ae\2\u0175\1\u01af\12\u0175\26\0\2\u0175\1\0"+
    "\2\u0175\2\0\5\u0175\1\u01b0\23\u0175\26\0\2\u01b1\1\0"+
    "\2\u01b1\2\0\31\u01b1\26\0\2\u01b1\1\0\2\u01b1\2\0"+
    "\6\u01b1\1\u01b2\22\u01b1\26\0\2\u01b1\1\0\2\u01b1\2\0"+
    "\13\u01b1\1\u01b3\15\u01b1\26\0\2\u01b1\1\0\2\u01b1\2\0"+
    "\3\u01b1\1\u01b4\25\u01b1\26\0\2\u01b1\1\0\2\u01b5\2\0"+
    "\1\u01b1\3\u01b5\1\u01b1\1\u01b5\10\u01b1\1\u01b5\12\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\5\u01b1\1\u01b6\23\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\24\u01b1\1\u01b7\4\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\21\u01b1\1\u01b8\7\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\7\u01b1\1\u01b9\21\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\20\u01b1\1\u01ba\10\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\16\u01b1\1\u01bb\12\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\15\u01b1\1\u01bc\13\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\20\u01b1\1\u01bd\10\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\20\u01b1\1\u01be\10\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\16\u01b1\1\u01bf\12\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\3\u01b1\1\u01c0\25\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\20\u01b1\1\u01c1\10\u01b1\26\0"+
    "\2\u01b1\1\0\2\u01b1\2\0\16\u01b1\1\u01c2\12\u01b1\26\0"+
    "\2\u01b1\1\0\1\u01b1\1\u01c3\2\0\31\u01b1\26\0\2\u01b1"+
    "\1\0\2\u01b1\2\0\5\u01b1\1\u01c4\23\u01b1\26\0\2\u01b1"+
    "\1\0\2\u01b1\2\0\3\u01b1\1\u01c5\25\u01b1\26\0\2\u01b1"+
    "\1\0\2\u01b1\2\0\7\u01b1\1\u01c6\21\u01b1\26\0\2\u01b1"+
    "\1\0\2\u01b1\2\0\4\u01b1\1\u01c7\24\u01b1\26\0\2\u01b1"+
    "\1\0\2\u01b1\2\0\7\u01b1\1\u01c8\21\u01b1\26\0\2\u01b1"+
    "\1\0\2\u01b1\2\0\16\u01b1\1\u01c9\12\u01b1\26\0\2\u01b1"+
    "\1\0\1\u01b1\1\u01ca\2\0\31\u01b1\26\0\2\u01b1\1\0"+
    "\2\u01b1\2\0\15\u01b1\1\u01cb\13\u01b1\26\0\2\u01b1\1\0"+
    "\2\u01b1\2\0\20\u01b1\1\u01cc\10\u01b1\26\0\2\u01b1\1\0"+
    "\2\u01b1\2\0\3\u01b1\1\u01cd\25\u01b1\26\0\2\u01b1\1\0"+
    "\1\u01b1\1\u01ce\2\0\31\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\15\u01b1\1\u01cf\13\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\15\u01b1\1\u01d0\13\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\15\u01b1\1\u01d1\13\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\21\u01b1\1\u01d2\7\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\23\u01b1\1\u01d3\5\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\23\u01b1\1\u01d4\5\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\10\u01b1\1\u01d5\20\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\23\u01b1\1\u01d6\5\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\20\u01b1\1\u01d7\10\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\20\u01b1\1\u01d8\10\u01b1\26\0\2\u01b1\1\0\2\u01b1"+
    "\2\0\6\u01b1\1\u01d9\22\u01b1\26\0\2\u01b1\1\0\1\u01b1"+
    "\1\u01da\2\0\31\u01b1\26\0\2\u01b1\1\0\2\u01b1\2\0"+
    "\10\u01b1\1\u01db\20\u01b1\26\0\2\u01b1\1\0\2\u01b1\2\0"+
    "\14\u01b1\1\u01dc\14\u01b1\26\0\2\u01b1\1\0\2\u01b1\2\0"+
    "\12\u01b1\1\u01dd\16\u01b1\26\0\2\u01de\1\0\2\u01de\2\0"+
    "\31\u01de\26\0\2\u01de\1\0\1\u01de\1\u01df\2\0\31\u01de"+
    "\26\0\2\u01de\1\0\2\u01de\2\0\15\u01de\1\u01e0\13\u01de"+
    "\26\0\2\u01de\1\0\2\u01e1\2\0\1\u01de\3\u01e1\1\u01de"+
    "\1\u01e1\10\u01de\1\u01e1\12\u01de\26\0\2\u01de\1\0\2\u01de"+
    "\2\0\3\u01de\1\u01e2\25\u01de\26\0\2\u01de\1\0\2\u01de"+
    "\2\0\4\u01de\1\u01e3\24\u01de\26\0\2\u01de\1\0\1\u01de"+
    "\1\u01e4\2\0\31\u01de\26\0\2\u01de\1\0\2\u01de\2\0"+
    "\20\u01de\1\u01e5\10\u01de\26\0\2\u01de\1\0\1\u01de\1\u01e6"+
    "\2\0\31\u01de\26\0\2\u01de\1\0\1\u01de\1\u01e7\2\0"+
    "\31\u01de\26\0\2\u01de\1\0\2\u01de\2\0\20\u01de\1\u01e8"+
    "\10\u01de\26\0\2\u01de\1\0\2\u01de\2\0\20\u01de\1\u01e9"+
    "\10\u01de\26\0\2\u01de\1\0\1\u01de\1\u01ea\2\0\31\u01de"+
    "\26\0\2\u01de\1\0\1\u01de\1\u01eb\2\0\31\u01de\26\0"+
    "\2\u01de\1\0\2\u01de\2\0\5\u01de\1\u01ec\23\u01de\26\0"+
    "\2\u01de\1\0\2\u01de\2\0\10\u01de\1\u01ed\20\u01de\26\0"+
    "\2\u01de\1\0\2\u01de\2\0\16\u01de\1\u01ee\12\u01de\26\0"+
    "\2\u01de\1\0\2\u01de\2\0\5\u01de\1\u01ef\23\u01de\26\0"+
    "\2\u01de\1\0\1\u01de\1\u01f0\2\0\31\u01de\26\0\2\u01de"+
    "\1\0\2\u01de\2\0\10\u01de\1\u01f1\20\u01de\26\0\2\u01de"+
    "\1\0\2\u01de\2\0\11\u01de\1\u01f2\17\u01de\26\0\2\u01de"+
    "\1\0\1\u01de\1\u01f3\2\0\31\u01de\26\0\2\u01de\1\0"+
    "\2\u01de\2\0\16\u01de\1\u01f4\12\u01de\26\0\2\u01de\1\0"+
    "\2\u01de\2\0\4\u01de\1\u01f5\24\u01de\26\0\2\u01de\1\0"+
    "\2\u01de\2\0\15\u01de\1\u01f6\13\u01de\26\0\2\u01de\1\0"+
    "\2\u01de\2\0\16\u01de\1\u01f7\12\u01de\26\0\2\u01de\1\0"+
    "\1\u01de\1\u01f8\2\0\31\u01de\26\0\2\u01de\1\0\2\u01de"+
    "\2\0\10\u01de\1\u01f9\20\u01de\26\0\2\u01de\1\0\2\u01de"+
    "\2\0\21\u01de\1\u01fa\7\u01de\26\0\2\u01de\1\0\1\u01de"+
    "\1\u01fb\2\0\31\u01de\26\0\2\u01de\1\0\2\u01de\2\0"+
    "\6\u01de\1\u01fc\22\u01de\26\0\2\u01de\1\0\1\u01de\1\u01fd"+
    "\2\0\31\u01de\26\0\2\u01de\1\0\2\u01de\2\0\3\u01de"+
    "\1\u01fe\25\u01de\26\0\2\u01ff\1\0\2\u01ff\2\0\31\u01ff"+
    "\26\0\2\u01ff\1\0\2\u01ff\2\0\4\u01ff\1\u0200\24\u01ff"+
    "\26\0\2\u01ff\1\0\2\u0201\2\0\1\u01ff\3\u0201\1\u01ff"+
    "\1\u0201\10\u01ff\1\u0201\12\u01ff\26\0\2\u01ff\1\0\2\u01ff"+
    "\2\0\20\u01ff\1\u0202\10\u01ff\26\0\2\u01ff\1\0\2\u01ff"+
    "\2\0\10\u01ff\1\u0203\20\u01ff\26\0\2\u01ff\1\0\2\u01ff"+
    "\2\0\5\u01ff\1\u0204\23\u01ff\26\0\2\u01ff\1\0\2\u01ff"+
    "\2\0\7\u01ff\1\u0205\21\u01ff\26\0\2\u01ff\1\0\1\u01ff"+
    "\1\u0206\2\0\31\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0"+
    "\10\u01ff\1\u0207\20\u01ff\26\0\2\u01ff\1\0\1\u01ff\1\u0208"+
    "\2\0\31\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0\23\u01ff"+
    "\1\u0209\5\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0\13\u01ff"+
    "\1\u020a\15\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0\24\u01ff"+
    "\1\u020b\4\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0\5\u01ff"+
    "\1\u020c\23\u01ff\26\0\2\u01ff\1\0\1\u01ff\1\u020d\2\0"+
    "\31\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0\20\u01ff\1\u020e"+
    "\10\u01ff\26\0\2\u01ff\1\0\2\u01ff\2\0\20\u01ff\1\u020f"+
    "\10\u01ff\26\0\2\u01ff\1\0\1\u01ff\1\u0210\2\0\31\u01ff"+
    "\26\0\2\u01ff\1\0\2\u01ff\2\0\5\u01ff\1\u0211\23\u01ff"+
    "\26\0\2\u01ff\1\0\2\u01ff\2\0\5\u01ff\1\u0212\23\u01ff"+
    "\26\0\2\u01ff\1\0\2\u01ff\2\0\10\u01ff\1\u0213\20\u01ff"+
    "\26\0\2\u0214\1\0\2\u0214\2\0\31\u0214\26\0\2\u0214"+
    "\1\0\2\u0214\2\0\20\u0214\1\u0215\10\u0214\26\0\2\u0214"+
    "\1\0\2\u0216\2\0\1\u0214\3\u0216\1\u0214\1\u0216\10\u0214"+
    "\1\u0216\12\u0214\26\0\2\u0214\1\0\2\u0214\2\0\11\u0214"+
    "\1\u0217\17\u0214\26\0\2\u0214\1\0\2\u0214\2\0\10\u0214"+
    "\1\u0218\20\u0214\26\0\2\u0214\1\0\2\u0214\2\0\5\u0214"+
    "\1\u0219\23\u0214\26\0\2\u0214\1\0\2\u0214\2\0\1\u0214"+
    "\1\u021a\27\u0214\26\0\2\u0214\1\0\2\u0214\2\0\16\u0214"+
    "\1\u021b\12\u0214\26\0\2\u0214\1\0\2\u0214\2\0\20\u0214"+
    "\1\u021c\10\u0214\26\0\2\u0214\1\0\2\u0214\2\0\3\u0214"+
    "\1\u021d\25\u0214\26\0\2\u0214\1\0\2\u0214\2\0\3\u0214"+
    "\1\u021e\7\u0214\1\u021f\15\u0214\26\0\2\u0214\1\0\2\u0214"+
    "\2\0\7\u0214\1\u0220\21\u0214\26\0\2\u0221\1\0\2\u0221"+
    "\2\0\31\u0221\26\0\2\u0221\1\0\2\u0221\2\0\3\u0221"+
    "\1\u0222\25\u0221\26\0\2\u0221\1\0\2\u0223\2\0\1\u0221"+
    "\3\u0223\1\u0221\1\u0223\10\u0221\1\u0223\12\u0221\26\0\2\u0221"+
    "\1\0\2\u0221\2\0\7\u0221\1\u0224\21\u0221\26\0\2\u0221"+
    "\1\0\2\u0221\2\0\3\u0221\1\u0225\25\u0221\26\0\2\u0221"+
    "\1\0\1\u0221\1\u0226\2\0\31\u0221\26\0\2\u0221\1\0"+
    "\2\u0221\2\0\10\u0221\1\u0227\20\u0221\26\0\2\u0221\1\0"+
    "\2\u0221\2\0\20\u0221\1\u0228\10\u0221\26\0\2\u0221\1\0"+
    "\2\u0221\2\0\20\u0221\1\u0229\10\u0221\26\0\2\u0221\1\0"+
    "\2\u0221\2\0\10\u0221\1\u022a\20\u0221\26\0\2\u022b\1\0"+
    "\2\u022b\2\0\31\u022b\26\0\2\u022b\1\0\2\u022b\2\0"+
    "\15\u022b\1\u022c\13\u022b\26\0\2\u022b\1\0\2\u022d\2\0"+
    "\1\u022b\3\u022d\1\u022b\1\u022d\10\u022b\1\u022d\12\u022b\26\0"+
    "\2\u022b\1\0\2\u022b\2\0\4\u022b\1\u022e\24\u022b\26\0"+
    "\2\u022b\1\0\2\u022b\2\0\16\u022b\1\u022f\12\u022b\26\0"+
    "\2\u022b\1\0\2\u022b\2\0\11\u022b\1\u0230\17\u022b\26\0"+
    "\2\u022b\1\0\2\u022b\2\0\11\u022b\1\u0231\17\u022b\26\0"+
    "\2\u022b\1\0\2\u022b\2\0\11\u022b\1\u0232\17\u022b\26\0"+
    "\2\u0233\1\0\2\u0233\2\0\31\u0233\26\0\2\u0233\1\0"+
    "\2\u0234\2\0\1\u0233\3\u0234\1\u0233\1\u0234\10\u0233\1\u0234"+
    "\12\u0233\26\0\2\u0233\1\0\1\u0233\1\u0235\2\0\31\u0233"+
    "\26\0\2\u0233\1\0\2\u0233\2\0\4\u0233\1\u0236\24\u0233"+
    "\26\0\2\u0233\1\0\2\u0233\2\0\7\u0233\1\u0237\21\u0233"+
    "\26\0\2\u0233\1\0\2\u0233\2\0\7\u0233\1\u0238\21\u0233"+
    "\26\0\2\u0239\1\0\2\u0239\2\0\31\u0239\26\0\2\u0239"+
    "\1\0\2\u023a\2\0\1\u0239\3\u023a\1\u0239\1\u023a\10\u0239"+
    "\1\u023a\12\u0239\26\0\2\u0239\1\0\2\u0239\2\0\25\u0239"+
    "\1\u023b\3\u0239\26\0\2\u0239\1\0\2\u0239\2\0\4\u0239"+
    "\1\u023c\24\u0239\26\0\2\u0239\1\0\2\u0239\2\0\4\u0239"+
    "\1\u023d\24\u0239\26\0\2\u023e\1\0\2\u023e\2\0\31\u023e"+
    "\26\0\2\u023e\1\0\2\u023f\2\0\1\u023e\3\u023f\1\u023e"+
    "\1\u023f\10\u023e\1\u023f\12\u023e\26\0\2\u0240\1\0\2\u0240"+
    "\2\0\31\u0240\26\0\2\u0240\1\0\2\u0241\2\0\1\u0240"+
    "\3\u0241\1\u0240\1\u0241\10\u0240\1\u0241\12\u0240\26\0\2\u0242"+
    "\1\0\2\u0242\2\0\31\u0242\26\0\2\u0242\1\0\2\u0243"+
    "\2\0\1\u0242\3\u0243\1\u0242\1\u0243\10\u0242\1\u0243\12\u0242"+
    "\26\0\2\u0244\1\0\2\u0244\2\0\31\u0244\26\0\2\u0244"+
    "\1\0\2\u0245\2\0\1\u0244\3\u0245\1\u0244\1\u0245\10\u0244"+
    "\1\u0245\12\u0244\26\0\2\u0246\1\0\2\u0246\2\0\31\u0246"+
    "\26\0\2\u0246\1\0\2\u0247\2\0\1\u0246\3\u0247\1\u0246"+
    "\1\u0247\10\u0246\1\u0247\12\u0246\26\0\2\u0248\1\0\2\u0248"+
    "\2\0\31\u0248\26\0\2\u0248\1\0\2\u0249\2\0\1\u0248"+
    "\3\u0249\1\u0248\1\u0249\10\u0248\1\u0249\12\u0248\26\0\2\u024a"+
    "\1\0\2\u024a\2\0\31\u024a\26\0\2\u024a\1\0\2\u024b"+
    "\2\0\1\u024a\3\u024b\1\u024a\1\u024b\10\u024a\1\u024b\12\u024a"+
    "\26\0\2\u024c\1\0\2\u024c\2\0\31\u024c\26\0\2\u024c"+
    "\1\0\2\u024d\2\0\1\u024c\3\u024d\1\u024c\1\u024d\10\u024c"+
    "\1\u024d\12\u024c\26\0\2\u024e\1\0\2\u024e\2\0\31\u024e"+
    "\26\0\2\u024e\1\0\2\u024f\2\0\1\u024e\3\u024f\1\u024e"+
    "\1\u024f\10\u024e\1\u024f\12\u024e\26\0\2\u0250\1\0\2\u0250"+
    "\2\0\31\u0250\26\0\2\u0250\1\0\2\u0251\2\0\1\u0250"+
    "\3\u0251\1\u0250\1\u0251\10\u0250\1\u0251\12\u0250\26\0\2\u0252"+
    "\1\0\2\u0252\2\0\31\u0252\26\0\2\u0252\1\0\2\u0253"+
    "\2\0\1\u0252\3\u0253\1\u0252\1\u0253\10\u0252\1\u0253\12\u0252"+
    "\26\0\2\u0254\1\0\2\u0254\2\0\31\u0254\26\0\2\u0254"+
    "\1\0\2\u0255\2\0\1\u0254\3\u0255\1\u0254\1\u0255\10\u0254"+
    "\1\u0255\12\u0254\26\0\2\u0256\1\0\2\u0256\2\0\31\u0256"+
    "\26\0\2\u0256\1\0\2\u0257\2\0\1\u0256\3\u0257\1\u0256"+
    "\1\u0257\10\u0256\1\u0257\12\u0256\26\0\2\u0258\1\0\2\u0258"+
    "\2\0\31\u0258\26\0\2\u0258\1\0\2\u0259\2\0\1\u0258"+
    "\3\u0259\1\u0258\1\u0259\10\u0258\1\u0259\12\u0258\26\0\2\u025a"+
    "\1\0\2\u025a\2\0\31\u025a\26\0\2\u025a\1\0\2\u025b"+
    "\2\0\1\u025a\3\u025b\1\u025a\1\u025b\10\u025a\1\u025b\12\u025a"+
    "\26\0\2\u025c\1\0\2\u025c\2\0\31\u025c\26\0\2\u025c"+
    "\1\0\2\u025d\2\0\1\u025c\3\u025d\1\u025c\1\u025d\10\u025c"+
    "\1\u025d\12\u025c\26\0\2\u025e\1\0\2\u025e\2\0\31\u025e"+
    "\26\0\2\u025e\1\0\2\u025f\2\0\1\u025e\3\u025f\1\u025e"+
    "\1\u025f\10\u025e\1\u025f\12\u025e\26\0\2\u0260\1\0\2\u0260"+
    "\2\0\31\u0260\26\0\2\u0260\1\0\2\u0261\2\0\1\u0260"+
    "\3\u0261\1\u0260\1\u0261\10\u0260\1\u0261\12\u0260\26\0\2\u0262"+
    "\1\0\2\u0262\2\0\31\u0262\26\0\2\u0262\1\0\2\u0263"+
    "\2\0\1\u0262\3\u0263\1\u0262\1\u0263\10\u0262\1\u0263\12\u0262"+
    "\26\0\2\u0264\1\0\2\u0264\2\0\31\u0264\26\0\2\u0264"+
    "\1\0\2\u0265\2\0\1\u0264\3\u0265\1\u0264\1\u0265\10\u0264"+
    "\1\u0265\12\u0264\26\0\2\u0266\1\0\2\u0266\2\0\31\u0266"+
    "\26\0\2\u0266\1\0\2\u0267\2\0\1\u0266\3\u0267\1\u0266"+
    "\1\u0267\10\u0266\1\u0267\12\u0266\26\0\2\u0268\1\0\2\u0268"+
    "\2\0\31\u0268\26\0\2\u0268\1\0\2\u0269\2\0\1\u0268"+
    "\3\u0269\1\u0268\1\u0269\10\u0268\1\u0269\12\u0268\26\0\2\u026a"+
    "\1\0\2\u026a\2\0\31\u026a\26\0\2\u026a\1\0\2\u026b"+
    "\2\0\1\u026a\3\u026b\1\u026a\1\u026b\10\u026a\1\u026b\12\u026a"+
    "\26\0\2\u026c\1\0\2\u026c\2\0\31\u026c\26\0\2\u026c"+
    "\1\0\2\u026d\2\0\1\u026c\3\u026d\1\u026c\1\u026d\10\u026c"+
    "\1\u026d\12\u026c\26\0\2\u026e\1\0\2\u026e\2\0\31\u026e"+
    "\26\0\2\u026e\1\0\2\u026f\2\0\1\u026e\3\u026f\1\u026e"+
    "\1\u026f\10\u026e\1\u026f\12\u026e\26\0\2\u0270\1\0\2\u0270"+
    "\2\0\31\u0270\26\0\2\u0270\1\0\2\u0271\2\0\1\u0270"+
    "\3\u0271\1\u0270\1\u0271\10\u0270\1\u0271\12\u0270\26\0\2\u0272"+
    "\1\0\2\u0272\2\0\31\u0272\26\0\2\u0272\1\0\2\u0273"+
    "\2\0\1\u0272\3\u0273\1\u0272\1\u0273\10\u0272\1\u0273\12\u0272"+
    "\26\0\2\u0274\1\0\2\u0274\2\0\31\u0274\26\0\2\u0274"+
    "\1\0\2\u0275\2\0\1\u0274\3\u0275\1\u0274\1\u0275\10\u0274"+
    "\1\u0275\12\u0274\26\0\2\u0276\1\0\2\u0276\2\0\31\u0276"+
    "\26\0\2\u0276\1\0\2\u0277\2\0\1\u0276\3\u0277\1\u0276"+
    "\1\u0277\10\u0276\1\u0277\12\u0276\26\0\2\u0278\1\0\2\u0278"+
    "\2\0\31\u0278\26\0\2\u0278\1\0\2\u0279\2\0\1\u0278"+
    "\3\u0279\1\u0278\1\u0279\10\u0278\1\u0279\12\u0278\26\0\2\u027a"+
    "\1\0\2\u027a\2\0\31\u027a\26\0\2\u027a\1\0\2\u027b"+
    "\2\0\1\u027a\3\u027b\1\u027a\1\u027b\10\u027a\1\u027b\12\u027a"+
    "\26\0\2\u027c\1\0\2\u027c\2\0\31\u027c\26\0\2\u027c"+
    "\1\0\2\u027d\2\0\1\u027c\3\u027d\1\u027c\1\u027d\10\u027c"+
    "\1\u027d\12\u027c\26\0\2\u027e\1\0\2\u027e\2\0\31\u027e"+
    "\26\0\2\u027e\1\0\2\u027f\2\0\1\u027e\3\u027f\1\u027e"+
    "\1\u027f\10\u027e\1\u027f\12\u027e\26\0\2\u0280\1\0\2\u0280"+
    "\2\0\31\u0280\26\0\2\u0280\1\0\2\u0281\2\0\1\u0280"+
    "\3\u0281\1\u0280\1\u0281\10\u0280\1\u0281\12\u0280\26\0\2\u0282"+
    "\1\0\2\u0282\2\0\31\u0282\26\0\2\u0282\1\0\2\u0283"+
    "\2\0\1\u0282\3\u0283\1\u0282\1\u0283\10\u0282\1\u0283\12\u0282"+
    "\26\0\2\u0284\1\0\2\u0284\2\0\31\u0284\26\0\2\u0284"+
    "\1\0\2\u0285\2\0\1\u0284\3\u0285\1\u0284\1\u0285\10\u0284"+
    "\1\u0285\12\u0284\26\0\2\u0286\1\0\2\u0286\2\0\31\u0286"+
    "\26\0\2\u0286\1\0\2\u0287\2\0\1\u0286\3\u0287\1\u0286"+
    "\1\u0287\10\u0286\1\u0287\12\u0286\26\0\2\u0288\1\0\2\u0288"+
    "\2\0\31\u0288\26\0\2\u0288\1\0\2\u0289\2\0\1\u0288"+
    "\3\u0289\1\u0288\1\u0289\10\u0288\1\u0289\12\u0288\26\0\2\u028a"+
    "\1\0\2\u028a\2\0\31\u028a\26\0\2\u028a\1\0\2\u028b"+
    "\2\0\1\u028a\3\u028b\1\u028a\1\u028b\10\u028a\1\u028b\12\u028a"+
    "\26\0\2\u028c\1\0\2\u028c\2\0\31\u028c\26\0\2\u028c"+
    "\1\0\2\u028d\2\0\1\u028c\3\u028d\1\u028c\1\u028d\10\u028c"+
    "\1\u028d\12\u028c\26\0\2\u028e\1\0\2\u028e\2\0\31\u028e"+
    "\26\0\2\u028e\1\0\2\u028f\2\0\1\u028e\3\u028f\1\u028e"+
    "\1\u028f\10\u028e\1\u028f\12\u028e\26\0\2\u0290\1\0\2\u0290"+
    "\2\0\31\u0290\26\0\2\u0290\1\0\2\u0291\2\0\1\u0290"+
    "\3\u0291\1\u0290\1\u0291\10\u0290\1\u0291\12\u0290\26\0\2\u0292"+
    "\1\0\2\u0292\2\0\31\u0292\26\0\2\u0292\1\0\2\u0293"+
    "\2\0\1\u0292\3\u0293\1\u0292\1\u0293\10\u0292\1\u0293\12\u0292"+
    "\26\0\2\u0294\1\0\2\u0294\2\0\31\u0294\26\0\2\u0294"+
    "\1\0\2\u0295\2\0\1\u0294\3\u0295\1\u0294\1\u0295\10\u0294"+
    "\1\u0295\12\u0294\26\0\2\u0296\1\0\2\u0296\2\0\31\u0296"+
    "\26\0\2\u0296\1\0\2\u0297\2\0\1\u0296\3\u0297\1\u0296"+
    "\1\u0297\10\u0296\1\u0297\12\u0296\26\0\2\u0298\1\0\2\u0298"+
    "\2\0\31\u0298\26\0\2\u0298\1\0\2\u0299\2\0\1\u0298"+
    "\3\u0299\1\u0298\1\u0299\10\u0298\1\u0299\12\u0298\26\0\2\u029a"+
    "\1\0\2\u029a\2\0\31\u029a\26\0\2\u029a\1\0\2\u029b"+
    "\2\0\1\u029a\3\u029b\1\u029a\1\u029b\10\u029a\1\u029b\12\u029a"+
    "\26\0\2\u029c\1\0\2\u029c\2\0\31\u029c\26\0\2\u029c"+
    "\1\0\2\u029d\2\0\1\u029c\3\u029d\1\u029c\1\u029d\10\u029c"+
    "\1\u029d\12\u029c\26\0\2\u029e\1\0\2\u029e\2\0\31\u029e"+
    "\26\0\2\u029e\1\0\2\u029f\2\0\1\u029e\3\u029f\1\u029e"+
    "\1\u029f\10\u029e\1\u029f\12\u029e\26\0\2\u02a0\1\0\2\u02a0"+
    "\2\0\31\u02a0\26\0\2\u02a0\1\0\2\u02a1\2\0\1\u02a0"+
    "\3\u02a1\1\u02a0\1\u02a1\10\u02a0\1\u02a1\12\u02a0\26\0\2\u02a2"+
    "\1\0\2\u02a2\2\0\31\u02a2\26\0\2\u02a2\1\0\2\u02a3"+
    "\2\0\1\u02a2\3\u02a3\1\u02a2\1\u02a3\10\u02a2\1\u02a3\12\u02a2"+
    "\26\0\2\u02a4\1\0\2\u02a4\2\0\31\u02a4\26\0\2\u02a4"+
    "\1\0\2\u02a5\2\0\1\u02a4\3\u02a5\1\u02a4\1\u02a5\10\u02a4"+
    "\1\u02a5\12\u02a4\26\0\2\u02a6\1\0\2\u02a6\2\0\31\u02a6"+
    "\26\0\2\u02a6\1\0\2\u02a7\2\0\1\u02a6\3\u02a7\1\u02a6"+
    "\1\u02a7\10\u02a6\1\u02a7\12\u02a6\26\0\2\u02a8\1\0\2\u02a8"+
    "\2\0\31\u02a8\26\0\2\u02a8\1\0\2\u02a9\2\0\1\u02a8"+
    "\3\u02a9\1\u02a8\1\u02a9\10\u02a8\1\u02a9\12\u02a8\26\0\2\u02aa"+
    "\1\0\2\u02aa\2\0\31\u02aa\26\0\2\u02aa\1\0\2\u02ab"+
    "\2\0\1\u02aa\3\u02ab\1\u02aa\1\u02ab\10\u02aa\1\u02ab\12\u02aa"+
    "\26\0\2\u02ac\1\0\2\u02ac\2\0\31\u02ac\26\0\2\u02ac"+
    "\1\0\2\u02ad\2\0\1\u02ac\3\u02ad\1\u02ac\1\u02ad\10\u02ac"+
    "\1\u02ad\12\u02ac\26\0\2\u02ae\1\0\2\u02ae\2\0\31\u02ae"+
    "\26\0\2\u02ae\1\0\2\u02af\2\0\1\u02ae\3\u02af\1\u02ae"+
    "\1\u02af\10\u02ae\1\u02af\12\u02ae\26\0\2\u02b0\1\0\2\u02b0"+
    "\2\0\31\u02b0\26\0\2\u02b0\1\0\2\u02b1\2\0\1\u02b0"+
    "\3\u02b1\1\u02b0\1\u02b1\10\u02b0\1\u02b1\12\u02b0\26\0\2\u02b2"+
    "\1\0\2\u02b2\2\0\31\u02b2\26\0\2\u02b2\1\0\2\u02b3"+
    "\2\0\1\u02b2\3\u02b3\1\u02b2\1\u02b3\10\u02b2\1\u02b3\12\u02b2"+
    "\26\0\2\u02b4\1\0\2\u02b4\2\0\31\u02b4\26\0\2\u02b4"+
    "\1\0\2\u02b5\2\0\1\u02b4\3\u02b5\1\u02b4\1\u02b5\10\u02b4"+
    "\1\u02b5\12\u02b4\26\0\2\u02b6\1\0\2\u02b6\2\0\31\u02b6"+
    "\26\0\2\u02b6\1\0\2\u02b7\2\0\1\u02b6\3\u02b7\1\u02b6"+
    "\1\u02b7\10\u02b6\1\u02b7\12\u02b6\26\0\2\u02b8\1\0\2\u02b8"+
    "\2\0\31\u02b8\26\0\2\u02b8\1\0\2\u02b9\2\0\1\u02b8"+
    "\3\u02b9\1\u02b8\1\u02b9\10\u02b8\1\u02b9\12\u02b8\26\0\2\u02ba"+
    "\1\0\2\u02ba\2\0\31\u02ba\26\0\2\u02ba\1\0\2\u02bb"+
    "\2\0\1\u02ba\3\u02bb\1\u02ba\1\u02bb\10\u02ba\1\u02bb\12\u02ba"+
    "\26\0\2\u02bc\1\0\2\u02bc\2\0\31\u02bc\26\0\2\u02bc"+
    "\1\0\2\u02bd\2\0\1\u02bc\3\u02bd\1\u02bc\1\u02bd\10\u02bc"+
    "\1\u02bd\12\u02bc\26\0\2\u02be\1\0\2\u02be\2\0\31\u02be"+
    "\26\0\2\u02be\1\0\2\u02bf\2\0\1\u02be\3\u02bf\1\u02be"+
    "\1\u02bf\10\u02be\1\u02bf\12\u02be\26\0\2\u02c0\1\0\2\u02c0"+
    "\2\0\31\u02c0\26\0\2\u02c0\1\0\2\u02c1\2\0\1\u02c0"+
    "\3\u02c1\1\u02c0\1\u02c1\10\u02c0\1\u02c1\12\u02c0\26\0\2\u02c2"+
    "\1\0\2\u02c2\2\0\31\u02c2\26\0\2\u02c2\1\0\2\u02c3"+
    "\2\0\1\u02c2\3\u02c3\1\u02c2\1\u02c3\10\u02c2\1\u02c3\12\u02c2"+
    "\26\0\2\u02c4\1\0\2\u02c4\2\0\31\u02c4\26\0\2\u02c4"+
    "\1\0\2\u02c5\2\0\1\u02c4\3\u02c5\1\u02c4\1\u02c5\10\u02c4"+
    "\1\u02c5\12\u02c4\26\0\2\u02c6\1\0\2\u02c6\2\0\31\u02c6"+
    "\26\0\2\u02c6\1\0\2\u02c7\2\0\1\u02c6\3\u02c7\1\u02c6"+
    "\1\u02c7\10\u02c6\1\u02c7\12\u02c6\26\0\2\u02c8\1\0\2\u02c8"+
    "\2\0\31\u02c8\26\0\2\u02c8\1\0\2\u02c9\2\0\1\u02c8"+
    "\3\u02c9\1\u02c8\1\u02c9\10\u02c8\1\u02c9\12\u02c8\26\0\2\u02ca"+
    "\1\0\2\u02ca\2\0\31\u02ca\26\0\2\u02ca\1\0\2\u02cb"+
    "\2\0\1\u02ca\3\u02cb\1\u02ca\1\u02cb\10\u02ca\1\u02cb\12\u02ca"+
    "\26\0\2\u02cc\1\0\2\u02cc\2\0\31\u02cc\26\0\2\u02cc"+
    "\1\0\2\u02cd\2\0\1\u02cc\3\u02cd\1\u02cc\1\u02cd\10\u02cc"+
    "\1\u02cd\12\u02cc\26\0\2\u02ce\1\0\2\u02ce\2\0\31\u02ce"+
    "\26\0\2\u02ce\1\0\2\u02cf\2\0\1\u02ce\3\u02cf\1\u02ce"+
    "\1\u02cf\10\u02ce\1\u02cf\12\u02ce\26\0\2\u02d0\1\0\2\u02d0"+
    "\2\0\31\u02d0\26\0\2\u02d0\1\0\2\u02d1\2\0\1\u02d0"+
    "\3\u02d1\1\u02d0\1\u02d1\10\u02d0\1\u02d1\12\u02d0\26\0\2\u02d2"+
    "\1\0\2\u02d2\2\0\31\u02d2\26\0\2\u02d2\1\0\2\u02d3"+
    "\2\0\1\u02d2\3\u02d3\1\u02d2\1\u02d3\10\u02d2\1\u02d3\12\u02d2"+
    "\26\0\2\u02d4\1\0\2\u02d4\2\0\31\u02d4\26\0\2\u02d4"+
    "\1\0\2\u02d5\2\0\1\u02d4\3\u02d5\1\u02d4\1\u02d5\10\u02d4"+
    "\1\u02d5\12\u02d4\26\0\2\u02d6\1\0\2\u02d6\2\0\31\u02d6"+
    "\26\0\2\u02d6\1\0\2\u02d7\2\0\1\u02d6\3\u02d7\1\u02d6"+
    "\1\u02d7\10\u02d6\1\u02d7\12\u02d6\26\0\2\u02d8\1\0\2\u02d8"+
    "\2\0\31\u02d8\26\0\2\u02d8\1\0\2\u02d9\2\0\1\u02d8"+
    "\3\u02d9\1\u02d8\1\u02d9\10\u02d8\1\u02d9\12\u02d8\26\0\2\u02da"+
    "\1\0\2\u02da\2\0\31\u02da\26\0\2\u02da\1\0\2\u02db"+
    "\2\0\1\u02da\3\u02db\1\u02da\1\u02db\10\u02da\1\u02db\12\u02da"+
    "\26\0\2\u02dc\1\0\2\u02dc\2\0\31\u02dc\26\0\2\u02dc"+
    "\1\0\2\u02dd\2\0\1\u02dc\3\u02dd\1\u02dc\1\u02dd\10\u02dc"+
    "\1\u02dd\12\u02dc\26\0\2\u02de\1\0\2\u02de\2\0\31\u02de"+
    "\26\0\2\u02de\1\0\2\u02df\2\0\1\u02de\3\u02df\1\u02de"+
    "\1\u02df\10\u02de\1\u02df\12\u02de\26\0\2\u02e0\1\0\2\u02e0"+
    "\2\0\31\u02e0\26\0\2\u02e0\1\0\2\u02e1\2\0\1\u02e0"+
    "\3\u02e1\1\u02e0\1\u02e1\10\u02e0\1\u02e1\12\u02e0\26\0\2\u02e2"+
    "\1\0\2\u02e2\2\0\31\u02e2\26\0\2\u02e2\1\0\2\u02e3"+
    "\2\0\1\u02e2\3\u02e3\1\u02e2\1\u02e3\10\u02e2\1\u02e3\12\u02e2"+
    "\26\0\2\u02e4\1\0\2\u02e4\2\0\31\u02e4\26\0\2\u02e4"+
    "\1\0\2\u02e5\2\0\1\u02e4\3\u02e5\1\u02e4\1\u02e5\10\u02e4"+
    "\1\u02e5\12\u02e4\26\0\2\u02e6\1\0\2\u02e6\2\0\31\u02e6"+
    "\26\0\2\u02e6\1\0\2\u02e7\2\0\1\u02e6\3\u02e7\1\u02e6"+
    "\1\u02e7\10\u02e6\1\u02e7\12\u02e6\26\0\2\u02e8\1\0\2\u02e8"+
    "\2\0\31\u02e8\26\0\2\u02e8\1\0\2\u02e9\2\0\1\u02e8"+
    "\3\u02e9\1\u02e8\1\u02e9\10\u02e8\1\u02e9\12\u02e8\26\0\2\u02ea"+
    "\1\0\2\u02ea\2\0\31\u02ea\26\0\2\u02ea\1\0\2\u02eb"+
    "\2\0\1\u02ea\3\u02eb\1\u02ea\1\u02eb\10\u02ea\1\u02eb\12\u02ea"+
    "\26\0\2\u02ec\1\0\2\u02ec\2\0\31\u02ec\26\0\2\u02ec"+
    "\1\0\2\u02ed\2\0\1\u02ec\3\u02ed\1\u02ec\1\u02ed\10\u02ec"+
    "\1\u02ed\12\u02ec\26\0\2\u02ee\1\0\2\u02ee\2\0\31\u02ee"+
    "\26\0\2\u02ee\1\0\2\u02ef\2\0\1\u02ee\3\u02ef\1\u02ee"+
    "\1\u02ef\10\u02ee\1\u02ef\12\u02ee\26\0\2\u02f0\1\0\2\u02f0"+
    "\2\0\31\u02f0\26\0\2\u02f0\1\0\2\u02f1\2\0\1\u02f0"+
    "\3\u02f1\1\u02f0\1\u02f1\10\u02f0\1\u02f1\12\u02f0\26\0\2\u02f2"+
    "\1\0\2\u02f2\2\0\31\u02f2\26\0\2\u02f2\1\0\2\u02f3"+
    "\2\0\1\u02f2\3\u02f3\1\u02f2\1\u02f3\10\u02f2\1\u02f3\12\u02f2"+
    "\26\0\2\u02f4\1\0\2\u02f4\2\0\31\u02f4\26\0\2\u02f4"+
    "\1\0\2\u02f5\2\0\1\u02f4\3\u02f5\1\u02f4\1\u02f5\10\u02f4"+
    "\1\u02f5\12\u02f4\26\0\2\u02f6\1\0\2\u02f6\2\0\31\u02f6"+
    "\26\0\2\u02f6\1\0\2\u02f7\2\0\1\u02f6\3\u02f7\1\u02f6"+
    "\1\u02f7\10\u02f6\1\u02f7\12\u02f6\26\0\2\u02f8\1\0\2\u02f8"+
    "\2\0\31\u02f8\26\0\2\u02f8\1\0\2\u02f9\2\0\1\u02f8"+
    "\3\u02f9\1\u02f8\1\u02f9\10\u02f8\1\u02f9\12\u02f8\26\0\2\u02fa"+
    "\1\0\2\u02fa\2\0\31\u02fa\26\0\2\u02fa\1\0\2\u02fb"+
    "\2\0\1\u02fa\3\u02fb\1\u02fa\1\u02fb\10\u02fa\1\u02fb\12\u02fa"+
    "\26\0\2\u02fc\1\0\2\u02fc\2\0\31\u02fc\26\0\2\u02fc"+
    "\1\0\2\u02fd\2\0\1\u02fc\3\u02fd\1\u02fc\1\u02fd\10\u02fc"+
    "\1\u02fd\12\u02fc\26\0\2\u02fe\1\0\2\u02fe\2\0\31\u02fe"+
    "\26\0\2\u02fe\1\0\2\u02ff\2\0\1\u02fe\3\u02ff\1\u02fe"+
    "\1\u02ff\10\u02fe\1\u02ff\12\u02fe\26\0\2\u0300\1\0\2\u0300"+
    "\2\0\31\u0300\26\0\2\u0300\1\0\2\u0301\2\0\1\u0300"+
    "\3\u0301\1\u0300\1\u0301\10\u0300\1\u0301\12\u0300\26\0\2\u0302"+
    "\1\0\2\u0302\2\0\31\u0302\26\0\2\u0302\1\0\2\u0303"+
    "\2\0\1\u0302\3\u0303\1\u0302\1\u0303\10\u0302\1\u0303\12\u0302"+
    "\26\0\2\u0304\1\0\2\u0304\2\0\31\u0304\26\0\2\u0304"+
    "\1\0\2\u0305\2\0\1\u0304\3\u0305\1\u0304\1\u0305\10\u0304"+
    "\1\u0305\12\u0304\26\0\2\u0306\1\0\2\u0306\2\0\31\u0306"+
    "\26\0\2\u0306\1\0\2\u0307\2\0\1\u0306\3\u0307\1\u0306"+
    "\1\u0307\10\u0306\1\u0307\12\u0306\26\0\2\u0308\1\0\2\u0308"+
    "\2\0\31\u0308\26\0\2\u0308\1\0\2\u0309\2\0\1\u0308"+
    "\3\u0309\1\u0308\1\u0309\10\u0308\1\u0309\12\u0308\26\0\2\u030a"+
    "\1\0\2\u030a\2\0\31\u030a\26\0\2\u030a\1\0\2\u030b"+
    "\2\0\1\u030a\3\u030b\1\u030a\1\u030b\10\u030a\1\u030b\12\u030a"+
    "\26\0\2\u030c\1\0\2\u030c\2\0\31\u030c\26\0\2\u030c"+
    "\1\0\2\u030d\2\0\1\u030c\3\u030d\1\u030c\1\u030d\10\u030c"+
    "\1\u030d\12\u030c\26\0\2\u030e\1\0\2\u030e\2\0\31\u030e"+
    "\26\0\2\u030e\1\0\2\u030f\2\0\1\u030e\3\u030f\1\u030e"+
    "\1\u030f\10\u030e\1\u030f\12\u030e\26\0\2\u0310\1\0\2\u0310"+
    "\2\0\31\u0310\26\0\2\u0310\1\0\2\u0311\2\0\1\u0310"+
    "\3\u0311\1\u0310\1\u0311\10\u0310\1\u0311\12\u0310\26\0\2\u0312"+
    "\1\0\2\u0312\2\0\31\u0312\26\0\2\u0312\1\0\2\u0313"+
    "\2\0\1\u0312\3\u0313\1\u0312\1\u0313\10\u0312\1\u0313\12\u0312"+
    "\26\0\2\u0314\1\0\2\u0314\2\0\31\u0314\26\0\2\u0314"+
    "\1\0\2\u0315\2\0\1\u0314\3\u0315\1\u0314\1\u0315\10\u0314"+
    "\1\u0315\12\u0314\26\0\2\u0316\1\0\2\u0316\2\0\31\u0316"+
    "\26\0\2\u0316\1\0\2\u0317\2\0\1\u0316\3\u0317\1\u0316"+
    "\1\u0317\10\u0316\1\u0317\12\u0316\26\0\2\u0318\1\0\2\u0318"+
    "\2\0\31\u0318\26\0\2\u0318\1\0\2\u0319\2\0\1\u0318"+
    "\3\u0319\1\u0318\1\u0319\10\u0318\1\u0319\12\u0318\26\0\2\u031a"+
    "\1\0\2\u031a\2\0\31\u031a\26\0\2\u031a\1\0\2\u031b"+
    "\2\0\1\u031a\3\u031b\1\u031a\1\u031b\10\u031a\1\u031b\12\u031a"+
    "\26\0\2\u031c\1\0\2\u031c\2\0\31\u031c\26\0\2\u031c"+
    "\1\0\2\u031d\2\0\1\u031c\3\u031d\1\u031c\1\u031d\10\u031c"+
    "\1\u031d\12\u031c\26\0\2\u031e\1\0\2\u031e\2\0\31\u031e"+
    "\26\0\2\u031e\1\0\2\u031f\2\0\1\u031e\3\u031f\1\u031e"+
    "\1\u031f\10\u031e\1\u031f\12\u031e\31\0\2\u031f\3\0\3\u031f"+
    "\1\0\1\u031f\10\0\1\u031f\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\2\11\2\1\2\11\5\1\1\11\26\1"+
    "\6\11\3\1\4\11\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\11\4\1\1\11\77\1\4\11\2\1\1\11"+
    "\6\1\1\0\132\1\1\0\u0237\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[799];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _PascalLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PascalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1806) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 47: 
          { return ASM;
          }
        case 147: break;
        case 3: 
          { return DIV;
          }
        case 148: break;
        case 73: 
          { return FALSE;
          }
        case 149: break;
        case 90: 
          { return DISPID;
          }
        case 150: break;
        case 133: 
          { return PROTECTED;
          }
        case 151: break;
        case 94: 
          { return INLINE;
          }
        case 152: break;
        case 24: 
          { return CHARNUM;
          }
        case 153: break;
        case 143: 
          { return DISPINTERFACE;
          }
        case 154: break;
        case 14: 
          { return SEMI;
          }
        case 155: break;
        case 98: 
          { return STRICT;
          }
        case 156: break;
        case 114: 
          { return PRIVATE;
          }
        case 157: break;
        case 129: 
          { return REFERENCE;
          }
        case 158: break;
        case 112: 
          { return POINTER;
          }
        case 159: break;
        case 34: 
          { return ON;
          }
        case 160: break;
        case 27: 
          { return NUMBER_BIN;
          }
        case 161: break;
        case 106: 
          { return DEFAULT;
          }
        case 162: break;
        case 56: 
          { return SHR;
          }
        case 163: break;
        case 87: 
          { return EXCEPT;
          }
        case 164: break;
        case 67: 
          { return THEN;
          }
        case 165: break;
        case 11: 
          { return DOT;
          }
        case 166: break;
        case 19: 
          { return LT;
          }
        case 167: break;
        case 48: 
          { return NEW;
          }
        case 168: break;
        case 123: 
          { return SAFECALL;
          }
        case 169: break;
        case 37: 
          { return IN;
          }
        case 170: break;
        case 44: 
          { return END;
          }
        case 171: break;
        case 75: 
          { return BEGIN;
          }
        case 172: break;
        case 101: 
          { return PACKED;
          }
        case 173: break;
        case 134: 
          { return PUBLISHED;
          }
        case 174: break;
        case 139: 
          { return REINTRODUCE;
          }
        case 175: break;
        case 117: 
          { return ABSOLUTE;
          }
        case 176: break;
        case 12: 
          { return HEXNUM;
          }
        case 177: break;
        case 131: 
          { return INTERFACE;
          }
        case 178: break;
        case 6: 
          { return RPAREN;
          }
        case 179: break;
        case 104: 
          { return FORWARD;
          }
        case 180: break;
        case 105: 
          { return FINALLY;
          }
        case 181: break;
        case 141: 
          { return EXPERIMENTAL;
          }
        case 182: break;
        case 46: 
          { return AND;
          }
        case 183: break;
        case 120: 
          { return OVERLOAD;
          }
        case 184: break;
        case 61: 
          { return EXIT;
          }
        case 185: break;
        case 49: 
          { return NOT;
          }
        case 186: break;
        case 100: 
          { return PASCAL;
          }
        case 187: break;
        case 54: 
          { return VAR;
          }
        case 188: break;
        case 25: 
          { return KEYWORDESCAPE;
          }
        case 189: break;
        case 41: 
          { return NE;
          }
        case 190: break;
        case 72: 
          { return WITH;
          }
        case 191: break;
        case 146: 
          { return IMPLEMENTATION;
          }
        case 192: break;
        case 40: 
          { return LE;
          }
        case 193: break;
        case 2: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 194: break;
        case 109: 
          { return VIRTUAL;
          }
        case 195: break;
        case 43: 
          { return ASSIGN;
          }
        case 196: break;
        case 142: 
          { return FINALIZATION;
          }
        case 197: break;
        case 76: 
          { return BREAK;
          }
        case 198: break;
        case 86: 
          { return WHILE;
          }
        case 199: break;
        case 52: 
          { return MOD;
          }
        case 200: break;
        case 92: 
          { return RECORD;
          }
        case 201: break;
        case 115: 
          { return EXTERNAL;
          }
        case 202: break;
        case 17: 
          { return RBRACK;
          }
        case 203: break;
        case 121: 
          { return OPERATOR;
          }
        case 204: break;
        case 4: 
          { return LPAREN;
          }
        case 205: break;
        case 62: 
          { return FILE;
          }
        case 206: break;
        case 110: 
          { return STDCALL;
          }
        case 207: break;
        case 53: 
          { return OUT;
          }
        case 208: break;
        case 7: 
          { return COMMENT;
          }
        case 209: break;
        case 108: 
          { return MESSAGE;
          }
        case 210: break;
        case 135: 
          { return THREADVAR;
          }
        case 211: break;
        case 39: 
          { return TO;
          }
        case 212: break;
        case 55: 
          { return SET;
          }
        case 213: break;
        case 85: 
          { return WRITE;
          }
        case 214: break;
        case 81: 
          { return CDECL;
          }
        case 215: break;
        case 78: 
          { return RAISE;
          }
        case 216: break;
        case 138: 
          { return IMPLEMENTS;
          }
        case 217: break;
        case 84: 
          { return UNTIL;
          }
        case 218: break;
        case 116: 
          { return FUNCTION;
          }
        case 219: break;
        case 82: 
          { return CONST;
          }
        case 220: break;
        case 97: 
          { return STRING;
          }
        case 221: break;
        case 89: 
          { return DOWNTO;
          }
        case 222: break;
        case 1: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 223: break;
        case 126: 
          { return PLATFORM;
          }
        case 224: break;
        case 13: 
          { return PLUS;
          }
        case 225: break;
        case 71: 
          { return GOTO;
          }
        case 226: break;
        case 113: 
          { return PROGRAM;
          }
        case 227: break;
        case 96: 
          { return STATIC;
          }
        case 228: break;
        case 9: 
          { return NUMBER_INT;
          }
        case 229: break;
        case 57: 
          { return SHL;
          }
        case 230: break;
        case 16: 
          { return LBRACK;
          }
        case 231: break;
        case 88: 
          { return EXPORT;
          }
        case 232: break;
        case 140: 
          { return CONSTRUCTOR;
          }
        case 233: break;
        case 69: 
          { return UNIT;
          }
        case 234: break;
        case 145: 
          { return INITIALIZATION;
          }
        case 235: break;
        case 32: 
          { return DO;
          }
        case 236: break;
        case 21: 
          { return COLON;
          }
        case 237: break;
        case 59: 
          { return XOR;
          }
        case 238: break;
        case 30: 
          { return NUMBER_HEX;
          }
        case 239: break;
        case 83: 
          { return CLASS;
          }
        case 240: break;
        case 132: 
          { return PROCEDURE;
          }
        case 241: break;
        case 58: 
          { return TRY;
          }
        case 242: break;
        case 51: 
          { return IDIV;
          }
        case 243: break;
        case 29: 
          { return RANGE;
          }
        case 244: break;
        case 20: 
          { return GT;
          }
        case 245: break;
        case 119: 
          { return OVERRIDE;
          }
        case 246: break;
        case 26: 
          { return STRING_LITERAL;
          }
        case 247: break;
        case 45: 
          { return FOR;
          }
        case 248: break;
        case 23: 
          { return AT;
          }
        case 249: break;
        case 22: 
          { return DEREF;
          }
        case 250: break;
        case 33: 
          { return OF;
          }
        case 251: break;
        case 38: 
          { return IS;
          }
        case 252: break;
        case 99: 
          { return HELPER;
          }
        case 253: break;
        case 122: 
          { return REGISTER;
          }
        case 254: break;
        case 128: 
          { return AUTOMATED;
          }
        case 255: break;
        case 35: 
          { return OR;
          }
        case 256: break;
        case 36: 
          { return IF;
          }
        case 257: break;
        case 77: 
          { return ARRAY;
          }
        case 258: break;
        case 111: 
          { return LIBRARY;
          }
        case 259: break;
        case 60: 
          { return ELSE;
          }
        case 260: break;
        case 74: 
          { return FINAL;
          }
        case 261: break;
        case 70: 
          { return USES;
          }
        case 262: break;
        case 31: 
          { return AS;
          }
        case 263: break;
        case 107: 
          { return DYNAMIC;
          }
        case 264: break;
        case 64: 
          { return SELF;
          }
        case 265: break;
        case 5: 
          { return MULT;
          }
        case 266: break;
        case 66: 
          { return TRUE;
          }
        case 267: break;
        case 127: 
          { return ASSEMBLER;
          }
        case 268: break;
        case 10: 
          { return MINUS;
          }
        case 269: break;
        case 102: 
          { return PUBLIC;
          }
        case 270: break;
        case 63: 
          { return READ;
          }
        case 271: break;
        case 137: 
          { return DEPRECATED;
          }
        case 272: break;
        case 42: 
          { return GE;
          }
        case 273: break;
        case 118: 
          { return ABSTRACT;
          }
        case 274: break;
        case 15: 
          { return COMMA;
          }
        case 275: break;
        case 93: 
          { return REPEAT;
          }
        case 276: break;
        case 125: 
          { return PROPERTY;
          }
        case 277: break;
        case 95: 
          { return SEALED;
          }
        case 278: break;
        case 68: 
          { return TYPE;
          }
        case 279: break;
        case 91: 
          { return OBJECT;
          }
        case 280: break;
        case 103: 
          { return EXPORTS;
          }
        case 281: break;
        case 18: 
          { return EQ;
          }
        case 282: break;
        case 8: 
          { return NAME;
          }
        case 283: break;
        case 130: 
          { return INHERITED;
          }
        case 284: break;
        case 124: 
          { return CONTINUE;
          }
        case 285: break;
        case 28: 
          { return NUMBER_REAL;
          }
        case 286: break;
        case 144: 
          { return RESOURCESTRING;
          }
        case 287: break;
        case 80: 
          { return LABEL;
          }
        case 288: break;
        case 136: 
          { return DESTRUCTOR;
          }
        case 289: break;
        case 65: 
          { return CASE;
          }
        case 290: break;
        case 50: 
          { return NIL;
          }
        case 291: break;
        case 79: 
          { return INDEX;
          }
        case 292: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
