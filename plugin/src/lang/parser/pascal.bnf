{
  generateTokens=true
  generatePsi=true

  parserClass="com.siberika.idea.pascal.lang.parser.PascalParser"
  stubParserClass="com.siberika.idea.pascal.lang.parser.PascalParserUtil"

  implements="com.siberika.idea.pascal.lang.psi.PascalPsiElement"
  extends="com.siberika.idea.pascal.lang.psi.impl.PascalPsiElementImpl"

  psiClassPrefix="Pas"
  psiImplClassSuffix="Impl"
  psiPackage="com.siberika.idea.pascal.lang.psi"
  psiImplPackage="com.siberika.idea.pascal.lang.psi.impl"
  psiImplUtilClass="com.siberika.idea.pascal.lang.psi.impl.PascalPsiImplUtil"

  elementTypeHolderClass="com.siberika.idea.pascal.lang.psi.PasTypes"
  elementTypePrefix=""
  elementTypeClass="com.siberika.idea.pascal.lang.psi.PascalPsiElementType"
  tokenTypeClass="com.siberika.idea.pascal.lang.lexer.PascalElementType"

  consumeTokenMethod(".*_Expr|Expr")="consumeTokenFast"

  tokens = [
        COMMENT="COMMENT"
        STRING_LITERAL="STRING_LITERAL"

        AND="and"
        MOD="mod"
        OR="or"
        IDIV="div"
        SHR="shr"
        SHL="shl"
        IN="in"

        AS="as"
        IS="is"
        NIL="nil"

        CLASS="class"
        DISPINTERFACE="dispinterface"

        TRY="try"
        RAISE="raise"
        EXCEPT="except"
        ON="on"
        FINALLY="finally"

        PROGRAM="program"
        UNIT="unit"
        LIBRARY="library"
        PACKAGE="package"
        USES="uses"
        EXPORTS="exports"
        FINALIZATION="finalization"
        INITIALIZATION="initialization"

        THREADVAR="threadvar"
        ABSOLUTE="absolute"
        OUT="out"
        CONSTREF="constref"
        RESOURCESTRING="resourcestring"
        INLINE="inline"
        PACKED="packed"
        PROPERTY="property"
        SET="set"
        FILE="file"

        ASM="asm"
        GOTO="goto"
        LABEL="label"
        WITH="with"
        EXIT="exit"
        CONTINUE="continue"
        BREAK="break"

        CONSTRUCTOR="constructor"
        DESTRUCTOR="destructor"
        INHERITED="inherited"
        OBJECT="object"
        OPERATOR="operator"
        REINTRODUCE="reintroduce"
        SELF="self"

        NOT="not"
        XOR="xor"

        TO="to"
        DOWNTO="downto"
        REPEAT="repeat"

        STATIC="static"
        SEALED="sealed"
        FINAL="final"
        HELPER="helper"
        EXPORT="export"
        DISPID="dispid"
        ABSTRACT="abstract"

        STRICT="strict"
        PUBLISHED="published"
        PUBLIC="public"
        PROTECTED="protected"
        PRIVATE="private"
        AUTOMATED="automated"

        MESSAGE="message"
        FORWARD="forward"
        EXTERNAL="external"
        EXPERIMENTAL="experimental"
        DEPRECATED="deprecated"
        ASSEMBLER="assembler"

        INDEX="index"
        DEFAULT="default"

        VIRTUAL="virtual"
        DYNAMIC="dynamic"
        OVERRIDE="override"
        OVERLOAD="overload"

        REGISTER="register"
        STDCALL="stdcall"
        PLATFORM="platform"
        PASCAL="pascal"
        CDECL="cdecl"
        SAFECALL="safecall"

        REFERENCE="reference"

        IMPLEMENTS="implements"
        REQUIRES="requires"
        CONTAINS="contains"

        POINTER="pointer"
        FALSE="false"
        TRUE="true"

        INTERFACE="interface"
        IMPLEMENTATION="implementation"

        VAR="var"
        CONST="const"
        TYPE="type"
        ARRAY="array"
        RECORD="record"
        PROCEDURE="procedure"
        FUNCTION="function"
        OF="of"

        CASE="case"
        BEGIN="begin"
        END="end"
        FOR="for"
        UNTIL="until"
        WHILE="while"
        DO="do"
        IF="if"
        THEN="then"
        ELSE="else"

        READ="read"
        WRITE="write"

        POWER="**"
        MULT="*"
        PLUS="+"
        MINUS="-"
        DIV="/"
        SEMI=";"
        COMMA=","
        LPAREN="("
        RPAREN=")"
        LBRACK="["
        RBRACK="]"
        EQ="="
        LT="<"
        GT=">"
        GE=">="
        LE="<="
        NE="<>"
        COLON=":"
        ASSIGN=":="
        PLUS_ASSIGN="+="
        MINUS_ASSIGN="-="
        MULT_ASSIGN="*="
        DIV_ASSIGN="/="
        DOT="."
        DEREF="^"
        AT="@"
        HEXNUM="$"
        CHARNUM="#"
        KEYWORDESCAPE="&"

        INCLUDE="include"
        CT_DEFINE="ct_define"
        CT_UNDEFINE="ct_undefine"
        CT_IF="ct_if"
        CT_IFDEF="ct_ifdef"
        CT_IFNDEF="ct_ifndef"
        CT_IFOPT="ct_ifopt"
        CT_ELSE="ct_else"
        CT_ENDIF="ct_endif"
        COMP_OPTION="comp_option"
  ]

  implements(".+Statement")="com.siberika.idea.pascal.lang.psi.PasStatement"
  implements(".*QualifiedIdent|NamespaceIdent")="com.siberika.idea.pascal.lang.psi.PascalQualifiedIdent"
  implements(".*ModuleHead|.*Ident|ClassProperty|ConstDeclaration")="com.siberika.idea.pascal.lang.psi.PascalNamedElement"
  implements("ClassHelperDecl|ClassTypeDecl|InterfaceTypeDecl|ObjectDecl|RecordHelperDecl|RecordDecl")="com.siberika.idea.pascal.lang.psi.PascalStructType,com.siberika.idea.pascal.lang.psi.PascalNamedElement"
  implements("ConstSection|TypeSection|VarSection|ExportedRoutine|ClassMethodResolution|LabelDeclSection|ExportsSection|CustomAttributeDecl|ClosureRoutine")="com.siberika.idea.pascal.lang.psi.impl.PasDeclSection"
  extends(".+Statement")="com.siberika.idea.pascal.lang.psi.impl.PasStatementImpl"
  extends(".*ModuleHead|.*Ident|ClassProperty|ConstDeclaration")="com.siberika.idea.pascal.lang.psi.impl.PascalNamedElementImpl"
  extends("ClassTypeDecl|ObjectDecl|ClassHelperDecl|InterfaceTypeDecl|RecordDecl|RecordHelperDecl")="com.siberika.idea.pascal.lang.psi.impl.PasStructTypeImpl"
  extends("ExportedRoutine|RoutineImplDecl|ClosureRoutine")="com.siberika.idea.pascal.lang.psi.impl.PascalRoutineImpl"
  extends(".*Expr")=Expr
  implements(".*Op")="com.siberika.idea.pascal.lang.psi.impl.PascalOperation"
}

external pascal             ::= parsePascal Module
Module                      ::= [prolog] (moduleUnit | moduleLibrary | modulePackage | moduleProgram)
                            {extends="com.siberika.idea.pascal.lang.psi.impl.PascalModuleImpl"
                             implements="com.siberika.idea.pascal.lang.psi.impl.PascalModule"}

private moduleProgram       ::= progWithHead | progWoHead
private progWithHead        ::= ProgramModuleHead progWoHead {pin=1}
private progWoHead          ::= [intUsesClause] BlockGlobal "." {pin=2 recoverWhile=rec_section_global}

private moduleUnit          ::= UnitModuleHead UnitInterface UnitImplementation "." {pin=1}
private prolog              ::= {recoverWhile=rec_module_start}
UnitModuleHead              ::= UNIT NamespaceIdent hintingDirective* ";" {pin=1 recoverWhile=rec_module}
private intUsesClause       ::= UsesClause {recoverWhile=rec_block_local_end}
UsesClause                  ::= USES namespaceNameList ";" {pin=1}

private moduleLibrary       ::= LibraryModuleHead [intUsesClause] libBlockGlobal "." {pin=1}
private libBlockGlobal      ::= ImplDeclSection END | BlockGlobal
LibraryModuleHead           ::= LIBRARY NamespaceIdent hintingDirective* ";" {pin=1}

private modulePackage       ::= PackageModuleHead RequiresClause [ContainsClause] END "." {pin=1}
PackageModuleHead           ::= PACKAGE NamespaceIdent ";" {pin=1}
RequiresClause              ::= REQUIRES namespaceNameList ";" {pin=1}
ContainsClause              ::= CONTAINS namespaceNameList ";" {pin=1}

UnitInterface               ::= INTERFACE [intUsesClause] interfaceDecl* {pin=1 recoverWhile=rec_interface name="interface section"}

private rec_block_global_end ::= !(".")
private rec_block_local_end  ::= !(END) & rec_section
private rec_module_start    ::= !(UNIT | LIBRARY | PROGRAM | PACKAGE | USES | END) & rec_section
private rec_module          ::= !(INTERFACE) & rec_interface
private rec_interface       ::= !(IMPLEMENTATION) & rec_implementation
private rec_implementation  ::= !(INITIALIZATION | FINALIZATION | BEGIN | ASM)
private rec_implementation_dot  ::= !(".") & rec_implementation
private rec_section_nested  ::= !(CLASS | TYPE | EXPORTS | varKey | constKey | PROPERTY | Visibility |
                                 (identifier "<") | (END DOT) | "[") & rec_interface
private rec_section         ::= !rec__routine_key & rec_section_nested
private rec_statement_mid   ::= !(rec__stmt_middle)
private rec_section_global  ::= !(".") & rec_section
private rec_routine         ::= !(EXTERNAL | FORWARD | END) & rec_name & rec_interface
private rec_semi_section    ::= !(";" | "=" | "," | ">") & rec_section
private rec_semi            ::= !(";")
private rec_struct_field    ::= !(";" | ")" | END | CASE)
private rec_struct_outer    ::= !(END)
private rec__routine_key    ::= PROCEDURE | FUNCTION | CONSTRUCTOR | DESTRUCTOR | OPERATOR
private rec_name            ::= !(identifier | END) & rec_section
private rec_case            ::= !(ELSE | Expression) & rec_name
private rec_classparent     ::= !(CASE) & rec_name
private rec_typeId          ::= !("=" | "." | ";" | DO)
private rec_formal_param    ::= !(")" | ";" | ":" | "]")
private rec_propspec    ::= !(READ | WRITE | "add" | "remove" | classPropertyDispInterface | "stored" | SEMI | DEFAULT | IMPLEMENTS)


private interfaceDecl       ::= commonDecl | routineDecl | ExportsSection | assemblyAttribute {recoverWhile=rec_block_local_end}
private assemblyAttribute   ::= "[" "assembly" ":" CustomAttributeDecl "]" {pin=1}
ExportsSection              ::= EXPORTS RefNamedIdent exportItem ("," RefNamedIdent exportItem)* ";" {pin=1}
private exportItem          ::= ["(" [formalParameterList] ")"] [INDEX Expression] ["name" Expression] ["resident"]

private operatorRedef       ::= ASSIGN | PLUS | MINUS | MULT | DIV | POWER | EQ | LT | LE | GT | GE | "<>" | IN | "explicit"
private procName            ::= ClassQualifiedIdent | NamedIdent
private methodKey           ::= PROCEDURE | CONSTRUCTOR | DESTRUCTOR
private procKey             ::= FUNCTION | PROCEDURE

ExportedRoutine             ::= routineDeclaration [ExternalDirective] {implements="com.siberika.idea.pascal.lang.psi.PasEntityScope"}
private routineDeclaration  ::= customAttributes* (exportedProc | exportedFunc | operatorDecl | classOperatorDecl) ";" FunctionDirective* {pin=2 recoverWhile=rec_routine}
private exportedFunc        ::= [CLASS] FUNCTION procName [GenericDefinition] [FormalParameterSection] ":" customAttributes* TypeDecl {pin=2}
private exportedProc        ::= [CLASS] methodKey procName [GenericDefinition] [FormalParameterSection] {pin=2}
private operatorDecl        ::= OPERATOR operatorRedef FormalParameterSection [NamedIdent] ":" TypeDecl {pin=1}
private classOperatorDecl   ::= [CLASS] OPERATOR procName FormalParameterSection ":" TypeDecl {pin=2}

RoutineImplDecl             ::= routineDeclaration ProcBodyBlock {pin=1 name="procedure or function declaration"}
RoutineImplDeclWoNested     ::= routineDeclaration BlockLocalWONested [";"] {extends=RoutineImplDecl}
RoutineImplDeclNested1      ::= routineDeclaration BlockLocalNested1 [";"] {extends=RoutineImplDecl}

ClassMethodResolution       ::= [CLASS] procKey GenericTypeIdent "." identifier "=" RefNamedIdent ";"

private complexType         ::= ClassTypeTypeDecl | structTypeDecl | ArrayType | SetType | FileType
private structTypeDecl      ::= ClassHelperDecl | ClassTypeDecl | InterfaceTypeDecl | ObjectDecl | RecordHelperDecl | RecordDecl

private routineDecl         ::= ClassMethodResolution | ExportedRoutine
private commonDecl          ::= [CLASS] VarSection | ClassProperty | ConstSection | TypeSection
private structItem          ::= commonDecl | routineDecl | classFieldSemi | Visibility
private declSection	        ::=	RoutineImplDecl | commonDecl | LabelDeclSection | ExportsSection | assemblyAttribute {recoverWhile=rec_block_local_end}
private declSectionNested   ::= RoutineImplDeclNested1 | commonDecl | LabelDeclSection {recoverWhile=rec_block_local_end}
private declSectionNested1  ::= RoutineImplDeclWoNested | commonDecl | LabelDeclSection {recoverWhile=rec_block_local_end}
private declSectionWONested ::= commonDecl | LabelDeclSection {recoverWhile=rec_section_nested}

UnitImplementation          ::= IMPLEMENTATION [intUsesClause] ImplDeclSection unitBlock {pin=1 recoverWhile=rec_implementation_dot name="implementation section"}
ImplDeclSection             ::= declSection* {}
private unitBlock           ::= [UnitInitialization] [UnitFinalization] END | CompoundStatement | END {}
UnitInitialization          ::= INITIALIZATION statementList {pin=1 name="initialization section"}
UnitFinalization            ::= FINALIZATION statementList  {pin=1 name="finalization section"}

ProgramModuleHead	        ::= PROGRAM NamespaceIdent ProgramParamList? ";" {pin=1}
ProgramParamList            ::= LPAREN progParam? progParamsRest* RPAREN {pin=1}
private progParamsRest      ::= "," progParam {pin=1}
private progParam           ::= identifier {}

private namespaceNameList   ::= namespaceFileName namespaceNamesRest*
private namespaceNamesRest  ::= COMMA namespaceFileName {pin=1}
private namespaceFileName	::=	NamespaceIdent [IN quotedString] {recoverWhile=rec_semi_section}

BlockGlobal	                ::=	declSection* BlockBody {recoverWhile=rec_block_global_end}
BlockLocal 	                ::=	[';'] declSectionNested* BlockBody
BlockLocalNested1          ::=	[';'] declSectionNested1* BlockBody {pin=2}
BlockLocalWONested          ::=	[';'] declSectionWONested* BlockBody {pin=2}
BlockBody	                ::=	CompoundStatement |	AssemblerStatement

AssemblerStatement          ::= ASM asmBlock END {pin=1}
private asmBlock            ::= assemblerItem* {recoverWhile=rec_struct_outer}
private assemblerItem       ::= ',' | '[' | ']' | ':' | '+' | '-' | '*' | '/' | '@' | RefNamedIdent | NUMBER_INT | NUMBER_HEX | NUMBER_OCT | NUMBER_BIN

FunctionDirective           ::= overloadDirective | oldCallConventionDirectiveSemi
                              | inlineDirectiveSemi | callConventionSemi | hintingDirective ";"
                              | REINTRODUCE ';' | bindingDirective | abstractDirectiveSemi | dispIDDirective {name="routine directive"}
private overloadDirective   ::= OVERLOAD ";"
private oldCallConventionDirectiveSemi ::= oldCallConventionDirective ";"
private oldCallConventionDirective ::= "far" | "local" | "near"
ExternalDirective           ::= "varargs" ";" | EXTERNAL ";" | EXTERNAL externalSpecifier [libLoadSpec] ";" | EXTERNAL ConstExpression [externalSpecifier] [libLoadSpec] ";"
private libLoadSpec         ::= "delayed" | "dependency" constExpr [libListRest]
private libListRest         ::= COMMA constExpr
private externalSpecifier   ::= "name" ConstExpression | INDEX ConstExpression
ProcBodyBlock               ::= ProcForwardDecl | ExternalDirective | BlockLocal [";"]
ProcForwardDecl             ::= FORWARD ";" FunctionDirective*

private dispIDDirective     ::= DISPID Expression {pin=1}
private callConventionSemi  ::= callConvention ";"
private callConvention      ::= CDECL | PASCAL | REGISTER | SAFECALL | STDCALL | EXPORT
private inlineDirectiveSemi ::= inlineDirective ";"
private inlineDirective     ::= INLINE | ASSEMBLER
private abstractDirectiveSemi ::= abstractDirective ";"
private abstractDirective   ::= ABSTRACT | FINAL
private bindingDirective    ::= ((MESSAGE Expression) | STATIC | DYNAMIC | OVERRIDE | VIRTUAL) ";"

LabelDeclSection	        ::=	LABEL label labelsRest* ";" {pin=1 name="label declaration"}
private labelsRest          ::= "," label {}
private label               ::= RefNamedIdent | NUMBER_INT | NUMBER_HEX

VarSection	                ::=	varKey VarDeclaration+ {pin=1 name="var section" recoverWhile=rec_block_local_end}
private varKey	            ::=	VAR | THREADVAR
VarDeclaration	            ::=	customAttributes* identList ":" TypeDecl [varValueSpec] hintingDirective* ";" {pin=2 recoverWhile=rec_name}
private varValueSpec	    ::=	ABSOLUTE FullyQualifiedIdent | ABSOLUTE ConstExpressionOrd | EQ ConstExpression {recoverWhile=rec_semi}

ConstSection                ::= constKey ConstDeclaration+ {pin=1 name="const section" recoverWhile=rec_block_local_end}
private constKey            ::= CONST |	RESOURCESTRING
ConstDeclaration            ::= customAttributes* NamedIdent [":" TypeDecl] "=" ConstExpression hintingDirective* ";" {pin=4 recoverWhile=rec_name}
NamedIdent                  ::= identifier

TypeSection                 ::= TYPE TypeDeclaration+ {pin=1 name="type section" recoverWhile=rec_block_local_end}
TypeDeclaration             ::= customAttributes* GenericTypeIdent "=" type {pin=2 recoverWhile=rec_name}
private type                ::= typeForwardDecl | typeDecl
private typeDecl            ::= TypeDecl hintingDirective* ";" {pin=1}
private typeForwardDecl     ::= classForwardDecl ";"

GenericTypeIdent    ::= identifier [GenericDefinition] {recoverWhile=rec_typeId}
GenericDefinition   ::= SimpleGenericDefinition | ConstrainedGenericDefinition
SimpleGenericDefinition ::= "<" NamedIdent identsRest* ">" {pin=1}                     //TODO use meta rule
private identsRest          ::= "," NamedIdent {pin=1}
ConstrainedGenericDefinition ::= "<" constrainedGeneric constrainedGenericsRest ">" {pin=1}
private constrainedGeneric  ::= NamedIdent [ ":" GenericConstraint genericConstraintsRest ]
GenericConstraint   ::= NamedIdent | RECORD | CLASS | CONSTRUCTOR
private genericConstraintsRest ::= "," GenericConstraint {pin=1}
private constrainedGenericsRest ::= ";" constrainedGeneric {pin=1}
GenericPostfix      ::=	"<" TypeDecl typeDeclsRest* ">"               // TODO use TypeId + procedure types instead?
private typeDeclsRest       ::= "," TypeDecl {pin=1}

TypeID                      ::=	FullyQualifiedIdent [GenericPostfix]

TypeDecl	                ::=	complexType | PointerType | ProcedureType | StringType | simpleType | [TYPE] TypeID

private classForwardDecl    ::= (CLASS | INTERFACE) [ClassParentWORec] //{name="forward class declaration" pin=1 recoverWhile=rec_semi_section}

ClassField                  ::= field
private classFieldSemi      ::= ClassField ";"
ClassTypeDecl               ::= [PACKED] classDecl {name="class declaration"}
private classDecl           ::= CLASS ((classBody END) | [ClassParent]) {pin=1}
private classBody           ::= [ClassState] [ClassParent] structItem* {recoverWhile=rec_struct_outer}

ClassHelperDecl             ::= CLASS HELPER classHelperBody END {name="class helper declaration"}
private classHelperBody     ::= FOR TypeID structItem* {pin=2 recoverWhile=rec_struct_outer}

InterfaceTypeDecl           ::= interfaceKey interfaceBody END
                              | interfaceKey [ClassParent] {pin(".*")=interfaceKey name="interface declaration"}
private interfaceBody       ::= [ClassParent] [interfaceGuid] structItem* {recoverWhile=rec_struct_outer}
ObjectDecl                  ::= [PACKED] objectTypeDecl {name="object declaration"}
private objectTypeDecl      ::= OBJECT objectBody END {pin=1}
private objectBody          ::= [ClassParent] structItem* {recoverWhile=rec_struct_outer}

RecordDecl                  ::= (variantRecord | simpleRecord) {name="record declaration"}
private simpleRecord        ::= [PACKED | "bitpacked"] RECORD recordBody END {pin=2}
private recordBody          ::= [ClassParent] structItem* [ClassField] {recoverWhile=rec_struct_outer}

private variantRecord       ::= [PACKED | "bitpacked"] RECORD varRecDecl END
private varRecDecl          ::= [ClassParent] structItem* [ClassField] [recordVariantSection] {recoverWhile=rec_struct_field}
private varRecDeclInner     ::= (field ";")* [field] [recordVariantSection] {recoverWhile=rec_struct_field}
private field               ::= customAttributes* identList ":" TypeDecl hintingDirective* {pin=2 recoverWhile=rec_struct_field}
private recordVariantSection ::= CASE [identifier ":"] TypeDecl OF recordVariants {pin=1}
private recordVariants      ::= (RecordVariant ";")* [RecordVariant]
RecordVariant               ::= Expression ("," Expression)* ":" "(" varRecDeclInner ")" {pin=4}  // rethink expression, separate simpler expressions?

RecordHelperDecl            ::= RECORD HELPER classHelperBody END {pin=2}

ClassState          ::= SEALED | ABSTRACT

ClassParent         ::= "(" TypeID? ("," TypeID)* ")" {pin=1 recoverWhile=rec_classparent}
ClassParentWORec    ::= "(" TypeID? ("," TypeID)* ")"

private interfaceGuid       ::= "[" quotedString "]" {pin=1}
private interfaceKey        ::= INTERFACE | DISPINTERFACE

ClassTypeTypeDecl           ::= CLASS OF TypeID {pin(".*")="class of" name="metaclass declaration"}

Visibility                  ::= [STRICT] PRIVATE | [STRICT] PROTECTED | PUBLIC | PUBLISHED | AUTOMATED

ClassProperty ::= customAttributes* [CLASS] PROPERTY NamedIdent [ClassPropertyArray] [":" TypeID] [ClassPropertyIndex] ClassPropertySpecifier* ";" [DEFAULT] hintingDirective* [";"] {pin=3 recoverWhile=rec_routine}
ClassPropertyArray ::= "[" formalParameterList "]" {pin=1}
ClassPropertyIndex ::= INDEX ConstExpressionOrd {pin=1}
ClassPropertySpecifier ::= ClassPropertyReadWrite | classPropertyDispInterface | "stored" Expression
                         | DEFAULT Expression | "nodefault" | IMPLEMENTS TypeID {recoverWhile=rec_propspec}
ClassPropertyReadWrite ::= READ RefNamedIdent | WRITE RefNamedIdent | "add" RefNamedIdent | "remove" RefNamedIdent
RefNamedIdent       ::= identifier
private classPropertyDispInterface ::= "readonly" | "writeonly" | dispIDDirective

ArrayType               ::= [PACKED | "bitpacked"] ARRAY [arrayIndexes] OF arraySubType {pin=2}
private arrayIndexes    ::= "[" [ArrayIndex] arrayIndexRest* "]" {pin=1}
ArrayIndex              ::= SubRangeType | TypeID     //TODO: TypeID only?
private arrayIndexRest  ::= "," [ArrayIndex] {pin=1}
private arraySubType    ::= CONST | TypeDecl

SetType             ::= [PACKED] SET OF TypeDecl {pin=2}
FileType            ::= FILE [OF TypeDecl] {pin=1}
PointerType         ::= "^" TypeDecl {pin=1}

StringType                  ::= "string" ["[" Expression "]"] | "AnsiString" [codePageNumber]
private codePageNumber      ::= "(" ConstExpressionOrd ")" {pin=1}

ProcedureType               ::= procedureReference | simpleProcedureType
private simpleProcedureType ::= procedureTypeHeading {recoverWhile=rec_semi_section}
ClosureExpr                 ::= ClosureRoutine
ClosureRoutine              ::= (funcHeading | procHeading) BlockLocal

private procedureReference  ::= REFERENCE TO procedureTypeHeading
private procedureTypeHeading ::= (funcHeading | procHeading) [OF OBJECT]
private funcHeading         ::= FUNCTION [FormalParameterSection] ":" customAttributes* TypeDecl [";" callConvention+] {pin=1}
private procHeading         ::= PROCEDURE [FormalParameterSection] [";" callConvention+] {pin=1}

private simpleType          ::= EnumType | SubRangeType
SubRangeType        ::= RangeBound RANGE RangeBound
RangeBound          ::= ConstExpressionOrd
EnumType            ::= "(" enumEl enumRest* ")" {pin=1}
private enumRest    ::= "," enumEl {pin=1}
private enumEl      ::= NamedIdent ["=" Expression] {}

    private rec__stmt_start          ::= REPEAT | WHILE | FOR | CASE | WITH | RAISE | IF | TRY | BEGIN | BREAK | CONTINUE | EXIT | GOTO | INHERITED
                                  | NUMBER_INT | NUMBER_HEX | NUMBER_REAL | NUMBER_OCT | NUMBER_BIN | identifier | KeywordIdent | KEYWORDESCAPE | '^' | END "." | '[' | '('
    private rec__stmt_middle         ::= DO | ELSE | THEN

CompoundStatement           ::= BEGIN statementBlock END {pin=1}
private statementBlock      ::= [statementList] {recoverWhile=rec_block_local_end}
private statementList       ::= [Statement] statements*
private statements          ::= ";" [Statement]
Statement                   ::= [LabelId ":" ] statementPart {recoverWhile=rec_statement}
private rec_statement       ::= !(SEMI | END | ELSE | FINALLY | EXCEPT | UNTIL | FINALIZATION | BEGIN)
private statementPart       ::= RepeatStatement | WhileStatement | ForStatement
                              | CaseStatement | WithStatement | RaiseStatement | AssemblerStatement
                              | IfStatement | TryStatement | simpleStatement | CompoundStatement | stmtEmpty

private simpleStatement     ::= GotoStatement | stmtSimpleOrAssign | Expression
private stmtSimpleOrAssign  ::= Expression AssignPart
AssignOp                    ::= ":=" | PLUS_ASSIGN | MINUS_ASSIGN | MULT_ASSIGN | DIV_ASSIGN
AssignPart                  ::= AssignOp (NewStatement | Expression) {pin=1 }
NewStatement                ::= NEW "(" [ Expression ] ("," [ Expression ])* [ "," ConstExpression ] ")"// {pin=1 }
stmtEmpty           ::= //empty

RepeatStatement     ::= REPEAT [statementList] UNTIL Expression {pin=1}
WhileStatement      ::= WHILE Expression DO Statement {pin=1}
ForStatement        ::= FOR FullyQualifiedIdent (forCycle | IN) Expression DO Statement {pin=1}
private forCycle    ::= ":=" Expression (TO | DOWNTO)

IfStatement                 ::= IF Expression THEN Statement [ELSE Statement] {pin=1}

CaseStatement       ::= CASE Expression OF CaseItem* [ELSE statementList ] END {pin=1}
CaseItem	        ::=	CaseLabel ("," CaseLabel)* ":" Statement [";"] {pin=3 recoverWhile=rec_case}
CaseLabel	        ::=	ConstExpressionOrd [RANGE ConstExpressionOrd] //{}

TryStatement                ::= TRY statementList (tryExcept | tryFinally) END {pin=1}
private tryFinally          ::= FINALLY statementList
private tryExcept           ::= EXCEPT handlerList
private handlerList         ::= Handler+ [ELSE statementList] | statementList
Handler                     ::= ON [NamedIdent ":"] TypeID "do" Statement ";" {pin=1}

WithStatement               ::= WITH withArgument DO Statement {pin=1}
private withArgument        ::= Expression designatorsRest* {recoverWhile=rec_statement_mid}
private designatorsRest     ::= "," Expression {}

RaiseStatement              ::= RAISE [Expression] ["at" Expression] {pin=1}

GotoStatement               ::= GOTO LabelId | EXIT [ "(" Expression ")" ] | BREAK | CONTINUE

LabelId                     ::= label

ClassQualifiedIdent         ::= (SubIdent [GenericPostfix] ".")+ SubIdent
FullyQualifiedIdent	        ::=	namespacePart? SubIdent
NamespaceIdent	            ::=	namespacePart? SubIdent {name="Identifier"}
SubIdent                    ::= identifier
private namespacePart       ::= namespaceItem+
private namespaceItem       ::= SubIdent "."// {pin=2 }

private hintingDirective    ::= (DEPRECATED [StringFactor]) | EXPERIMENTAL | PLATFORM | LIBRARY // {}
//recover_hintingDir          ::= !(';' | ')' | END | global_decl)

KeywordIdent                ::= OUT | EXIT | BREAK | CONTINUE | SELF | NEW | REINTRODUCE | OVERLOAD | MESSAGE |STATIC | DYNAMIC
                              | OVERRIDE | VIRTUAL | ABSTRACT | SEALED | FINAL | ASSEMBLER | CDECL | PASCAL | REGISTER | SAFECALL | STDCALL
                              | EXPORT | AUTOMATED | DISPID | EXTERNAL | FORWARD | HELPER
                              | DEFAULT | IMPLEMENTS | INDEX | READ | WRITE | DEPRECATED | EXPERIMENTAL | PLATFORM | REFERENCE
                              | PACKAGE | CONTAINS | REQUIRES
private identifier          ::= KEYWORDESCAPE reservedWord | KeywordIdent | NAME
private reservedWord	    ::=	NAME //===***
private identList	        ::=	identListItem identListRest*
private identListRest       ::= "," identListItem {pin=1}
private identListItem       ::= NamedIdent

ConstExpression	            ::=	constExpr| NewConstExpression | Expression {recoverWhile=rec_expr_colon name="constant expression"}
private constExpr           ::= ArrayConstExpr | RecordConstExpr | Expression
ArrayConstExpr              ::= "(" constExpr ("," constExpr)* ")"
ConstExpressionOrd          ::=	ExpressionOrd {name="integer constant expression"}
NewConstExpression	        ::=	LPAREN ConstExpression (COMMA ConstExpression)* RPAREN
RecordConstExpr             ::= "(" recordConstInner ")"
private recordConstInner    ::= recordValue recordValueRest* {recoverWhile=rec_record_colon}
private recordValueRest     ::= ";" recordValue
private recordValue         ::= identifier ":" constExpr

private rec_record_colon    ::= !(")" | END)
private rec_expr_colon      ::= !(")" | ";" | INDEX | "name" | "delayed" | "dependency") & rec_section

/*private Designator                  ::= //[ "inherited" ] , [ QualifiedIdent | TypeID ] , { DesignatorItem } ===***
                                INHERITED [TypeID] exprParentheses? | EntityID DesignatorItemEx* | DesignatorItemEx+
private DesignatorItem      ::= "^" | "." FieldId | "[" ExpressionsList "]"
private DesignatorItemEx    ::= DesignatorItem | exprParentheses
private exprParentheses     ::= "(" exprInParentheses ")" {pin=1}
private exprInParentheses   ::= [ExpressionColon ExpressionColons*] {recoverWhile=rec_expr_colon}
private ExpressionColon     ::= Expression [ColonConstruct] {}
private ExpressionColons    ::= "," ExpressionColon
private ColonConstruct      ::= ":" Expression [ ":" Expression ]

private primary             ::= AT primary | AT AT primary | NOT primary | PLUS primary | MINUS primary
                              | NUMBER_INT | NUMBER_REAL | NUMBER_HEX | NUMBER_BIN | TRUE | FALSE | NIL
                              | StringFactor | SetSection | Designator

private primaryOrd          ::= NOT primaryOrd | PLUS primaryOrd | MINUS primaryOrd | NUMBER_INT | NUMBER_HEX | TRUE | FALSE | NIL
                              | "(" ExpressionOrd ")" | StringFactor | Designator


Expression ::= ClosureExpression | expr_rel
private expr_rel            ::= expr_sum relOpRest*
private relOpRest           ::= relOp expr_sum {pin=1 }
private expr_sum            ::= expr_product addOpRest*
private addOpRest           ::= addOp expr_product {pin=1 }
private expr_product        ::= primary mulOpRest*
private mulOpRest           ::= mulOp primary {pin=1 }

ExpressionOrd ::= expr_relOrd
private expr_relOrd ::= expr_sumOrd (relOp expr_sumOrd)*
private expr_sumOrd ::= expr_productOrd (addOp expr_productOrd)*
private expr_productOrd ::= primaryOrd (mulOp primaryOrd)* */
// **********************************************************************
relOp                       ::= "<" | ">" | "<=" | ">=" | "<>" | "=" | IN | IS
addOp                       ::=	PLUS | MINUS | OR | XOR
mulOp                       ::= "*" | "/" | IDIV | MOD | AND | SHL | SHR | AS
unaryOp                     ::= "+" | "-" | "@" | NOT

ExpressionOrd               ::= Expression
Expression                  ::= Expr

Expr                        ::= relationalExpr | sumExpr | productExpr | unaryExpr | referenceExpr | callGroup | primaryGroup {extends="com.siberika.idea.pascal.lang.psi.impl.PascalExpression"}
relationalExpr              ::= Expr relOp Expr
sumExpr                     ::= Expr addOp Expr
productExpr                 ::= Expr mulOp Expr
unaryExpr                   ::= unaryOp Expr
dereferenceExpr             ::= Expr '^'
referenceExpr               ::= Expr '.' FullyQualifiedIdent [GenericPostfix]
simpleRefExpr               ::= (INHERITED? FullyQualifiedIdent [GenericPostfix]) | INHERITED {elementType=referenceExpr}  // let qualified and simple references have the same type
callExpr                    ::= Expr argumentList
indexExpr                   ::= Expr indexList
argumentList                ::= '(' [ !')' Expr [ColonConstruct]  (',' Expr [ColonConstruct]) * ] ')' {pin(".*")=1}
private parenConstruct      ::= '(' [ !')' Expr (',' Expr) * ] ')' {pin(".*")=1}
ColonConstruct              ::= ':' Expr [':' Expr]
indexList                   ::= '[' Expr (',' Expr) * ']' {pin=1}
parenExpr                   ::= parenConstruct
setExpr                     ::= '[' [ !']' Expr setTail * ] ']' {pin(".*")=1}
private setTail             ::= ("," | ".." | ) Expr //{}
private primaryGroup        ::= simpleRefExpr | literalExpr | parenExpr | setExpr | ClosureExpr
private callGroup           ::= callExpr | indexExpr | dereferenceExpr
literalExpr                 ::= NUMBER_INT | NUMBER_REAL | NUMBER_HEX | NUMBER_OCT | NUMBER_BIN | TRUE | FALSE | NIL | StringFactor
// **********************************************************************
FormalParameterSection      ::= "(" [ formalParameterList ] ")" {pin=1}
private formalParameterList ::= FormalParameter (";" FormalParameter)*
FormalParameter             ::= customAttributes* [ ParamType ] identList [ ":" TypeDecl ] [ "=" Expression ] {recoverWhile=rec_formal_param}
ParamType                   ::= CONST | VAR | OUT | CONSTREF//ParmType

AttributeParamList	        ::= Expression (COMMA Expression)*

private customAttributes	::=	LBRACK CustomAttributeList RBRACK | assemblyAttribute {pin=1}
private CustomAttributeList ::= CustomAttributeDecl (COMMA CustomAttributeDecl)* {recoverWhile=rec_attr2}
private rec_attr2 ::= !(RBRACK)
CustomAttributeDecl         ::= FullyQualifiedIdent [LPAREN AttributeParamList RPAREN] {recoverWhile=rec_attr}
private rec_attr            ::= !(COMMA | RBRACK | identifier)
StringFactor                ::= controlString (quotedString controlString)* [quotedString]
                              | quotedString (controlString quotedString)* [controlString]
private quotedString        ::=	STRING_LITERAL
private controlString       ::=	controlchar+
private controlchar         ::= CHARNUM NUMBER_INT | CHARNUM NUMBER_HEX // ***===
