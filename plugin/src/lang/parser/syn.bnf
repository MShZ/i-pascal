{
  generateTokens=true
  generatePsi=true

  parserClass="com.siberika.idea.pascal.lang.parser.PascalParser"
  stubParserClass="com.siberika.idea.pascal.lang.parser.PascalParserUtil"

  implements="com.siberika.idea.pascal.lang.psi.PascalPsiElement"
  extends="com.siberika.idea.pascal.lang.psi.impl.PascalPsiElementImpl"

  psiClassPrefix="Pas"
  psiImplClassSuffix="Impl"
  psiPackage="com.siberika.idea.pascal.lang.psi"
  psiImplPackage="com.siberika.idea.pascal.lang.psi.impl"
  psiImplUtilClass="com.siberika.idea.pascal.lang.psi.impl.PascalPsiImplUtil"

  elementTypeHolderClass="com.siberika.idea.pascal.lang.psi.PasTypes"
  elementTypePrefix=""
  elementTypeClass="com.siberika.idea.pascal.lang.psi.PascalPsiElementType"
  tokenTypeClass="com.siberika.idea.pascal.lang.lexer.PascalElementType"

  consumeTokenMethod(".*_Expr|Expr")="consumeTokenFast"

  tokens = [
        STRING_LITERAL="STRING_LITERAL"

        AND='regexp:(?i)and'
        MOD="regexp:(?i)mod"
        OR="regexp:(?i)or"
        IDIV="regexp:(?i)div"
        SHR="regexp:(?i)shr"
        SHL="regexp:(?i)shl"
        IN='regexp:(?i)in'

        AS="regexp:(?i)as"
        IS="regexp:(?i)is"
        NIL="regexp:(?i)nil"

        CLASS='regexp:[Cc]lass'
        DISPINTERFACE="regexp:(?i)dispinterface"

        TRY='regexp:(?i)try'
        RAISE='regexp:[Rr]aise'
        EXCEPT="regexp:(?i)except"
        ON="regexp:(?i)on"
        FINALLY="regexp:(?i)finally"

        PROGRAM="regexp:(?i)program"
        UNIT='regexp:[Uu]nit'
        LIBRARY="regexp:(?i)library"
        PACKAGE="regexp:(?i)package"
        USES='regexp:[Uu]ses'
        EXPORTS="regexp:(?i)exports"
        FINALIZATION="regexp:(?i)finalization"
        INITIALIZATION="regexp:(?i)initialization"

        THREADVAR="regexp:(?i)threadvar"
        ABSOLUTE="regexp:(?i)absolute"
        OUT="regexp:(?i)out"
        CONSTREF="regexp:(?i)constref"
        RESOURCESTRING='regexp:[Rr]esource[Ss]tring'
        INLINE="regexp:(?i)inline"
        PACKED="regexp:(?i)packed"
        PROPERTY="regexp:(?i)property"
        SET="regexp:(?i)set"
        FILE="regexp:(?i)file"

        ASM="regexp:(?i)asm"
        GOTO="regexp:(?i)goto"
        LABEL="regexp:(?i)label"
        WITH='regexp:[Ww]ith'
        EXIT="regexp:(?i)exit"
        CONTINUE="regexp:(?i)continue"
        BREAK="regexp:(?i)break"

        CONSTRUCTOR='regexp:[Cc]onstructor'
        DESTRUCTOR='regexp:[Dd]estructor'
        INHERITED="regexp:(?i)inherited"
        OBJECT="regexp:(?i)object"
        OPERATOR="regexp:(?i)operator"
        REINTRODUCE="regexp:(?i)reintroduce"
        SELF="regexp:(?i)self"

        NOT='regexp:(?i)not'
        XOR="regexp:(?i)xor"

        TO='regexp:(?i)to'
        DOWNTO="regexp:(?i)downto"
        REPEAT='regexp:[Rr]epeat'

        STATIC="regexp:(?i)static"
        SEALED="regexp:(?i)sealed"
        FINAL="regexp:(?i)final"
        HELPER="regexp:(?i)helper"
        EXPORT="regexp:(?i)export"
        DISPID="regexp:(?i)dispid"
        ABSTRACT="regexp:(?i)abstract"

        STRICT="regexp:(?i)strict"
        PUBLISHED="regexp:(?i)published"
        PUBLIC="regexp:(?i)public"
        PROTECTED="regexp:(?i)protected"
        PRIVATE="regexp:(?i)private"
        AUTOMATED="regexp:(?i)automated"

        MESSAGE="regexp:(?i)message"
        FORWARD="regexp:(?i)forward"
        EXTERNAL="regexp:(?i)external"
        EXPERIMENTAL="regexp:(?i)experimental"
        DEPRECATED="regexp:(?i)deprecated"
        ASSEMBLER="regexp:(?i)assembler"

        INDEX="regexp:(?i)index"
        DEFAULT="regexp:(?i)default"

        VIRTUAL="regexp:(?i)virtual"
        DYNAMIC="regexp:(?i)dynamic"
        OVERRIDE="regexp:(?i)override"
        OVERLOAD="regexp:(?i)overload"

        REGISTER="regexp:(?i)register"
        STDCALL="regexp:(?i)stdcall"
        PLATFORM="regexp:(?i)platform"
        PASCAL="regexp:(?i)pascal"
        CDECL="regexp:(?i)cdecl"
        SAFECALL="regexp:(?i)safecall"

        REFERENCE="regexp:(?i)reference"

        IMPLEMENTS="regexp:(?i)implements"
        REQUIRES="regexp:(?i)requires"
        CONTAINS="regexp:(?i)contains"

        FALSE='regexp:(?i)false'
        TRUE='regexp:(?i)true'

        INTERFACE="regexp:(?i)interface"
        IMPLEMENTATION="regexp:(?i)implementation"

        VAR='regexp:(?i)var'
        CONST='regexp:(?i)const'
        TYPE="regexp:(?i)type"
        ARRAY='regexp:(?i)array'
        RECORD='regexp:(?i)record'
        PROCEDURE='regexp:(?i)procedure'
        FUNCTION='regexp:[Ff]unction'
        OF="regexp:(?i)of"

        CASE="regexp:(?i)case"
        BEGIN='regexp:(?i)begin'
        END='regexp:(?i)end'
        FOR='regexp:(?i)for'
        UNTIL='regexp:(?i)until'
        WHILE='regexp:(?i)while'
        DO='regexp:(?i)do'
        IF='regexp:(?i)if'
        THEN='regexp:(?i)then'
        ELSE="regexp:(?i)else"

        READ="regexp:(?i)read"
        WRITE="regexp:(?i)write"

        POWER="**"
        MULT="*"
        PLUS="+"
        MINUS="-"
        DIV="/"
        SEMI=";"
        COMMA=","
        LPAREN="("
        RPAREN=")"
        LBRACK="["
        RBRACK="]"
        EQ="="
        LT="<"
        GT=">"
        GE=">="
        LE="<="
        NE="<>"
        COLON=":"
        ASSIGN=":="
        DOT="."
        DEREF="^"
        AT="@"
        HEXNUM="$"
        CHARNUM="#"
        KEYWORDESCAPE="&"

        INCLUDE="include"
        CT_DEFINE="ct_define"
        CT_UNDEFINE="ct_undefine"
        CT_IFDEF="ct_ifdef"
        CT_IFNDEF="ct_ifndef"
        CT_ELSE="ct_else"
        CT_ENDIF="ct_endif"
        COMP_OPTION="comp_option"

        COMMENT='regexp:\{[^}]*\}'
        COMMENT='regexp://.*'
        COMMENT='regexp:\(\*(.*\n)*.*\*\)'
        NAME='regexp:[_A-Za-z]\w*'
        RANGE='..'
        STRING_LITERAL="regexp:'[^']*'"
        NUMBER_INT='regexp:\d+'
        NUMBER_REAL='regexp:\d+(\.\d+)?'
        NUMBER_HEX='regexp:\$[0-9abcdefABCDEF]+'
        WHITESPACE='regexp:[\ \n\r\t\f]'
  ]

  implements(".+Statement")="com.siberika.idea.pascal.lang.psi.PasStatement"
  implements(".*QualifiedIdent|NamespaceIdent")="com.siberika.idea.pascal.lang.psi.PascalQualifiedIdent"
  implements(".*ModuleHead|.*Ident|ClassProperty|ConstDeclaration")="com.siberika.idea.pascal.lang.psi.PascalNamedElement"
  implements("ClassHelperDecl|ClassTypeDecl|InterfaceTypeDecl|ObjectDecl|RecordHelperDecl|RecordDecl")="com.siberika.idea.pascal.lang.psi.PascalStructType,com.siberika.idea.pascal.lang.psi.PascalNamedElement"
  implements("ConstSection|TypeSection|VarSection|ExportedRoutine|ClassMethodResolution|LabelDeclSection|ExportsSection|CustomAttributeDecl")="com.siberika.idea.pascal.lang.psi.impl.PasDeclSection"
  extends(".+Statement")="com.siberika.idea.pascal.lang.psi.impl.PasStatementImpl"
  extends(".*ModuleHead|.*Ident|ClassProperty|ConstDeclaration")="com.siberika.idea.pascal.lang.psi.impl.PascalNamedElementImpl"
  extends("ClassTypeDecl|ObjectDecl|ClassHelperDecl|InterfaceTypeDecl|RecordDecl|RecordHelperDecl")="com.siberika.idea.pascal.lang.psi.impl.PasStructTypeImpl"
  extends("ExportedRoutine|RoutineImplDecl")="com.siberika.idea.pascal.lang.psi.impl.PascalRoutineImpl"
  extends(".*Expr")=Expr
  implements(".*Op")="com.siberika.idea.pascal.lang.psi.impl.PascalOperation"
}

//external pascal             ::= parsePascal Module
Module                      ::= moduleUnit | moduleProgram | moduleLibrary | modulePackage
                            {extends="com.siberika.idea.pascal.lang.psi.impl.PascalModuleImpl"
                             implements="com.siberika.idea.pascal.lang.psi.PasEntityScope"}

private moduleProgram       ::= progWithHead | progWoHead
private progWithHead        ::= ProgramModuleHead progWoHead {pin=1}
private progWoHead          ::= [UsesClause] BlockGlobal "." {pin=2 recoverWhile=rec_section_global}

private moduleUnit          ::= UnitModuleHead UnitInterface UnitImplementation "." {pin=1}
UnitModuleHead              ::= UNIT NamespaceIdent HintingDirective* ";" {pin=1 recoverWhile=rec_module}
UsesClause                  ::= USES namespaceNameList {pin=1 recoverWhile=rec_section}

private moduleLibrary       ::= LibraryModuleHead [UsesClause] BlockGlobal "." {pin=1}
LibraryModuleHead           ::= LIBRARY NamespaceIdent HintingDirective* ";" {pin=1}

private modulePackage       ::= PackageModuleHead RequiresClause [ContainsClause] END "." {pin=1}
PackageModuleHead           ::= PACKAGE NamespaceIdent ";" {pin=1}
RequiresClause              ::= REQUIRES namespaceNameList {pin=1}
ContainsClause              ::= CONTAINS namespaceNameList {pin=1}

UnitInterface               ::= INTERFACE [UsesClause] interfaceDecl* {pin=1 recoverWhile=rec_interface name="interface section"}

private rec_block_global_end ::= !(".")
private rec_block_local_end      ::= rec_section
private rec_module          ::= !(INTERFACE) & rec_interface
private rec_interface       ::= !(IMPLEMENTATION) & rec_implementation
private rec_implementation  ::= !(INITIALIZATION | FINALIZATION | BEGIN | ".")
private rec_section_nested  ::= !(CLASS | TYPE | EXPORTS | varKey | constKey | PROPERTY | Visibility |
                                 (NAME "=") | "." | END ) & rec_interface
private rec_section         ::= !(rec__routine_key) & rec_section_nested
private rec_statement_mid   ::= !(rec__stmt_middle)
private rec_section_global  ::= !(".") & rec_section
private rec_routine         ::= rec_section & rec_interface
private rec_semi            ::= !(";") & rec_section
private rec_struct_field    ::= !(";" | ")" | END | CASE)
private rec_struct_outer    ::= !(END)
private rec__routine_key    ::= PROCEDURE | FUNCTION | CONSTRUCTOR | DESTRUCTOR | OPERATOR
private rec_name            ::= !(NAME (":" | ",") ) & rec_section

private interfaceDecl       ::= commonDecl | routineDecl | ExportsSection | assemblyAttribute {recoverWhile=rec_section}
private assemblyAttribute   ::= "[" "assembly" ":" CustomAttributeDecl "]" {pin=2}
ExportsSection              ::= EXPORTS identifier exportItem ("," identifier exportItem)* ";" {pin=1}
private exportItem          ::= ["(" [FormalParameterList] ")"] [INDEX Expression] ["name" Expression] ["resident"]

private operatorRedef       ::= ASSIGN | PLUS | MINUS | MULT | DIV | POWER | EQ | LT | LE | GT | GE
private procName            ::= ClassQualifiedIdent | NamedIdent
private methodKey           ::= [CLASS] PROCEDURE | CONSTRUCTOR | DESTRUCTOR | CLASS OPERATOR
private procKey             ::= FUNCTION | PROCEDURE

ExportedRoutine             ::= routineDeclaration {implements="com.siberika.idea.pascal.lang.psi.PasEntityScope"}
private routineDeclaration  ::= [CustomAttribute] (exportedProc | exportedFunc | operatorDecl) ";" functionDirective* {pin=2 recoverWhile=rec_routine}
private exportedFunc        ::= [CLASS] FUNCTION procName [GenericDefinition] [FormalParameterSection] ":" [CustomAttribute] TypeDecl {pin=2}
private exportedProc        ::= methodKey procName [GenericDefinition] [FormalParameterSection] {pin=1}
private operatorDecl        ::= OPERATOR operatorRedef FormalParameterSection [NamedIdent] ":" TypeDecl {pin=1}

RoutineImplDecl             ::= routineDeclaration ProcBodyBlock {pin=1 name="procedure or function declaration"}
RoutineImplDeclWoNested     ::= routineDeclaration BlockLocalWONested [";"] {extends=RoutineImplDecl}

ClassMethodResolution       ::= [CLASS] procKey GenericTypeIdent "." identifier "=" identifier ";"

private complexType         ::= complexTypePart
private complexTypePart     ::= ClassTypeTypeDecl | structTypeDecl | ArrayType | SetType | FileType
private structTypeDecl      ::= ClassHelperDecl | ClassTypeDecl | InterfaceTypeDecl | ObjectDecl | RecordHelperDecl | RecordDecl

private routineDecl         ::= ExportedRoutine | ClassMethodResolution
private commonDecl          ::= [CLASS] ClassProperty | ConstSection | TypeSection | [CLASS] VarSection
private structItem          ::= commonDecl | routineDecl | classFieldSemi | Visibility
private declSection	        ::=	RoutineImplDecl | commonDecl | LabelDeclSection | ExportsSection | assemblyAttribute
private declSectionNested   ::= RoutineImplDeclWoNested | commonDecl | LabelDeclSection {recoverWhile=rec_section}
private declSectionWONested ::= commonDecl | LabelDeclSection {recoverWhile=rec_section_nested}

UnitImplementation          ::= IMPLEMENTATION [UsesClause] ImplDeclSection unitBlock {pin=1 recoverWhile=rec_implementation name="implementation section"}
ImplDeclSection             ::= declSection* {}
private unitBlock           ::= [UnitInitialization] [UnitFinalization] END | CompoundStatement | END {}
UnitInitialization          ::= INITIALIZATION statementList {pin=1 name="initialization section"}
UnitFinalization            ::= FINALIZATION statementList  {pin=1 name="finalization section"}

ProgramModuleHead	        ::= PROGRAM NamespaceIdent ProgramParamList? ";" {pin=1}
ProgramParamList            ::= LPAREN progParam? progParamsRest* RPAREN {pin=1}
private progParamsRest      ::= "," progParam {pin=1}
private progParam           ::= identifier {}

private namespaceNameList   ::= namespaceFileName namespaceNamesRest* ";"
private namespaceNamesRest  ::= COMMA namespaceFileName {pin=1}
private namespaceFileName	::=	NamespaceIdent [IN quotedString] {}

BlockGlobal	                ::=	[';'] declSection* BlockBody {recoverWhile=rec_block_global_end}
BlockLocal 	                ::=	[';'] declSectionNested* BlockBody
BlockLocalWONested          ::=	[';'] declSectionWONested* BlockBody {pin=2}
BlockBody	                ::=	CompoundStatement |	AssemblerStatement

AssemblerStatement          ::= ASM asmBlock END
private asmBlock            ::= assemblerItem* {recoverWhile=rec_struct_outer}
private assemblerItem       ::= ',' | '[' | ']' | ':' | '+' | '-' | '*' | '/' | '@' | identifier | NUMBER_INT | NUMBER_HEX | NUMBER_BIN

private functionDirective   ::= overloadDirective | externalDirective | oldCallConventionDirectiveSemi
                              | inlineDirectiveSemi | callConventionSemi | HintingDirective ";"
                              | REINTRODUCE ';' | OVERLOAD ';' | bindingDirective | abstractDirectiveSemi | dispIDDirective {name="routine directive"}
private overloadDirective   ::= OVERLOAD ";"
private oldCallConventionDirectiveSemi ::= oldCallConventionDirective ";"
private oldCallConventionDirective ::= "far" | "local" | "near"
private externalDirective   ::= "varargs" ";" | EXTERNAL ";" | EXTERNAL ConstExpression externalSpecifier* ";"
private externalSpecifier   ::= "name" ConstExpression | INDEX ConstExpression
ProcBodyBlock               ::= ProcForwardDecl | procExternalDecl | BlockLocal [";"]
private procExternalDecl    ::= EXTERNAL ("name" Expression | INDEX Expression)* functionDirective* {pin=1}
ProcForwardDecl             ::= FORWARD ";" functionDirective* {pin=1}

private dispIDDirective     ::= DISPID Expression ";" {pin=1}
private callConventionSemi  ::= callConvention ";"
private callConvention      ::= CDECL | PASCAL | REGISTER | SAFECALL | STDCALL | EXPORT
private inlineDirectiveSemi ::= inlineDirective ";"
private inlineDirective     ::= INLINE | ASSEMBLER
private abstractDirectiveSemi ::= abstractDirective ";"
private abstractDirective   ::= ABSTRACT | FINAL
private bindingDirective    ::= ((MESSAGE Expression) | STATIC | DYNAMIC | OVERRIDE | VIRTUAL) ";"

LabelDeclSection	        ::=	LABEL label labelsRest* ";" {pin=1 name="label declaration"}
private labelsRest          ::= "," label {}
private label               ::= identifier | NUMBER_INT | NUMBER_HEX

VarSection	                ::=	varKey VarDeclaration+ {pin=1 name="var section"}
private varKey	            ::=	VAR | THREADVAR
VarDeclaration	            ::=	[CustomAttribute] identList ":" TypeDecl [VarValueSpec] HintingDirective* ";" {pin=2 recoverWhile=rec_name}
VarValueSpec	            ::=	ABSOLUTE identifier | ABSOLUTE ConstExpressionOrd | EQ ConstExpression

ConstSection                ::= constKey ConstDeclaration+ {pin=1 name="const section"}
private constKey            ::= CONST |	RESOURCESTRING
ConstDeclaration            ::= [CustomAttribute] NamedIdent [":" TypeDecl] "=" ConstExpression HintingDirective* ";" {pin=2 recoverWhile=rec_name}
NamedIdent                  ::= identifier

TypeSection                 ::= TYPE TypeDeclaration+ {pin=1 name="type section"}
TypeDeclaration             ::= [CustomAttribute] GenericTypeIdent "=" type {pin=3 recoverWhile=rec_section}
private type                ::= (ClassForwardDecl ";") | (TypeDecl HintingDirective* ";")

GenericTypeIdent    ::= identifier [GenericDefinition]
GenericDefinition   ::= SimpleGenericDefinition | ConstrainedGenericDefinition
SimpleGenericDefinition ::= "<" identifier IdentsRest* ">" {pin=1}                     //TODO use meta rule
IdentsRest          ::= "," identifier {pin=1}
ConstrainedGenericDefinition ::= "<" ConstrainedGeneric ConstrainedGenericsRest ">" {pin=1}
ConstrainedGeneric  ::= identifier [ ":" GenericConstraint GenericConstraintsRest ]
GenericConstraint   ::= identifier | RECORD | CLASS | CONSTRUCTOR
GenericConstraintsRest ::= "," GenericConstraint {pin=1}
ConstrainedGenericsRest ::= ";" ConstrainedGeneric {pin=1}
GenericPostfix      ::=	"<" TypeDecl TypeDeclsRest* ">" {pin=1}
TypeDeclsRest       ::= "," TypeDecl {pin=1}

TypeID              ::=	FullyQualifiedIdent

TypeDecl	                ::=	complexType | PointerType | ProcedureType | StringType | simpleType | [TYPE] TypeID [GenericPostfix]

private ClassForwardDecl    ::= CLASS [ClassParent] {name="forward class declaration"}

ClassField                  ::= field
private classFieldSemi      ::= ClassField ";"
ClassTypeDecl               ::= [PACKED] classDecl {name="class declaration"}
private classDecl           ::= CLASS ((classBody END) | [ClassParent]) {pin=1}
private classBody           ::= [ClassState] [ClassParent] structItem* {recoverWhile=rec_struct_outer}

ClassHelperDecl             ::= CLASS HELPER classHelperBody END {name="class helper declaration"}
private classHelperBody     ::= [ClassParent] FOR TypeID structItem* {pin=2 recoverWhile=rec_struct_outer}

InterfaceTypeDecl           ::= interfaceKey interfaceBody END
                              | interfaceKey [ClassParent] {pin(".*")=interfaceKey name="interface declaration"}
private interfaceBody       ::= [ClassParent] [interfaceGuid] structItem* {recoverWhile=rec_struct_outer}
ObjectDecl                  ::= [PACKED] objectTypeDecl {name="object declaration"}
private objectTypeDecl      ::= OBJECT objectBody END {pin=1}
private objectBody          ::= [ClassParent] structItem* {recoverWhile=rec_struct_outer}

RecordDecl                  ::= variantRecord | simpleRecord {name="record declaration"}
private simpleRecord        ::= [PACKED | "bitpacked"] RECORD recordBody END {pin=2}
private recordBody          ::= structItem* [ClassField] {recoverWhile=rec_struct_outer}

private variantRecord       ::= [PACKED | "bitpacked"] RECORD varRecDecl END
private varRecDecl          ::= structItem* [ClassField] [recordVariantSection] {recoverWhile=rec_struct_field}
private varRecDeclInner     ::= (field ";")* [field] [recordVariantSection] {recoverWhile=rec_struct_field}
private field               ::= [CustomAttribute] identList ":" TypeDecl HintingDirective* {pin=3 recoverWhile=rec_struct_field}
private recordVariantSection ::= CASE [identifier ":"] TypeDecl OF recordVariants {pin=1}
private recordVariants      ::= (RecordVariant ";")* [RecordVariant]
RecordVariant               ::= Expression ("," Expression)* ":" "(" varRecDeclInner ")" {pin=4}  // rethink expression, separate simpler expressions?

RecordHelperDecl            ::= RECORD HELPER classHelperBody END {pin=2}

ClassState          ::= SEALED | ABSTRACT

ClassParent         ::= "(" TypeID ("," TypeID)* ")" {pin=1}

private interfaceGuid       ::= "[" quotedString "]" {pin=1}
private interfaceKey        ::= INTERFACE | DISPINTERFACE

ClassTypeTypeDecl           ::= CLASS OF TypeID {pin(".*")="class of" name="metaclass declaration"}

Visibility                  ::= [STRICT] PRIVATE | [STRICT] PROTECTED | PUBLIC | PUBLISHED | AUTOMATED


ClassProperty ::= [CustomAttribute] [CLASS] PROPERTY NamedIdent [ClassPropertyArray] [":" TypeID] [ClassPropertyIndex] ClassPropertySpecifier* ";" {pin=3}
ClassPropertyArray ::= "[" FormalParameterList "]" {pin=1}
ClassPropertyIndex ::= INDEX ConstExpressionOrd {pin=1}
ClassPropertySpecifier ::= ClassPropertyReadWrite | ClassPropertyDispInterface | "stored" Expression
                                 | DEFAULT Expression | ';' DEFAULT | "nodefault" | IMPLEMENTS TypeID
ClassPropertyReadWrite ::= READ RefNamedIdent | WRITE RefNamedIdent | "add" RefNamedIdent | "remove" RefNamedIdent
RefNamedIdent       ::= identifier
ClassPropertyDispInterface ::= "readonly" ";" | "writeonly" ";" | dispIDDirective

ArrayType               ::= [PACKED | "bitpacked"] ARRAY [arrayIndexes] OF arraySubType {pin=2}
private arrayIndexes    ::= "[" [ArrayIndex] arrayIndexRest* "]" {pin=1}
ArrayIndex              ::= SubRangeType | TypeID     //TODO: TypeID only?
private arrayIndexRest  ::= "," [ArrayIndex] {pin=1}
private arraySubType    ::= CONST | TypeDecl

SetType             ::= [PACKED] SET OF TypeDecl {pin=2}
FileType            ::= FILE [OF TypeDecl] {pin=1}
PointerType         ::= "^" TypeDecl {pin=1}

StringType                  ::= "string" ["[" Expression "]"] | "AnsiString" [codePageNumber]
private codePageNumber      ::= "(" ConstExpressionOrd ")" {pin=1}

ProcedureType               ::= SimpleProcedureType | ProcedureReference
SimpleProcedureType         ::= procedureTypeHeading {recoverWhile=rec_semi}
ClosureExpression           ::= (funcHeading | procHeading) BlockGlobal

ProcedureReference          ::= REFERENCE TO procedureTypeHeading {pin=1}
private procedureTypeHeading ::= (funcHeading | procHeading) [OF OBJECT]
private funcHeading         ::= FUNCTION [FormalParameterSection] ":" [CustomAttribute] TypeDecl [";" callConvention+] {pin=1}
private procHeading         ::= PROCEDURE [FormalParameterSection] [";" callConvention+] {pin=1}

private simpleType          ::= EnumType | SubRangeType
SubRangeType        ::= RangeBound RANGE RangeBound
RangeBound          ::= ConstExpressionOrd
EnumType            ::= "(" enumEl enumRest* ")" {pin=1}
private enumRest    ::= "," enumEl {pin=1}
private enumEl      ::= NamedIdent ["=" Expression] {}

    private rec__stmt_start          ::= REPEAT | WHILE | FOR | CASE | WITH | RAISE | IF | TRY | BEGIN | BREAK | CONTINUE | EXIT | GOTO | INHERITED
                                  | NUMBER_INT | NUMBER_HEX | NUMBER_REAL | identifier | KeywordIdent | KEYWORDESCAPE | '^' | '.' | '[' | '('
    private rec__stmt_middle         ::= DO | ELSE | THEN

CompoundStatement           ::= BEGIN statementBlock END {pin=1}
private statementBlock      ::= [statementList] {recoverWhile=rec_block_local_end}
private statementList       ::= [Statement] statements*
private statements          ::= ";" [Statement]
Statement                   ::= [LabelId ":" ] statementPart {recoverWhile=rec_statement}
private rec_statement       ::= !(SEMI | END | ELSE | FINALLY | EXCEPT | UNTIL | FINALIZATION)
private statementPart       ::= RepeatStatement | WhileStatement | ForStatement
                              | CaseStatement | WithStatement | RaiseStatement | AssemblerStatement
                              | IfStatement | TryStatement | simpleStatement | CompoundStatement | stmtEmpty

private simpleStatement     ::= GotoStatement | StmtSimpleOrAssign
StmtSimpleOrAssign          ::= Expression [assignPart]
assignOp                    ::= ":=" | "+=" | "-=" | "*=" | "/="
assignPart                  ::= assignOp (NewStatement | Expression) {pin=1 }
NewStatement                ::= NEW "(" [ Expression ] ("," [ Expression ])* [ "," ConstExpression ] ")"// {pin=1 }
stmtEmpty           ::= //empty

RepeatStatement     ::= REPEAT [statementList] UNTIL Expression {pin=1}
WhileStatement      ::= WHILE Expression DO Statement {pin=1}
ForStatement        ::= FOR FullyQualifiedIdent (ForCycle | IN) Expression DO Statement {pin=1}
ForCycle            ::= ":=" Expression (TO | DOWNTO)

IfStatement                 ::= IF Expression THEN Statement [ELSE Statement] {pin=1}

CaseStatement       ::= CASE Expression OF CaseItem* [ELSE statementList ] END {pin=1}
CaseItem	        ::=	CaseLabel ("," CaseLabel)* ":" Statement [";"] {pin=3}
CaseLabel	        ::=	ConstExpressionOrd [RANGE ConstExpressionOrd] //{}

TryStatement                ::= TRY statementList (tryExcept | tryFinally) END {pin=1}
private tryFinally          ::= FINALLY statementList
private tryExcept           ::= EXCEPT HandlerList
HandlerList                 ::= Handler+ [ELSE statementList] | statementList
Handler                     ::= ON identifier ":" TypeID "do" Statement ";" {pin=1}

WithStatement               ::= WITH withArgument DO Statement {pin=1}
private withArgument        ::= Expression designatorsRest* {recoverWhile=rec_statement_mid}
private designatorsRest     ::= "," Expression {}

RaiseStatement              ::= RAISE [Expression] ["at" Expression] {pin=1}

GotoStatement               ::= GOTO LabelId | EXIT [ "(" Expression ")" ] | BREAK | CONTINUE

LabelId                     ::= identifier | NUMBER_INT

ClassQualifiedIdent         ::= SubIdent "." SubIdent
FullyQualifiedIdent	        ::=	namespacePart? SubIdent
NamespaceIdent	            ::=	namespacePart? SubIdent
SubIdent                    ::= identifier
private namespacePart       ::= namespaceItem+
private namespaceItem       ::= SubIdent "."// {pin=2 }

HintingDirective            ::= (DEPRECATED [StringFactor]) | EXPERIMENTAL | PLATFORM | LIBRARY// {}
//recover_hintingDir          ::= !(';' | ')' | END | global_decl)

KeywordIdent                ::= OUT | EXIT | BREAK | CONTINUE | OPERATOR | SELF | NEW | REINTRODUCE | OVERLOAD | MESSAGE |STATIC | DYNAMIC
                              | OVERRIDE | VIRTUAL | ABSTRACT | SEALED | FINAL | ASSEMBLER | CDECL | PASCAL | REGISTER | SAFECALL | STDCALL
                              | EXPORT | STRICT | PRIVATE | PROTECTED | PUBLIC | PUBLISHED | AUTOMATED | DISPID | EXTERNAL | FORWARD | HELPER
                              | DEFAULT | IMPLEMENTS | INDEX | READ | WRITE | DEPRECATED | EXPERIMENTAL | PLATFORM | REFERENCE
                              | PACKAGE | CONTAINS | REQUIRES
private identifier          ::= KEYWORDESCAPE reservedWord | KeywordIdent | NAME
private reservedWord	    ::=	NAME //===***
private identList	        ::=	identListItem identListRest*
private identListRest       ::= "," identListItem {pin=1}
private identListItem       ::= NamedIdent

ConstExpression	            ::=	RecordConstExpr | NewConstExpression | Expression {recoverWhile=rec_expr_colon name="constant expression"}
ConstExpressionOrd          ::=	ExpressionOrd {name="integer constant expression"}
NewConstExpression	        ::=	LPAREN ConstExpression (COMMA ConstExpression)* RPAREN | Expression
private RecordConstExpr     ::= RecordConstValue | Expression;
private RecordConstValue    ::= "(" recordConstInner ")"
private recordConstInner    ::= recordValue recordValueRest* {recoverWhile=rec_record_colon}
private recordValueRest     ::= ";" recordValue
private recordValue         ::= identifier ":" RecordConstExpr

private rec_record_colon    ::= !(")" | END)
private rec_expr_colon      ::= !(")" | ";") & rec_section

/*private Designator                  ::= //[ "inherited" ] , [ QualifiedIdent | TypeID ] , { DesignatorItem } ===***
                                INHERITED [TypeID] exprParentheses? | EntityID DesignatorItemEx* | DesignatorItemEx+
private DesignatorItem      ::= "^" | "." FieldId | "[" ExpressionsList "]"
private DesignatorItemEx    ::= DesignatorItem | exprParentheses
private exprParentheses     ::= "(" exprInParentheses ")" {pin=1}
private exprInParentheses   ::= [ExpressionColon ExpressionColons*] {recoverWhile=rec_expr_colon}
private ExpressionColon     ::= Expression [ColonConstruct] {}
private ExpressionColons    ::= "," ExpressionColon
private ColonConstruct      ::= ":" Expression [ ":" Expression ]

private primary             ::= AT primary | AT AT primary | NOT primary | PLUS primary | MINUS primary
                              | NUMBER_INT | NUMBER_REAL | NUMBER_HEX | NUMBER_BIN | TRUE | FALSE | NIL
                              | StringFactor | SetSection | Designator

private primaryOrd          ::= NOT primaryOrd | PLUS primaryOrd | MINUS primaryOrd | NUMBER_INT | NUMBER_HEX | TRUE | FALSE | NIL
                              | "(" ExpressionOrd ")" | StringFactor | Designator


Expression ::= ClosureExpression | expr_rel
private expr_rel            ::= expr_sum relOpRest*
private relOpRest           ::= relOp expr_sum {pin=1 }
private expr_sum            ::= expr_product addOpRest*
private addOpRest           ::= addOp expr_product {pin=1 }
private expr_product        ::= primary mulOpRest*
private mulOpRest           ::= mulOp primary {pin=1 }

ExpressionOrd ::= expr_relOrd
private expr_relOrd ::= expr_sumOrd (relOp expr_sumOrd)*
private expr_sumOrd ::= expr_productOrd (addOp expr_productOrd)*
private expr_productOrd ::= primaryOrd (mulOp primaryOrd)* */
// **********************************************************************
relOp                       ::= "<" | ">" | "<=" | ">=" | "<>" | "=" | IN | IS
addOp                       ::=	PLUS | MINUS | OR | XOR
mulOp                       ::= "*" | "/" | IDIV | MOD | AND | SHL | SHR | AS
unaryOp                     ::= "+" | "-" | "@" | NOT

ExpressionOrd               ::= Expression
Expression                  ::= ClosureExpression | Expr

Expr                        ::= relationalExpr | sumExpr | productExpr | unaryExpr | referenceExpr | callGroup | primaryGroup {extends="com.siberika.idea.pascal.lang.psi.impl.PascalExpression"}
relationalExpr              ::= Expr relOp Expr
sumExpr                     ::= Expr addOp Expr
productExpr                 ::= Expr mulOp Expr
unaryExpr                   ::= unaryOp Expr
dereferenceExpr             ::= Expr '^'
referenceExpr               ::= Expr '.' FullyQualifiedIdent
simpleRefExpr               ::= (INHERITED? FullyQualifiedIdent) | INHERITED {elementType=referenceExpr}  // let qualified and simple references have the same type
callExpr                    ::= Expr argumentList
indexExpr                   ::= Expr indexList
argumentList                ::= '(' [ !')' Expr [ColonConstruct]  (',' Expr [ColonConstruct]) * ] ')' {pin(".*")=1}
private parenConstruct      ::= '(' [ !')' Expr (',' Expr) * ] ')' {pin(".*")=1}
ColonConstruct              ::= ':' Expr [':' Expr]
indexList                   ::= '[' Expr (',' Expr) * ']' {pin=1}
parenExpr                   ::= parenConstruct
setExpr                     ::= '[' [ !']' Expr setTail * ] ']' {pin(".*")=1}
private setTail             ::= ("," | ".." | ) Expr //{}
private primaryGroup        ::= simpleRefExpr | literalExpr | parenExpr | setExpr
private callGroup           ::= callExpr | indexExpr | dereferenceExpr
literalExpr                 ::= NUMBER_INT | NUMBER_REAL | NUMBER_HEX | NUMBER_BIN | TRUE | FALSE | NIL | StringFactor
// **********************************************************************
FormalParameterSection      ::= "(" [ FormalParameterList ] ")"
private FormalParameterList ::= FormalParameter (";" FormalParameter)*
FormalParameter             ::= [ CustomAttribute ] [ ParamType ] identList [ ":" TypeDecl ] [ "=" Expression ]
ParamType                   ::= CONST | VAR | OUT | CONSTREF//ParmType

ExpressionsList	            ::= Expression (COMMA Expression)*

CustomAttribute	            ::=	LBRACK CustomAttributeDecl RBRACK | assemblyAttribute
CustomAttributeDecl         ::= FullyQualifiedIdent LPAREN ExpressionsList RPAREN
StringFactor                ::= controlString (quotedString controlString)* [quotedString]
                              | quotedString (controlString quotedString)* [controlString]
private quotedString        ::=	STRING_LITERAL
private controlString       ::=	controlchar+
private controlchar         ::= CHARNUM NUMBER_INT | CHARNUM NUMBER_HEX // ***===
