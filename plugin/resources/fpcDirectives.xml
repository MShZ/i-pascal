<compilers>
    <compiler name="FPC" version="2.2.0">
        <directive>
            <id>$A</id>
            <id>$ALIGN</id>
            <desc>data alignment strategy</desc>
            <value>1</value>
            <value>2</value>
            <value>4</value>
            <value>8</value>
            <value>16</value>
            <value>32</value>
        </directive>
        <directive>
            <id>$A1</id>
            <desc>Align to 1 byte</desc>
        </directive>
        <directive>
            <id>$A2</id>
            <desc>Align to 2 bytes</desc>
        </directive>
        <directive>
            <id>$A4</id>
            <desc>Align to 4 bytes</desc>
        </directive>
        <directive>
            <id>$A8</id>
            <desc>Align to 8 bytes</desc>
        </directive>
        <directive>
            <id>$ASMMODE</id>
            <desc>Set assembler mode</desc>
            <value>att</value>
            <value>intel</value>
            <value>direct</value>
        </directive>

        <directive>
            <id>$B</id>
            <id>$BOOLEVAL</id>
            <desc>Complete boolean evaluation</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$C</id>
            <id>$ASSERTIONS</id>
            <desc>Assertion support</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$BITPACKING</id>
            <desc>Enable bitsize packing</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$CALLING</id>
            <desc>Specify calling convention</desc>
            <value>default</value>
            <value>register</value>
            <value>cdecl</value>
            <value>pascal</value>
            <value>safecall</value>
            <value>stdcall</value>
            <value>oldfpccall</value>
        </directive>

        <directive>
            <id>$CHECKPOINTER</id>
            <desc>Check pointer values</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$CODEALIGN</id>
            <desc>Set the code alignment in bytes</desc>
            <value><![CDATA[<value>]]></value>
            <value>PROC=</value>
            <value>JUMP=</value>
            <value>LOOP=</value>
            <value>CONSTMIN=</value>
            <value>CONSTMAX=</value>
            <value>VARMIN=</value>
            <value>VARMAX=</value>
            <value>LOCALMIN=</value>
            <value>LOCALMAX=</value>
            <value>RECORDMIN=</value>
            <value>RECORDMAX=</value>
        </directive>

        <directive>
            <id>$COPERATORS</id>
            <desc>Allow C like operators</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$DEFINE</id>
            <desc>Define a symbol</desc>
        </directive>

        <directive>
            <id>$DEFINEC</id>
            <desc>Define a symbol (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ELSE</id>
            <desc>Switch conditional compilation</desc>
        </directive>

        <directive>
            <id>$ELSEC</id>
            <desc>Switch conditional compilation (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ELSEIF</id>
            <desc>Switch conditional compilation</desc>
        </directive>

        <directive>
            <id>$ELIFC</id>
            <desc>Switch conditional compilation (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ENDC</id>
            <desc>End conditional compilation (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ENDIF</id>
            <desc>End conditional compilation</desc>
        </directive>

        <directive>
            <id>$ERROR</id>
            <desc>Generate error message</desc>
            <value></value>
        </directive>
        <directive>
            <id>$ERRORC</id>
            <desc>Generate error message (Mac Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$ENDREGION</id>
            <desc>End of a collapsible region</desc>
        </directive>

        <directive>
            <id>$EXTENDEDSYM</id>
            <desc>Ignored (Delphi compatibility)</desc>
        </directive>

        <directive>
            <id>$EXTERNALSYM</id>
            <desc>Ignored (Delphi compatibility)</desc>
        </directive>

        <directive>
            <id>$F-</id>
            <id>$F+</id>
            <desc>Far or near functions (Turbo Pascal compatibility)</desc>
        </directive>

        <directive>
            <id>$FATAL</id>
            <desc>Generate fatal error message</desc>
            <value></value>
        </directive>

        <directive>
            <id>$FPUTYPE</id>
            <desc>Select coprocessor type</desc>
            SOFT
            X87, SSE, SSE2
            SSE64
            STANDARD
            LIBGCC, FPA, FPA10, FPA11,VFP
        </directive>

        <directive>
            <id>$GOTO</id>
            <desc>Support Goto and Label</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$H+</id>
            <id>$H-</id>
            <desc>Use AnsiStrings</desc>
        </directive>
        <directive>
            <id>$LONGSTRINGS</id>
            <desc>Use AnsiStrings</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$HINT</id>
            <value></value>
            <desc>Generate hint message</desc>
        </directive>

        <directive>
            <id>$HINTS</id>
            <desc>Emit hints</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$HPPEMIT</id>
            <desc>Ignored (Delphi compatibility)</desc>
        </directive>

        <directive>
            <id>$IF</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFC</id>
            <desc>Start conditional compilation (Mac Pascal compatibility)</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFDEF</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFNDEF</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IFOPT</id>
            <desc>Start conditional compilation</desc>
            <value></value>
        </directive>

        <directive>
            <id>$IMPLICITEXCEPTIONS</id>
            <desc>Implicit finalization code generation</desc>
            <value>ON</value>
            <value>OFF</value>
        </directive>

        <directive>
            <id>$INFO</id>
            <desc>Generate info message</desc>
            <value></value>
        </directive>



    </compiler>
</compilers>

        <!--.*?(\$\w+( or \$\w+)?) : ((\w+\s)*\w+)-->
<!--<directive>\n<id>$1</id>\n<desc>$3</desc>\n</directive>\n-->